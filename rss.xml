<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Log4D</title><link>https://blog.alswl.com/</link><description></description><lastBuildDate>Sun, 12 Nov 2017 15:30:12 +0800</lastBuildDate><item><title>服务性能监控：USE 方法（The USE Method）</title><link>https://blog.alswl.com/2017/11/use-method/</link><description>&lt;p&gt;本文首发在沪江技术学院公众号，小莞翻译，我做了校对。
由于微信公众号的封闭性，我担心未来文章不容易被发现。
为了避免沧海遗珠，特意转到这里。&lt;/p&gt;
&lt;p&gt;英文原文：&lt;a href="http://www.brendangregg.com/usemethod.html"&gt;The USE Method&lt;/a&gt;。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img alt="201711/performance.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201711/performance_900.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;USE 方法是一种能分析任何系统性能的方法论。
我们可以根据能帮助系统分析的结构化清单，来迅速的定位资源的瓶颈和错误所在。
它通常会先以列出问题为开始，然后再寻找适合的指标，而不是给你制定一些固定的指标，
然后让你按部就班的执行下去。&lt;/p&gt;

&lt;p&gt;本页左侧下方，是我列出的，根据不同的操作系统（Linux、 Solaris 等）
衍生的 USE 方法列表。（译者注：可以参考原文链接）&lt;/p&gt;
&lt;p&gt;我列出了为不同的操作系统而衍生的 USE 方法列表供大家参考，
你们可以根据你的环境来为你的站点服务，选择适合的附加监控指标。&lt;/p&gt;
&lt;p&gt;通过这个工具，可以很方便的筛选出适合不同的系统的建议 metrics：&lt;a href="http://www.brendangregg.com/USEmethod/use-rosetta.html"&gt;USE Method: Rosetta Stone of Performance Checklists&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introintroduction"&gt;Intro（Introduction）&lt;/h2&gt;
&lt;p&gt;如果你遇到一个很严重的性能问题升级的时候，并且你不能确定它是否由服务导致的，
这时候你该怎么办？&lt;/p&gt;
&lt;p&gt;我们都说万事开头难。所以我开发出了 USE 方法，来帮助大家，如何去快速的解决常见的性能问题，而同时又不容易忽略重要的地方。&lt;/p&gt;
&lt;p&gt;USE 方法在设计之初就定位了简洁、明了、完整、快速的特性，
就好像一本航天手册的紧急事项列表那样。
（译者注：航天手册，介绍包括不限于飞机的各种特性、指标、性能等，
用于帮助飞行学员学习驾驶飞机，或者是帮助那些希望提高他们的飞行潜能和航空知识的人了解的更全面）。&lt;/p&gt;
&lt;p&gt;USE 方法已经在不同的企业、课堂（作为学习工具）以及最近的云计算等场景中，被成功应用了无数次。&lt;/p&gt;
&lt;p&gt;USE 方法基于 3+1 模型（三种指标类型+一种策略），来切入一个复杂的系统。我发现它仅仅发挥了
5% 的力量，就解决了大概 80% 的服务器问题，并且正如我将证明的，它除了服务器以外，也同样适应于各种系统。&lt;/p&gt;
&lt;p&gt;它应当被理解为一种工具，一种很大的方法工具箱里面的工具。不过，它目前仍然还有很多问题类型以待解决，还需要点其他方法和更多的时间。&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;USE 方法可以概括为：检查所有的资源的利用率，饱和度，和错误信息。&lt;/p&gt;
&lt;p&gt;我们期望大家能尽早使用 USE 方法去做性能检查，或者是用它确定系统的瓶颈。&lt;/p&gt;
&lt;p&gt;名词定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源： 服务器功能性的物理组成硬件（CPU， 硬盘,  总线）&lt;/li&gt;
&lt;li&gt;利用率： 资源执行某工作的平均时间&lt;/li&gt;
&lt;li&gt;饱和：衡量资源超载工作的程度，往往会被塞入队列&lt;/li&gt;
&lt;li&gt;错误： 错误事件的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分析软件资源，或者是软件的强制性限制（资源控制）也是很有用的，同时要关注哪些指标是处于正常的可接受范围之内的。这些指标通常用以下术语表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用率：
    以一个时间段内的百分比来表示，例如：一个硬盘以 90% 的利用率运行&lt;/li&gt;
&lt;li&gt;饱和度： 一个队列的长度，例如：CPUs 平均的运行时队列长度是4&lt;/li&gt;
&lt;li&gt;错误（数）： 可度量的数量，例如：这个网络接口有 50 次（超时？）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们应该要调查那些错误，因为它们会降低系统的性能，并且当故障模型处于可回复模式的时候，它可能不会立刻被发现。&lt;/p&gt;
&lt;p&gt;这包括了那些失败和重试等操作，以及那些来自无效设备池的失效设备。&lt;/p&gt;
&lt;h2 id="di-li-yong-lu-shi-fou-yi-wei-zhao-wei-bao-he"&gt;低利用率是否意味着未饱和？&lt;/h2&gt;
&lt;p&gt;即使在很长一段时间内利用率很低，一个爆发增长的高利用率，也会导致饱和 and
性能问题，这点要理解起来可能有违三观！&lt;/p&gt;
&lt;p&gt;我举个例子，有一位客户遇到的问题，即使他们的监控工具显示
CPU 使用率从来没有超出过 80% ，但是
CPU 饱和度依然有问题（延迟）监控工具报告了
5 分钟的平均值，而其中，CPU利用率曾在数秒内高达 100% 。&lt;/p&gt;
&lt;h2 id="zi-yuan-lie-biao"&gt;资源列表&lt;/h2&gt;
&lt;p&gt;下面来看如何开始使用。&lt;/p&gt;
&lt;p&gt;准备工作时， 你需要一个资源列表来按步就班的去做。
下面是一个服务器的通用列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPUs： sockets, cores, hardware threads (virtual CPUs)&lt;/li&gt;
&lt;li&gt;内存： 容量&lt;/li&gt;
&lt;li&gt;网络接口&lt;/li&gt;
&lt;li&gt;存储设备： I/O, 容量&lt;/li&gt;
&lt;li&gt;控制器： 存储, 网卡&lt;/li&gt;
&lt;li&gt;通道： CPUs, memory, I/O&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些组件分两种类型的资源：存储设备是服务请求资源（I / O）
以及容量资源（population）， 两种类型都可能成为系统瓶颈。
请求资源可以定义为队列系统，可以将请求先存入排队然后再消化请求。&lt;/p&gt;
&lt;p&gt;有些物理组件已被省略，例如硬件缓存（例如，MMU TLB / TSB，CPU）。&lt;/p&gt;
&lt;p&gt;USE 方法对于在高利用率或高饱和度下，遭受性能退化、导致瓶颈的资源最有效，在高利用率下缓存可以提高性能。&lt;/p&gt;
&lt;p&gt;在使用 USE 方法排除系统的瓶颈问题之后
，你可以检查缓存利用率和其他的性能属性。&lt;/p&gt;
&lt;p&gt;如果你不确认要不要监控某一个资源时，不要犹豫，监控它，然后你就能看到那些指标工作的有多么的棒。&lt;/p&gt;
&lt;h2 id="gong-neng-mo-kuai-shi-yi-tu"&gt;功能模块示意图&lt;/h2&gt;
&lt;p&gt;另外一种迭代资源的方法，是找到或者绘制一张系统的功能模块示意图。&lt;/p&gt;
&lt;p&gt;这些显示了模块关系的图，在你查找数据流的瓶颈的时候是非常有用的，这里有一张Sun
Fire V480 Guide(page 82)的例图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="201711/v480.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201711/v480.png"/&gt;&lt;/p&gt;
&lt;p&gt;我喜欢这些图表，尽管制作出它很难。
不过，由硬件工程师来画这张图是最适合的-他们最善于做这类事。如果不信的话你可以自己试试。&lt;/p&gt;
&lt;p&gt;在确定各种总线的利用率的同时，为每个总线的功能图表，注释好它的最大带宽。这样我们就能在进行单次测量之前，得到能将系统瓶颈识别出来的图表。&lt;/p&gt;
&lt;h2 id="interconnects"&gt;Interconnects&lt;/h2&gt;
&lt;p&gt;CPU，内存和I / O interconnects 往往被忽略。
幸运的是，它们并不会频繁地成为系统的瓶颈。
不幸的是，如果它们真的频繁的成为瓶颈，我们能做的很少（也许你可以升级主板，或减少 load：例如，"zero copy"项目减轻内存总线 load）。&lt;/p&gt;
&lt;p&gt;使用 USE 方法，至少你会意识到你没有考虑过的内容：interconnect 性能。
有关使用 USE 方法确定的互连问题的示例，请参阅分析 Analyzing the HyperTransport。&lt;/p&gt;
&lt;h2 id="metrics"&gt;Metrics&lt;/h2&gt;
&lt;p&gt;给定资源列表，识别指标类型：利用率，饱和度和错误指标。这里有几个示例。看下面的 table，思考下每个资源和指标类型，metric 列是一些通用的 Unix/Linux 的术语提示（你可以描述的更具体些）：&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;resource             type          metric
CPU                  utilization   CPU utilization (either per-CPU or a system-wide average)
CPU                  saturation    run-queue length or scheduler latency(aka
Memory capacity      utilization   available free memory (system-wide)
Memory capacity      saturation    anonymous paging or thread swapping (maybe "page scanning" too)
Network interface    utilization   RX/TX throughput / max bandwidth
Storage device I/O   utilization   device busy percent
Storage device I/O   saturation    wait queue length
Storage device I/O   errors        device errors ("soft", "hard", ...)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这些指标是每段间隔或者计数的平均值，作为你的自定义清单，要包括使用的监控软件，以及要查看的统计信息。如果是不可用的指标，可以打个问号。最后，你会完成一个完事的、简单、易读的
metrics 清单.&lt;/p&gt;
&lt;h2 id="harder-metrics"&gt;Harder Metrics&lt;/h2&gt;
&lt;p&gt;再来看几个硬件指标的组合&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;resource              type          metric
CPU                   errors        eg, correctable CPU cache ECC events or faulted CPUs (if the OS+HW supports that)
Memory capacity       errors
Network               saturation
Storage controller    utilization
CPU interconnect      utilization
Memory interconnect   saturation
I/O interconnect      utilization&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这些依赖于操作系统的指标一般会更难测量些，
而我通常要用自己写的软件去收集这些指标。&lt;/p&gt;
&lt;p&gt;重复所有的组合，并附上获取每个指标的说明，你会完成一个大概有30项指标的列表，其中有些是不能被测量的，还有些是难以测量的。&lt;/p&gt;
&lt;p&gt;幸运的是，最常见的问题往往是简单的（例如，CPU 饱和度，内存容量饱和度，网络接口利用率，磁盘利用率），这类问题往往第一时间就能被检查出来。&lt;/p&gt;
&lt;p&gt;本文的顶部，pic-1中的 example checklists 可作为参考。&lt;/p&gt;
&lt;h2 id="in-practice"&gt;In Practice&lt;/h2&gt;
&lt;p&gt;读取系统的所有组合指标，是非常耗时的，特别是当你开始使用总线和 interconnect
指标的情况下。&lt;/p&gt;
&lt;p&gt;现在我们可以稍微解放下了，USE 方法可以让你了解你没有检查的部分,你可以只有关注其中几项的时间例如：CPUs,
内存容量, 存储容易, 存储设备 I/O,
网络接口等。通过 USE 方法，那些以前未知的未知指标现在变成了已知的未知指标（我理解为，以前我们不知道有哪些指标会有什么样的数据，现在起码能知道我们应该要关注哪些指标）。&lt;/p&gt;
&lt;p&gt;如果将来定位一个性能问题的根本原因，对你的公司至关重要的时候，你至少已经有一个明确的、经过验证的列表，来辅助你进行更彻底的分析，请完成适合你自己的 USE 方法，有备无患。&lt;/p&gt;
&lt;p&gt;希望随着时间的推移，易于检查的指标能得以增长，因为被添加到系统的 metrics
越多，会使 USE 方法将更容易（发挥它的力量）。
性能监视软件也可以帮上忙，添加 USE 方法向导to do the work for you（do what
work? ）。&lt;/p&gt;
&lt;h2 id="software-resources"&gt;Software Resources&lt;/h2&gt;
&lt;p&gt;有些软件资源可以用类似的方式去分析。
这通常适用于软件的较小组件，而不是整个应用程序。 例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥锁(mutex locks)：利用率可以定义为锁等待耗时；饱和率定义为等待这把锁的线程个数。&lt;/li&gt;
&lt;li&gt;线程池：利用率可以定义为线程工作的时长；饱和率是等待线程池分配的请求数量。&lt;/li&gt;
&lt;li&gt;进程/线程
    容量：系统是有进程或线程的上限的，它的实际使用情况被定义为利用率；等待数量定义为饱和度；错误即是（资源）分配失败的情况（比如无法 fork）。
    （译注：fork 是一个现有进程，通过调用 fork 函数创建一个新进程的过程)&lt;/li&gt;
&lt;li&gt;文件描述符容量(file descriptor capacity)：和上述类似，但是把资源替换成文件描述符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果这几个指标很管用就一直用，要不然软件问题会被遗留给其他方法了（例如，延迟，后文会提到其他方法：other methodologies ）。&lt;/p&gt;
&lt;h2 id="suggested-interpretations"&gt;Suggested Interpretations&lt;/h2&gt;
&lt;p&gt;USE 方法帮助你定位要使用哪些指标。
在学习了如何从操作系统中读取到这些指标后，你的下一步工作就是诠释它们的值。对于有的人来说，
这些诠释可能是很清晰的（因为他们可能很早就学习过，或者是做过笔记）。而其他并不那么明了的人，可能取决于系统负载的要求或期望
。&lt;/p&gt;
&lt;p&gt;下面是一些解释指标类型的通用建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utilization：
    利用率通常象征瓶颈（检查饱和度可以进一步确认）。高利用率可能开始导致若干问题：&lt;/li&gt;
&lt;li&gt;对利用率进行长期观察时（几秒或几分钟），通常来说 70%
    的利用率会掩盖掉瞬时的 100% 利用率。&lt;/li&gt;
&lt;li&gt;某些系统资源，比如硬盘，就算是高优先级请求来了，也不会在操作进行中被中断。当他们的利用率到
    70% 时候，队列系统中的等待已经非常频繁和明显。而 CPU 则不一样，它能在大部分情况下被中断。&lt;/li&gt;
&lt;li&gt;Saturation：任何非 0 的饱和度都可能是问题。它们通常是队列中排队的时间或排队的长度。&lt;/li&gt;
&lt;li&gt;Errors：只要有一条错误，就值得去检查，特别是当错误持续发生从而导致性能降低时候。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要说明负面情况很容易：利用率低，不饱和，没有错误。 这比听起来更有用 -
缩小调查范围可以快速定位问题区域。&lt;/p&gt;
&lt;h2 id="cloud-computing"&gt;Cloud Computing&lt;/h2&gt;
&lt;p&gt;在云计算环境中，软件资源控制可能是为了限制
使用共享计算服务的 tenants 的流量。在 Joyent 公司，我们主要使用操作系统虚拟化（SmartOS），它强加了内存限制，
CPU 限制和存储I / O限制。 所有这些资源限制，都可以使用USE Method进行检查，类似于检查物理资源。&lt;/p&gt;
&lt;p&gt;例如，在我们的环境中，"内存容量利用率"可以是 tenants 的内存使用率 vs 它的内存上限
。即使传统的 Unix 页面扫描程序可能处于空闲状态，也可以通过匿名页面活动看到"内存容量饱和度"。&lt;/p&gt;
&lt;h2 id="strategy"&gt;Strategy&lt;/h2&gt;
&lt;p&gt;下面是用流程图 的方式画了 USE 方法的示意图。
请注意，错误检查优先于利用率和饱和度检查（因为通常错误更快的表现出来，并更容易解释）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201711/usemethod_flow.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201711/usemethod_flow.png"/&gt;&lt;/p&gt;
&lt;p&gt;USE 方法定位到的问题，可能是系统瓶颈。
不幸的是，系统可能会遇到多个性能问题，因此您发现的第一个可能的问题最终却不是个问题。
发现的每个问题都可以用方法持续的挖掘，然后继续使用 USE
方法对更多资源进行反复排查。&lt;/p&gt;
&lt;p&gt;进一步分析的策略包括工作量特征和 drill-down 分析。
完成这些后，你应该有依据据能判断，纠正措施是要调整应用的负载或调整资源本身。&lt;/p&gt;
&lt;h2 id="apollo"&gt;Apollo&lt;/h2&gt;
&lt;p&gt;（译者注：Apollo 这一段我们可以不太关注，它主要是讲 USE 方法，与阿波罗登月计划相关的系统设计的一些渊源）&lt;/p&gt;
&lt;p&gt;我之前有提到过，USE 方法可以被应用到除服务器之外。为了找到一个有趣的例子，
我想到了一个我没有完全不了解的系统，并且不知道从哪里开始：阿波罗月球模块指导系统。
USE 方法提供了一个简单的流程来尝试第一步是寻找一个资源列表，或者更理想的话，找到一个功能模块图表。我在
【Lunar Module - LM10 Through LM14 Familiarization Manual】中发现了以下内容：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://image.voidcn.com/proxy?url=https://mmbiz.qpic.cn/mmbiz_png/pibXop4Ees9ogIVrptf2J3flJzBVxonqzaGUONHPH5Ko6Fw8MianuSriaibppiaD7FeJNx3oZzzpyBYKCWuvcRUg8nA/0"/&gt;&lt;/p&gt;
&lt;p&gt;这些组件中的一部分可能未表现出利用率或饱和度特性。在迭代后，
就可以重新绘制只包含相关组件的图表（还可以包括："可擦除存储"部分的内存，"核心区域"和 "vac区域 "寄存器）。&lt;/p&gt;
&lt;p&gt;我将从阿波罗主脑（AGC）本身开始。
对于每个指标，我浏览了各种 LM 文档，看看哪些是合理的（有意义的）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AGC utilization： This could be defined as the number of CPU cycles
    doing jobs (not the "DUMMY JOB") divided by the clock rate (2.048
    MHz). This metric appears to have been well understood at the time.&lt;/li&gt;
&lt;li&gt;AGC saturation： This could be defined as the number of jobs in the
    "core set area", which are seven sets of registers to store
    program state. These allow a job to be suspended (by the
    "EXECUTIVE" program - what we\'d call a "kernel" these days) if
    an interrupt for a higher priority job arrives. Once exhausted, this
    moves from a saturation state to an error state, and the AGC reports
    a 1202 "EXECUTIVE OVERFLOW-NO CORE SETS" alarm.&lt;/li&gt;
&lt;li&gt;AGC errors： Many alarms are defined. Apart from 1202, there is also
    a 1203 alarm "WAITLIST OVERFLOW-TOO MANY TASKS", which is a
    performance issue of a different type： too many timed tasks are
    being processed before returning to normal job scheduling. As with
    1202, it could be useful to define a saturation metric that was the
    length of the WAITLIST, so that saturation can be measured before
    the overflow and error occurs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中的一些细节，可能对于太空爱好者来说是非常熟悉的：在阿波罗 11 号降落的时候发生的著名的
1201（"NO VAC AREAS"）和 1202 警报。（"VAC"是向量加速器的缩写，
用于处理 vector quantities 作业的额外存储； 我觉得 wikipadia 上将 "向量"描述为"空"可能是错误的）。&lt;/p&gt;
&lt;p&gt;鉴于阿波罗 11 号的 1201 警报，可以继续使用其他方法分析，如工作负载表征。
工作负载很多可以在功能图中看到，大多数工作负载是通过中断来生效的。
包括用于跟踪命令模块的会合雷达，即使 LM 正在下降，该模块也仍然在执行中断 AGC（阿波罗主脑）的任务。
这是发现非必要工作的一个例子（或低优先级的工作;
雷达的一些更新可能是可取的，因此 LM AGC可以立即计算出中止路径）。&lt;/p&gt;
&lt;p&gt;作为一个更深的例子，我将把会合雷达当作资源去检查. 错误最容易识别。
有三种信号类型： "DATA NO GOOD", "NO TRACK", and "SHAFT- AND TRUNNION-AXIS ERROR"。&lt;/p&gt;
&lt;p&gt;在有某一小段时间里，我不知道能从哪里开始使用这个方法,
去寻找和研究具体的指标。&lt;/p&gt;
&lt;h2 id="other-methodologies"&gt;Other Methodologies&lt;/h2&gt;
&lt;p&gt;虽然 USE 方法可能会发现 80％ 的服务器问题，但基于延迟的方法（例如Method R）可以找到所有的问题。
不过，如果你不熟悉软件内部结构，Method R 就有可能需要花费更多时间。
它们可能更适合已经熟悉它的数据库管理员或应用程序开发人员。&lt;/p&gt;
&lt;p&gt;而 USE 方法的职责和专长包括操作系统（OS）和硬件，它更适合初级或高级系统管理员，当需要快速检查系统健康时，也可以由其他人员使用。&lt;/p&gt;
&lt;h2 id="tools-method"&gt;Tools Method&lt;/h2&gt;
&lt;p&gt;以下介绍一个基于工具的方法流程（我称它作"工具方法"），与 USE 方法作比较：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;列出可用的性能工具（可以选择性安装或购买其他的）。&lt;/li&gt;
&lt;li&gt;列出每个工具提供的有用的指标&lt;/li&gt;
&lt;li&gt;列出每个工具可能的解释规则&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;按照这个方法做完后，将得到一个符合标准的清单，它告诉我们要运行的工具，要关注的指标以及如何解释它们。
虽然这相当有效，但有一个问题，它完全依赖于可用（或已知的）的，可以提供系统的不完整视图的工具。
用户也不知道他们得到的是一张不完整的视图 - 所以问题将仍然存在。&lt;/p&gt;
&lt;p&gt;而如果使用 USE 方法，不同的是， USE 方法将通过迭代系统资源的方式，来创建一个完整的待确认问题列表，然后搜索工具来回答这些问题。这样构建了一张更完整的视图，未知的部分被记录下来，它们的存在被感知（这一句我理解成前文中提到的：未知
的未知变为已知的未知）。
基于 USE ，同样可以开发一个清单类似于工具方法(Tool-Method)，显示要运行的工具（可用的位置），要关注的指标以及如何解释它。&lt;/p&gt;
&lt;p&gt;另一个问题是，工具方法在遍历大量的工具时，将会使寻找瓶颈的任务性能得到分散。而 USE 方法提供了一种策略，即使是超多的可用工具和指标，也能有效地查找瓶颈和错误。&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;USE 方法是一个简单的，能执行完整的系统健康检查的策略，它可以识别常见的系统瓶颈和错误。它可以在调查的早期部署并快速定位问题范围，如果需要的话，还可以进一步通过其他方法进行更详细的研究。&lt;/p&gt;
&lt;p&gt;我在这个篇幅上，解释了 USE 方法并且提供了通用的指标案例，请参阅左侧导航面板中对应操作系统的示例清单，
其建议了应用 USE 方法的工具和指标。另请参阅基于线程的补充方法，TSA Method。&lt;/p&gt;
&lt;h2 id="acknowledgments"&gt;Acknowledgments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;感谢 Cary Millsap and Jeff Holt (2003)
    在"优化Oracle性能"一文中提到的 Method R 方法 (以及其他方法),
    使我有了灵感，我应该要把这个方法论写出来。&lt;/li&gt;
&lt;li&gt;感谢 Sun Microsystems 的组织，包括 PAE 和 ISV，
    他们将 USE 方法（那时还没命名）应用于他们的存储设备系列，绘制了标注指标和总线速度的 ASCII 功能块图表 -
    这些都比您想象的要困难（我们应该早些时候询问硬件团队的帮助）。&lt;/li&gt;
&lt;li&gt;感谢我的学生们，多年前我授予他们这个方法论，谢谢他们提供给我的使用反馈。&lt;/li&gt;
&lt;li&gt;感谢 Virtual AGC 项目组（The Virtual
    AGC project），读他们的站点 ibiblio.org 上的文档库，就象是一种娱乐.
    尤其是 LMA790-2 "Lunar Module LM-10 Through LM-14 Vehicle
    Familiarization Manual" ( 48 页有功能模块图表), 以及
    "阿波罗指导和月球导航模块入门学习指南",
    都很好的解释了执行程序和它的流程图 (These docs are 109 and 9 Mbytes in size.)&lt;/li&gt;
&lt;li&gt;感谢 Deirdr&amp;eacute; Straughan 编辑和提供反馈，这提高了我的认知。&lt;/li&gt;
&lt;li&gt;文章顶部的图片，是来自于波音 707 手册，1969 出版。它不是完整的，点击查看完整的版本（译注：为方便阅读，就是下面这张：）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="201711/apollo_LM_guidance.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201711/apollo_LM_guidance.png"/&gt;&lt;/p&gt;
&lt;h2 id="updates"&gt;Updates&lt;/h2&gt;
&lt;p&gt;USE Method updates：（略）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It was published in ACMQ as Thinking Methodically about
    Performance (2012).&lt;/li&gt;
&lt;li&gt;It was also published in Communications of the ACM as Thinking
    Methodically about Performance (2013).&lt;/li&gt;
&lt;li&gt;I presented it in the FISL13 talk The USE Method (2012).&lt;/li&gt;
&lt;li&gt;I spoke about it at Oaktable World 2012： video, PDF.&lt;/li&gt;
&lt;li&gt;I included it in the USENIX LISA `12 talk Performance Analysis
    Methodology.&lt;/li&gt;
&lt;li&gt;It is covered in my book on Systems Performance, published by
    Prentice Hall (2013).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More updates (Apr 2014)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LuceraHQ are implementing USE Method metrics on SmartOS
    for performance monitoring of their high performance financial
    cloud.&lt;/li&gt;
&lt;li&gt;LuceraHQ 正在 SmartOS 上，为他们高性能金融云的性能监测，实施 USE 方法指标&lt;/li&gt;
&lt;li&gt;I spoke about the USE Method for OS X at MacIT 2014 (slides)。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/11/use-method/"&gt;https://blog.alswl.com/2017/11/use-method/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">小莞</dc:creator><pubDate>Sun, 12 Nov 2017 15:30:12 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2017-11-12:2017/11/use-method/</guid><category>Metrics</category><category>Brendan Gregg</category><category>译文</category></item><item><title>Stack Overflow 的 HTTPS 化：漫漫长路的终点</title><link>https://blog.alswl.com/2017/09/https-on-stack-overflow/</link><description>&lt;p&gt;&lt;img alt="Stack Overflow" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/stack-overflow.jpg"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原文作者：Nick Craver&lt;/li&gt;
&lt;li&gt;翻译作者：&lt;a href="https://twitter.com/luosheng"&gt;罗晟 @luosheng&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/alswl"&gt;狄敬超 @alswl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文地址：&lt;a href="https://nickcraver.com/blog/2017/05/22/https-on-stack-overflow/"&gt;Nick Craver - HTTPS on Stack Overflow: The End of a Long Road&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本文为原创翻译文章，已经获得原作者授权，转载请注明作者及出处。&lt;/li&gt;
&lt;li&gt;本文首发在「沪江技术学院」公众号&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;今天，我们默认在&amp;nbsp;&lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt;&amp;nbsp;上部署了 HTTPS。目前所有的流量都将跳转到&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;上。与此同时，Google 链接也会在接下去的几周内更改。启用的过程本身只是举手之劳，但在此之前我们却花了好几年的时间。到目前为止，HTTPS 在我们所有的 Q&amp;amp;A 网站上都默认启用了。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://meta.stackoverflow.com/q/345012/13249"&gt;在过去的两个月里&lt;/a&gt;，我们在 Stack Exchange 全网维持发布 HTTPS。Stack Overflow 是最后，也是迄今最大的的一个站点。这对我们来说是一个巨大里程碑，但决不意味着是终点。&lt;a href="#next-steps"&gt;后文会提到&lt;/a&gt;，我们仍有很多需要做的事情。但现在我们总算能看得见终点了，耶！&lt;/p&gt;
&lt;p&gt;友情提示：这篇文章讲述的是一个漫长的旅程。非常漫长。你可能已经注意到你的滚动条现在非常小。我们遇到的问题并不是只在 Stack Exchange/Overflow 才有，但这些问题的组合还挺罕见。我在文章中会讲到我们的一些尝试、折腾、错误、成功，也会包括一些开源项目&amp;mdash;&amp;mdash;希望这些细节对你们有所帮助。由于它们的关系错综复杂，我难以用时间顺序来组织这篇文章，所以我会将文章拆解成架构、应用层、错误等几个主题。&lt;/p&gt;

&lt;p&gt;首先，我们要提一下为什么我们的处境相对独特：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们有几百个域名（&lt;a href="https://stackexchange.com/sites"&gt;大量站点&lt;/a&gt;及服务）&lt;ul&gt;
&lt;li&gt;大量二级域名（&lt;a href="https://stackoverflow.com/"&gt;stackoverflow.com&lt;/a&gt;、&lt;a href="https://stackexchange.com/"&gt;stackexchange.com&lt;/a&gt;、&lt;a href="https://askubuntu.com/"&gt;askubuntu.com&lt;/a&gt;等）&lt;/li&gt;
&lt;li&gt;大量四级域名（如&amp;nbsp;&lt;a href="http://meta.gaming.stackexchange.com/"&gt;meta.gaming.stackexchange.com&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我们允许用户提交、嵌入内容（比如帖子中的图片和 YouTube 视频）&lt;/li&gt;
&lt;li&gt;我们仅有一个数据中心（造成单源的延时）&lt;/li&gt;
&lt;li&gt;我们有广告（及广告网络）&lt;/li&gt;
&lt;li&gt;我们用 websockets，任何时刻的活跃数都不少于 50 万个（连接数问题）&lt;/li&gt;
&lt;li&gt;我们会被 DDoSed 攻击（代理问题）&lt;/li&gt;
&lt;li&gt;我们有不少站点及应用还是通过 HTTP API 通信的（代理问题）&lt;/li&gt;
&lt;li&gt;我们热衷于性能（&lt;em&gt;好像&lt;/em&gt;有点太过了）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这篇文章实在太长，我在这里先列出链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-beginning"&gt;开篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quick-specs"&gt;懒人包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基础设施&lt;ul&gt;
&lt;li&gt;&lt;a href="#certificates"&gt;证书&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#certificates-child-metas-metastackexchangecom"&gt;Meta 子域（meta.*.stackexcange.com）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#performance-http2"&gt;性能：HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#haproxy-serving-up-https"&gt;HAProxy：支持 HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cdnproxy-countering-latency-with-cloudflare--fastly"&gt;CDN/代理层：通过 Cloudflar 和 Fastly 优化延迟&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#preparing-for-a-proxy-client-timings"&gt;优化代理层的准备：客户端性能测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cloudflare"&gt;CloudFlare&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#cloudflare-railgun"&gt;Railgun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#fastly"&gt;Fastly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#global-dns"&gt;全局 DNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用层/代码&lt;ul&gt;
&lt;li&gt;&lt;a href="#preparing-the-applications"&gt;应用层准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#global-login"&gt;全局登录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-https-development"&gt;本地 HTTPS 开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;混合内容&lt;ul&gt;
&lt;li&gt;&lt;a href="#mixed-content-from-you"&gt;来自你们&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mixed-content-from-us"&gt;来自我们&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#redirects-301s"&gt;跳转（301）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#websockets"&gt;Websockets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#unknowns"&gt;未知&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mistakes"&gt;错误&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#mistakes-protocol-relative-urls"&gt;相对协议 URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mistakes-apis-and-internal"&gt;API 及 .internal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mistakes-301-caching"&gt;301 缓存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mistakes-help-center-snafu"&gt;帮助中心的小插曲&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#open-source"&gt;开源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;下一步&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#hsts-preloading"&gt;HSTS 预加载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chat"&gt;聊天&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#today"&gt;今天&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="kai-pian"&gt;开篇&lt;/h3&gt;
&lt;p&gt;我们&lt;a href="https://nickcraver.com/blog/2013/04/23/stackoverflow-com-the-road-to-ssl/"&gt;早在 2013&lt;/a&gt;&amp;nbsp;年就开始考虑在 Stack Overflow 上部署 HTTPS 了。是的，现在是 2017 年。所以，&lt;strong&gt;究竟是什么拖了我们四年？&lt;/strong&gt;这个问题的答案放在任何一个 IT 项目上都适用：依赖和优先级。老实说，Stack Overflow 在信息安全性上的要求并不像别家那么高。我们不是银行，也不是医院，我们也不涉及信用卡支付，&lt;a href="https://archive.org/details/stackexchange"&gt;甚至于我们每个季度都会通过 HTTP 和 BT 种子的方式发布我们大部分的数据库&lt;/a&gt;。这意味着，从安全的角度来看，这件事情的紧急程度不像它在其他领域里那么高。而从依赖上来说，我们的复杂度比别人要高，在部署 HTTPS 时会在几大领域里踩坑，这些问题的组合是比较特殊的。后文中会看到，有一些域名的问题还是一直存在的。&lt;/p&gt;
&lt;p&gt;容易踩坑的几个领域包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户内容（用户可以上传图片或者指定 URL）&lt;/li&gt;
&lt;li&gt;广告网络（合同及支持）&lt;/li&gt;
&lt;li&gt;单数据中心托管（延迟）&lt;/li&gt;
&lt;li&gt;不同层级下的&lt;a href="https://stackexchange.com/sites"&gt;&lt;strong&gt;几百个&lt;/strong&gt;域名&lt;/a&gt;（证书）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那我们究竟是为什么需要 HTTPS 呢？因为数据并不是唯一需要安全性的东西。我们的用户中有操作员、开发者、还有各个级别的公司员工。我们希望他们到我们站点的通信是安全的。我们希望每一个用户的浏览历史是安全的。某些用户暗地里喜欢 monad 却又害怕被人发现。同时，Google 会&lt;a href="https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html"&gt;提升 HTTPS 站点的搜索排名&lt;/a&gt;（虽然我们不知道能提升多少）。&lt;/p&gt;
&lt;p&gt;哦，还有&lt;strong&gt;性能&lt;/strong&gt;。我们热爱性能。我热爱性能。你热爱性能。我的狗热爱性能。让我给你一个性能的拥抱。很好。谢谢。你闻起来很香。&lt;/p&gt;
&lt;h3 id="lan-ren-bao"&gt;懒人包&lt;/h3&gt;
&lt;p&gt;很多人喜欢情人包，所以我们来一场快速问答（我们喜欢问答！）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问：你们支持什么协议？&lt;ul&gt;
&lt;li&gt;答：TLS 1.0、1.1、1.2（注意：&lt;a href="https://www.fastly.com/blog/phase-two-our-tls-10-and-11-deprecation-plan"&gt;Fastly 准备放弃 TLS 1.0 和 1.1&lt;/a&gt;)。我们马上也会支持 TLS 1.3。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：你们支持 SSL v2 或者 v3 吗？&lt;ul&gt;
&lt;li&gt;答：不支持。&lt;a href="http://disablessl3.com/"&gt;这些协议不安全&lt;/a&gt;。大家都应该尽早禁用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：你们支持哪些加密套件？&lt;ul&gt;
&lt;li&gt;答：CDN 上，我们用的是&amp;nbsp;&lt;a href="https://www.ssllabs.com/ssltest/analyze.html?d=meta.stackexchange.com&amp;amp;s=151.101.129.69#suitesHeading"&gt;Fastly 的默认套件&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;答：我们自己的负载均衡器上用的是&amp;nbsp;&lt;a href="https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility"&gt;Mozilla 的现代兼容性套件&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：Fastly 回源走的是 HTTPS 吗？&lt;ul&gt;
&lt;li&gt;答：是。如果到 CDN 的请求是 HTTPS，回源的请求也是 HTTPS。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：你们支持前向安全性吗？&lt;ul&gt;
&lt;li&gt;答：是。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：你们支持&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HSTS&lt;/a&gt;&amp;nbsp;吗？&lt;ul&gt;
&lt;li&gt;答：支持。我们正在 Q&amp;amp;A 站点中逐步支持。一旦完成的话我们就会将其移至节点上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：你们支持 HPKP 吗？&lt;ul&gt;
&lt;li&gt;答：不支持，应该也不会支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：你们支持 SNI 吗？&lt;ul&gt;
&lt;li&gt;答：不支持。出于 HTTP/2 性能考虑，我们使用是一个合并的通配符证书（详见后文）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：你们的证书是哪来的？&lt;ul&gt;
&lt;li&gt;答：我们用的是&amp;nbsp;&lt;a href="https://www.digicert.com/"&gt;DigiCert&lt;/a&gt;，他们很棒。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：你们支持 IE 6 吗？&lt;ul&gt;
&lt;li&gt;答：这次之后终于不再支持了。IE 6 默认不支持 TLS（尽管你可以启用 1.0 的支持），而我们则不支持 SSL。当我们 301 跳转就绪的时候大部分 IE 6 用户就不能访问 Stack Overflow 了。一旦我们弃用 TLS 1.0，所有 IE 6 用户都不行了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：你们负载均衡器用的什么？&lt;ul&gt;
&lt;li&gt;答：&lt;a href="https://www.haproxy.org/"&gt;HAProxy&lt;/a&gt;（内部使用的是&amp;nbsp;&lt;a href="https://www.openssl.org/"&gt;OpenSSL&lt;/a&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问：使用 HTTPS 的动机是什么？&lt;ul&gt;
&lt;li&gt;答：有人一直攻击我们的管员员路由，如&amp;nbsp;&lt;a href="https://stackoverflow.com/admin.php"&gt;stackoverflow.com/admin.php&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="zheng-shu"&gt;证书&lt;/h3&gt;
&lt;p&gt;让我们先聊聊证书，因为这是最容易被误解的部分。不少朋友跟我说，他安装了 HTTPS 证书，因此他们已经完成 HTTPS 准备了。呵呵，麻烦你看一眼右侧那个小小的滚动条，这篇文章才刚刚开始，你觉得真的这么简单么？&lt;a href="https://en.wikipedia.org/wiki/Scientific_wild-ass_guess"&gt;我有这个必要告诉你们一点人生的经验&lt;/a&gt;&amp;nbsp;：没这么容易的。&lt;/p&gt;
&lt;p&gt;一个最常见的问题是：「为何不直接用&amp;nbsp;&lt;a href="https://letsencrypt.org/"&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;？」&lt;/p&gt;
&lt;p&gt;答案是：这个方案不适合我们。 Let&amp;rsquo;s Encrypt 的确是一个伟大的产品，我希望他们能够长期服务于大家。当你只有一个或少数几个域名时，它是非常出色的选择。但是很可惜，我们 Stack Exchange 有&lt;a href="https://stackexchange.com/sites"&gt;数百个站点&lt;/a&gt;，而 Let&amp;rsquo;s Encrypt 并&lt;a href="https://letsencrypt.org/docs/faq/"&gt;不支持通配域名配置&lt;/a&gt;。这导致 Let&amp;rsquo;s Encrypt 无法满足我们的需求。要这么做，我们就不得不在每上一个新的 Q&amp;amp;A 站点的时候都部署一个（或两个）证书。这样会增加我们部署的复杂性，并且我们要么放弃不支持 SNI 的客户端（大约占 2% 的流量）要么提供超多的 IP&amp;mdash;&amp;mdash;而我们目前没这么多的 IP。&lt;/p&gt;
&lt;p&gt;我们之所以想控制证书，还有另外一个原因是我们想在本地负载均衡器以及 CDN / 代理提供商那边使用完成相同的证书。如果不做到这个，我们无法顺畅地做从代理那里做失效备援（failover）。支持&amp;nbsp;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning"&gt;HTTP 公钥固定（HPKP）&lt;/a&gt;的客户端会报认证失败。虽然我们仍在评估是否使用 HPKP，但是如果有一天要用的话我们得提前做好准备。&lt;/p&gt;
&lt;p&gt;很多朋友在看见我们的主证书时候会吓得目瞪口呆，因为它包含了我们的主域名和通配符子域名。它看上去长成这样：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-MainCertificate.png"&gt;&lt;img alt="Main Certificate" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-MainCertificate.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么这么做？老实说，是我们让&amp;nbsp;&lt;a href="https://www.digicert.com/"&gt;DigiCert&lt;/a&gt;&amp;nbsp;替我们做的。这么做会导致每次发生变化的时候都需要手动合并证书，了　我们为什么要忍受这么麻烦的事呢？首先，我们期望能够尽可能让更多用户使用我们产品。这里面包括了那些还不支持 SNI 的用户（比如在我们项目启动的时候 Android 2.3 势头正猛）。另外，也包括 HTTP/2 与一些现实问题&amp;mdash;&amp;mdash;我们过会儿会谈到这一块。&lt;/p&gt;
&lt;p&gt;Meta 子域（meta.*.&lt;a href="http://stackexcange.com/"&gt;stackexcange.com&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;Stack Exchage 的一个设计理念是，针对每个 Q&amp;amp;A 站点，我们都有一个地方供讨论。我们称之为&amp;nbsp;&lt;a href="https://stackoverflow.blog/2010/04/29/do-trilogy-sites-need-a-third-place/"&gt;&amp;ldquo;second place&amp;rdquo;&lt;/a&gt;。比如&amp;nbsp;&lt;code&gt;meta.gaming.stackexchange.com&lt;/code&gt;&amp;nbsp;用来讨论&amp;nbsp;&lt;code&gt;gaming.stackexchange.com&lt;/code&gt;。这个有什么特别之处呢？好吧，并没有，除了域名：这是一个 4 级域名。&lt;/p&gt;
&lt;p&gt;我之前已经说过&lt;a href="https://nickcraver.com/blog/2013/04/23/stackoverflow-com-the-road-to-ssl/"&gt;这个问题&lt;/a&gt;，但后来怎么样了呢？具体来说，现在面临的问题是&amp;nbsp;&lt;code&gt;*.stackexchange.com&lt;/code&gt;&amp;nbsp;包含&amp;nbsp;&lt;code&gt;gaming.stackexchange.com&lt;/code&gt;（及几百个其它站点），但它&lt;strong&gt;并不包含&lt;/strong&gt;&amp;nbsp;&lt;code&gt;meta.gaming.stackexchange.com&lt;/code&gt;。&lt;a href="https://tools.ietf.org/html/rfc6125#section-6.4.3"&gt;RFC 6125 （第 6.4.3 节）&lt;/a&gt;&amp;nbsp;写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;客户端&amp;nbsp;&lt;strong&gt;不应该&lt;/strong&gt;&amp;nbsp;尝试匹配一个通配符在中间的域名（比如，不要匹配&amp;nbsp;&lt;code&gt;bar.*.example.net&lt;/code&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这意味着我们无法使用&amp;nbsp;&lt;code&gt;meta.*.stackexchange.com&lt;/code&gt;，那怎么办呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方案一：部署&amp;nbsp;&lt;a href="https://www.digicert.com/subject-alternative-name.htm"&gt;SAN 证书（多域名证书）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;我们需要准备 3 个证书和 3 个 IP（每张证书支持域名上限是 100），并且会把新站上线复杂化（虽然这个机制已经改了）&lt;/li&gt;
&lt;li&gt;我们要在 CDN/代理层上部署三个自定义证书&lt;/li&gt;
&lt;li&gt;我们要给&amp;nbsp;&lt;code&gt;meta.*&lt;/code&gt;&amp;nbsp;这种形式的域名配置额外的 DNS 词条&lt;ul&gt;
&lt;li&gt;根据 DNS 规则，我们必须给每个这样的站点配置一条 DNS，无法批量配置，从而提高了新站上线和维护代理的成本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方案二：将所有域名迁移到&amp;nbsp;&lt;code&gt;*.meta.stackexchange.com&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;我们会有一次痛苦的迁移过程，但这是一次性的，并且未来维护证书成本较低&lt;/li&gt;
&lt;li&gt;我们需要部署一个全局登录系统（&lt;a href="#global-login"&gt;详情见此&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;这个方案仍然不解决 HSTS 预加载下面的&amp;nbsp;&lt;code&gt;includeSubDomains&lt;/code&gt;&amp;nbsp;问题（&lt;a href="#hsts-reloading"&gt;详情见此&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方案三：啥都不做，放弃&lt;ul&gt;
&lt;li&gt;这个方案最简单，然而这是假方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们部署了&amp;nbsp;&lt;a href="#global-login"&gt;全局登录系统&lt;/a&gt;，然后将子 meta 域名用 301 重定向到新地址，比如&amp;nbsp;&lt;a href="https://gaming.meta.stackexchange.com"&gt;gaming.meta.stackexchange.com&lt;/a&gt;。做完这个之后我们才意识到，因为这些域名&lt;em&gt;曾经&lt;/em&gt;存在过，所以对于&amp;nbsp;HSTS 预加载来说是个很大的问题。这件事情还在进行中，我会在&lt;a href="#hsts-preloading"&gt;文章最后面&lt;/a&gt;讨论这个问题。这类问题对于&amp;nbsp;&lt;code&gt;meta.pt.stackoverflow.com&lt;/code&gt;&amp;nbsp;等站点也存在，不过还好我们只有四个非英语版本的 Stack Overflow，所以问题没有被扩大。&lt;/p&gt;
&lt;p&gt;对了，这个方案本身还存在&lt;em&gt;另一个&lt;/em&gt;问题。由于将 cookies 移动到顶级目录，然后依赖于子域名对其的继承，我们必须调整一些其他域名。比如，在我们新系统中，我们使用 SendGrid 来发送邮件（进行中）。我们从&amp;nbsp;&lt;code&gt;stackoverflow.email&lt;/code&gt;&amp;nbsp;这个域名发邮件，邮件内容里的链接域名是&amp;nbsp;&lt;code&gt;sg-links.stackoverflow.email&lt;/code&gt;（使用&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/CNAME_record"&gt;CNAME&lt;/a&gt;&amp;nbsp;管理)，这样你的浏览器就不会将敏感的 cookie 发出去。如果这个域名是&amp;nbsp;&lt;code&gt;links.stackoverflow.com&lt;/code&gt;，那么你的浏览器会将你在这个域名下的 cookie 发送出去。 我们有不少虽然使用我们的域名，但并不属于我们自己的服务。这些子域名都需要从我们受信的域名下移走，否则我们就会把你们的 cookie 发给非我们自有的服务器上。如果因为这种错误而导致 cookie 数据泄露，这将是件很丢人的事情。&lt;/p&gt;
&lt;p&gt;我们有试过通过代理的方式来访问我们的 Hubspot CRM 网站，在传输过程中可以将 cookies 移除掉。但是很不幸 Hubspot 使用&amp;nbsp;&lt;a href="https://www.akamai.com/"&gt;Akamai&lt;/a&gt;，它会判定我们的 HAProxy 实例是机器人，并将其封掉。头三次的时候还挺有意思的&amp;hellip;&amp;hellip;当然这也说明这个方式真的不管用。我们后来再也没试过了。&lt;/p&gt;
&lt;p&gt;你是否好奇为什么 Stack Overflow 的博客地址是&amp;nbsp;&amp;nbsp;&lt;a href="https://stackoverflow.blog/"&gt;https://stackoverflow.blog/&lt;/a&gt;？没错，这也是出于安全目的。我们把博客搭在一个外部服务上，这样市场部门和其他团队能够更便利地使用。正因为这样，我们不能把它放在有 cookie 的域名下面。&lt;/p&gt;
&lt;p&gt;上面的方案会牵涉到子域名，引出&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HSTS&lt;/a&gt;&amp;nbsp;&lt;a href="https://hstspreload.org/"&gt;预加载&lt;/a&gt;&amp;nbsp;和&amp;nbsp;&lt;code&gt;includeSubDomains&lt;/code&gt;&amp;nbsp;命令问题，我们一会来谈这块内容。&lt;/p&gt;
&lt;h3 id="xing-neng-http2"&gt;性能：HTTP/2&lt;/h3&gt;
&lt;p&gt;很久之前，大家都认为 HTTPS 更慢。在那时候也确实是这样。但是时代在变化，我们说 HTTPS 的时候不再是单纯的 HTTPS，而是基于 HTTPS 的 HTTP/2。虽然&amp;nbsp;&lt;a href="https://http2.github.io/faq/#does-http2-require-encryption"&gt;HTTP/2 不要求加密&lt;/a&gt;，但&lt;em&gt;事实上&lt;/em&gt;却是加密的。主流浏览器都要求 HTTP/2 提供加密连接来启用其大部分特性。你可以来说 spec 或者规定上不是这么说的，但浏览器才是你要面对的现实。我诚挚地期望这个协议直接改名叫做 HTTPS/2，这样也能给大家省点时间。各浏览器厂商，你们听见了吗？&lt;/p&gt;
&lt;p&gt;HTTP/2 有很多功能上的增强，特别是在用户请求之前可以主动推送资源这点。这里我就不展开了，&lt;a href="https://hpbn.co/http2/"&gt;Ilya Grigorik 已经写了一篇非常不错的文章&lt;/a&gt;。我这里简单罗列一下主要优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hpbn.co/http2/#request-and-response-multiplexing"&gt;请求/响应多路复用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hpbn.co/http2/#server-push"&gt;服务端推送&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hpbn.co/http2/#header-compression"&gt;Header 压缩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hpbn.co/http2/#stream-prioritization"&gt;网络流优先级&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hpbn.co/http2/#one-connection-per-origin"&gt;更少的连接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;咦？怎么没提到证书呢？&lt;/p&gt;
&lt;p&gt;一个很少人知道的特性是，&lt;a href="https://hpbn.co/optimizing-application-delivery/#eliminate-domain-sharding"&gt;你可以推送内容到不同的域名&lt;/a&gt;，只要满足以下的条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这两个域名需要解析到同一个 IP 上&lt;/li&gt;
&lt;li&gt;这两个域名需要使用同一张 TLS 证书（看到没！）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我们看一下我们当前 DNS 配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lambda; dig stackoverflow.com +noall +answer
; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.2-P3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; stackoverflow.com +noall +answer
;; global options: +cmd
stackoverflow.com.      201     IN      A       151.101.1.69
stackoverflow.com.      201     IN      A       151.101.65.69
stackoverflow.com.      201     IN      A       151.101.129.69
stackoverflow.com.      201     IN      A       151.101.193.69

&amp;lambda; dig cdn.sstatic.net +noall +answer
; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.2-P3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; cdn.sstatic.net +noall +answer
;; global options: +cmd
cdn.sstatic.net.        724     IN      A       151.101.193.69
cdn.sstatic.net.        724     IN      A       151.101.1.69
cdn.sstatic.net.        724     IN      A       151.101.65.69
cdn.sstatic.net.        724     IN      A       151.101.129.69
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;嘿，这些 IP 都是一致的，并且他们也拥有相同的证书！这意味着你可以直接使用 HTTP/2 的服务器推送功能，而无需影响 HTTP/1.1 用户。 HTTP/2 有推送的同时，HTTP/1.1 也有了&lt;a href="https://blog.stackpath.com/glossary/domain-sharding/"&gt;域名共享&lt;/a&gt;（通过&amp;nbsp;&lt;code&gt;sstatic.net&lt;/code&gt;）。我们暂未部署服务器推送功能，但一切都尽在掌握之中。&lt;/p&gt;
&lt;p&gt;HTTPS 是我们实现性能目标的一个手段。可以这么说，我们的主要目标是性能，而非站点安全性。我们想要安全性，但光是安全性不足以让我们花那么多精力来在全网部署 HTTPS。当我们把所有因素都考虑在一起的时候，我们可以评估出要完成这件事情需要付出的巨大的时间和精力。在 2013 年，HTTP/2 还没有扮演那么重要的角色。而现在形势变了，对其的支持也多了，最终这成为了我们花时间调研 HTTPS 的催化剂。&lt;/p&gt;
&lt;p&gt;值得注意的是 HTTP/2 标准在我们项目进展时还在持续发生变化。它从&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/SPDY"&gt;SPDY&lt;/a&gt;&amp;nbsp;演化为&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/HTTP/2"&gt;HTTP/2&lt;/a&gt;，从&amp;nbsp;&lt;a href="https://tools.ietf.org/id/draft-agl-tls-nextprotoneg-03.html"&gt;NPN&lt;/a&gt;&amp;nbsp;演化为&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation"&gt;ALPN&lt;/a&gt;。我们这里不会过多涉及到这部分细节，因为我们并没有为其做太多贡献。我们观望并从中获准，但整个互联网却在推进其向前发展。如果你感兴趣，可以看看&amp;nbsp;&lt;a href="https://blog.cloudflare.com/introducing-http2/"&gt;Cloudflare 是怎么讲述其演变的&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="haproxyzhi-chi-https"&gt;HAProxy：支持 HTTPS&lt;/h3&gt;
&lt;p&gt;我们最早在 2013 年开始在 HAProxy 中使用 HTTPS。为什么是&amp;nbsp;&lt;a href="https://www.haproxy.org/"&gt;HAProxy&lt;/a&gt;&amp;nbsp;呢？这是历史原因，我们已经在使用它了，而它在 2013 年 的&amp;nbsp;&lt;a href="https://www.haproxy.org/news.html"&gt;1.5 开发版&lt;/a&gt;中支持了 HTTPS，并在 2014 年发布了正式版。曾经有段时间，我们把 Nginx 放置在 HAProxy 之前（&lt;a href="https://nickcraver.com/blog/2013/04/23/stackoverflow-com-the-road-to-ssl/"&gt;详情看这里&lt;/a&gt;）。但是简单些总是更好，我们总是想着要避免在链路、部署和其他问题上的复杂问题。&lt;/p&gt;
&lt;p&gt;我不会探讨太多细节，因为也没什么好说的。HAProxy 在 1.5 之后使用 OpenSSL 支持 HTTPS，配置文件也是清晰易懂的。我们的配置方式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跑在 4 个进程上&lt;ul&gt;
&lt;li&gt;1 个用来做 HTTP/前端处理&lt;/li&gt;
&lt;li&gt;2-4 个用来处理 HTTPS 通讯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTPS 前端使用&amp;nbsp;&lt;a href="https://unix.stackexchange.com/a/206395/400"&gt;socket 抽象命名空间&lt;/a&gt;来连接至 HTTP 后端，这样可以极大减少资源消耗&lt;/li&gt;
&lt;li&gt;每一个前端或者每一「层」都监听了 :433 端口（我们有主、二级、websockets 及开发环境）&lt;/li&gt;
&lt;li&gt;当请求进来的时候，我们在请求头上加入一些数据（也会移除掉一些你们发送过来的），再将其转发给 web 层&lt;/li&gt;
&lt;li&gt;我们使用&amp;nbsp;&amp;nbsp;&lt;a href="https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility"&gt;Mozilla 提供的加密套件&lt;/a&gt;。注意，这和我们 CDN 用的不是同样的套件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HAProxy 比较简单，这是我们使用一个 SSL 证书来支持 :433 端口的第一步。事后看来，这也只是一小步。&lt;/p&gt;
&lt;p&gt;这里是上面描述情况下的架构图，我们马上来说前面的那块云是怎么回事：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-Layout.svg"&gt;&lt;img alt="Logical Architecture" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-Layout.svg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="cdndai-li-ceng-tong-guo-cloudflare-he-fastly-you-hua-yan-chi"&gt;CDN/代理层：通过 Cloudflare 和 Fastly 优化延迟&lt;/h3&gt;
&lt;p&gt;我对 Stack Overflow&amp;nbsp;&lt;a href="https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/"&gt;架构&lt;/a&gt;&lt;a href="https://stackexchange.com/performance"&gt;的效率&lt;/a&gt;一直很自豪。我们很厉害吧？仅用一个数据中心和几个服务器就撑起了一个大型网站。不过这次不一样了。尽管效率这件事情很好，但是在延迟上就成了个问题。我们不需要那么多服务器，我们也不需要多地扩展（不过我们有一个灾备节点）。这一次，这就成为了问题。由于光速，我们（暂时）无法解决延迟这个基础性问题。我们听说有人已经在处理这个问题了，不过他们造的时间机器好像有点问题。&lt;/p&gt;
&lt;p&gt;让我们用数字来理解延迟。赤道长度是 40000 公里（光绕地球一圈的最坏情况）。&lt;a href="https://en.wikipedia.org/wiki/Speed_of_light"&gt;光速&lt;/a&gt;在真空中是 299,792,458 米/秒。很多人用这个数字，但光纤并不是真空的。实际上光纤有&amp;nbsp;&lt;a href="https://physics.stackexchange.com/q/80043/653"&gt;30-31% 损耗&lt;/a&gt;，所以我们的这个数字是：(40,075,000 m) / (299,792,458 m/s * .70) = 0.191s，也就是说最坏情况下绕地球一圈是 191ms，对吧？不对。这假设的是一条理想路径，而实际上两个网络节点的之间几乎不可能是直线。中间还有路由器、交换机、缓存、处理器队列等各种各样的延迟。累加起来的延迟相当可观。&lt;/p&gt;
&lt;p&gt;这些和 Stack Overflow 有什么关系呢？云主机的优势出来了。如果你用一家云供应商，你访问到的就是相对较近的服务器。但对我们来说不是这样，你离服务部署在纽约或丹佛（主备模式）越远，延迟就越高。而使用 HTTPS，在协商连接的时候需要一个额外的往返。这还是最好的情况（&lt;a href="https://blog.cloudflare.com/introducing-0-rtt/"&gt;使用 0-RTT 优化 TLS 1.3&lt;/a&gt;）。&lt;a href="https://twitter.com/igrigorik"&gt;Ilya Grigorik&lt;/a&gt;&amp;nbsp;的&amp;nbsp;&lt;a href="https://istlsfastyet.com/"&gt;这个总结&lt;/a&gt;&amp;nbsp;讲的很好。&lt;/p&gt;
&lt;p&gt;来说&amp;nbsp;&lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt;&amp;nbsp;和&amp;nbsp;&lt;a href="https://www.fastly.com/"&gt;Fastly&lt;/a&gt;。HTTPS 并不是闭门造车的一个项目，你看下去就会知道，我们还有好几个项目在并行。在搭建一个靠近用户的 HTTPS 终端（以降低往返时间）时，我们主要考虑的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;终端 HTTPS 支持&lt;/li&gt;
&lt;li&gt;DDoS 防护&lt;/li&gt;
&lt;li&gt;CDN 功能&lt;/li&gt;
&lt;li&gt;与直连等同或更优的性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="you-hua-dai-li-ceng-de-zhun-bei-ke-hu-duan-xing-neng-ce-shi"&gt;优化代理层的准备：客户端性能测试&lt;/h3&gt;
&lt;p&gt;开始正式启用终端链路加速之前，我们需要有性能测试报告。我们在浏览器搭好了一整套覆盖全链路性能数据的测试。 浏览器里可以通过 JavaScript 从&amp;nbsp;&lt;a href="https://www.w3.org/TR/navigation-timing/"&gt;&lt;code&gt;window.performance&lt;/code&gt;&lt;/a&gt;&amp;nbsp;取性能耗时。打开你浏览器的审查器，你可以亲手试一下。我们希望这个过程透明，所以从第一天开始就把详细信息&lt;a href="https://teststackoverflow.com/"&gt;放在了 teststackoverflow.com&lt;/a&gt;&amp;nbsp;上。这上面并没有敏感信息，只有一些由页面&lt;em&gt;直接&lt;/em&gt;载入的 URI 和资源，以及它们的耗时。每一张记录下来的页面大概长这样：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-Teststackoverflow.png"&gt;&lt;img alt="teststackoverflow.com" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-Teststackoverflow.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们目前对 5% 的流量做性能监控。这个过程没有那么复杂，但是我们需要做的事情包括：
1. 把耗时转成 JSON
2. 页面加载后上传性能测试数据
3. 将性能测试上传给我们后台服务器
4. 在 SQL Server 中使用&amp;nbsp;&lt;a href="http://www.nikoport.com/columnstore/"&gt;clustered columnstore&lt;/a&gt;&amp;nbsp;存储数据
5. 使用&amp;nbsp;&lt;a href="https://bosun.org/"&gt;Bosun&lt;/a&gt;&amp;nbsp;(具体是&amp;nbsp;&lt;a href="https://github.com/bretcope/BosunReporter.NET"&gt;BosunReporter.NET&lt;/a&gt;) 汇集数据&lt;/p&gt;
&lt;p&gt;最终的结果是我们有了一份来自于全球&lt;em&gt;真实&lt;/em&gt;用户的很好的实时汇总。这些数据可供我们分析、监控、报警，以及用于评估变化。它大概长这样：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-ClientTimings.png"&gt;&lt;img alt="Client Timings Dashboard" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-ClientTimings.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;幸好，我们有持续的流量来获取数据以供我们决策使用，目前的量级是 50 亿，并且还在增长中。这些数据概览如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-ClientTimingsDatabase.png"&gt;&lt;img alt="Client Timings Database" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-ClientTimingsDatabase.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OK，我们已经把基础工作准备好了，是时候来测试 CDN/代理层供应商了。&lt;/p&gt;
&lt;h3 id="cloudflare"&gt;Cloudflare&lt;/h3&gt;
&lt;p&gt;我们评估了很多 CDN/DDoS 防护层供应商。最终选择了&amp;nbsp;&lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt;，主要是考虑到他们的基础设施、快速响应、还有他们承诺的&amp;nbsp;&lt;a href="https://www.cloudflare.com/website-optimization/railgun/"&gt;Railgun&lt;/a&gt;。那么我们如何测试使用了 Cloudfalre 之后用户的真实效果？是否需要部署服务来获取用户数据？答案是不需要！&lt;/p&gt;
&lt;p&gt;Stack Overflow 的数据量非常大：月 PV 过十亿。记得我们上面讲的客户端耗时纪录吗？我们每天都有几百万的访问了，所以不是直接可以问他们吗？我们是可以这么做，只需要在页面中嵌入&amp;nbsp;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&amp;nbsp;就行了。Cloudflare 已经是我们&amp;nbsp;&lt;a href="https://cdn.sstatic.net/"&gt;cdn.sstatic.net&lt;/a&gt;（我们共用的无 cookie 的静态内容域）的托管商了。但是这是通过一条&lt;a href="https://en.wikipedia.org/wiki/CNAME_record"&gt;&lt;code&gt;CNAME&lt;/code&gt;&amp;nbsp;DNS 纪录&lt;/a&gt;来做的，我们把 DNS 指向他们的 DNS。所以要用 Cloudflare 来当代理服务的话，我们需要他们指向我们的 DNS。所以我们先需要测试他们 DNS 的性能。&lt;/p&gt;
&lt;p&gt;实际上，要测试性能我们需要把二级域名给他们，而不是&amp;nbsp;&lt;code&gt;something.stackoverflow.com&lt;/code&gt;，因为这样可能会有不一致的&lt;a href="https://wiki.gandi.net/en/glossary/glue-record"&gt;胶水记录&lt;/a&gt;而导致多次查询。明确一下，&lt;a href="https://en.wikipedia.org/wiki/Top-level_domain"&gt;一级域名 (TLDs)&lt;/a&gt;指的是&amp;nbsp;&lt;code&gt;.com&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.net&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.org&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.dance&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.duck&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.fail&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.gripe&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.here&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.horse&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.ing&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.kim&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.lol&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.ninja&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.pink&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.red&lt;/code&gt;,&amp;nbsp;&lt;code&gt;.vodka&lt;/code&gt;. 和&amp;nbsp;&lt;code&gt;.wtf&lt;/code&gt;。 注意，&lt;a href="https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains"&gt;这些域名尾缀都是&lt;/a&gt;，我可没开玩笑。&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Second-level_domain"&gt;二级域名 (SLDs)&lt;/a&gt;&amp;nbsp;就多了一级，比如&amp;nbsp;&lt;code&gt;stackoverflow.com&lt;/code&gt;,&amp;nbsp;&lt;code&gt;superuser.com&lt;/code&gt;&amp;nbsp;等等。我们需要测的就是这些域名的行为及表现。因此，我们就有了&amp;nbsp;&lt;code&gt;teststackoverflow.com&lt;/code&gt;，通过这个新域名，我们在全球范围内测试 DNS 性能。对一部分比例的用户，通过嵌一个&amp;nbsp;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;（在测试中开关），我们可以轻松地获取用户访问 DNS 的相关数据。&lt;/p&gt;
&lt;p&gt;注意，测试过程最少需要 24 小时。在各个时区，互联网的表现会随着用户作息或者 Netflix 的使用情况等发生变化。所以要测试一个国家，需要完整的一天数据。最好是在工作日（而不要半天落在周六）。我们知道会有各种意外情况。互联网的性能并不是稳定的，我们要通过数据来证明这一点。&lt;/p&gt;
&lt;p&gt;我们最初的假设是，多增加了的一个节点会带来额外的延时，我们会因此损失一部分页面加载性能。但是 DNS 性能上的增加其实弥补了这一块。比起我们只有一个数据中心来说，Cloudflare 的 DNS 服务器部署在离用户更近的地方，这一块性能要好得多得多。我希望我们能有空来放出这一块的数据，只不过这一块需要很多处理（以及托管），而我现在也没有足够多的时间。&lt;/p&gt;
&lt;p&gt;接下来，我们开始将&amp;nbsp;&lt;code&gt;teststackoverflow.com&lt;/code&gt;&amp;nbsp;放在 Cloudflare 的代理上做链路加速，同样也是放在&amp;nbsp;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&amp;nbsp;中。我们发现美国和加拿大的服务由于多余的节点而变慢，但是世界其他地方都是持平或者更好。这满足我们的期望。我们开始使用 Cloudflare 的网络对接我们的服务。期间发生了一些 DDos 的攻击，不过这是另外的事了。那么，为什么我们接受在美国和加拿大地区慢一点呢？因为每个页面加载需要的时间仅为 200-300ms，哪怕慢一点也还是飞快。当时我们认为&amp;nbsp;&lt;a href="https://www.cloudflare.com/website-optimization/railgun/"&gt;Railgun&lt;/a&gt;&amp;nbsp;可以将这些损耗弥补回来。&lt;/p&gt;
&lt;p&gt;这些测试完成之后，我们为了预防 DDos 工作，做了一些其他工作。我们接入了额外的 ISP 服务商以供我们的 CDN/代理层对接。毕竟如果能绕过攻击的话，我们没必要在代理层做防护。现在每个机房都有 4 个 ISP 服务商（译者注：相当于电信、联通、移动、教育网），两组路由器，他们之间使用&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Border_Gateway_Protocol"&gt;BGP&lt;/a&gt;协议。我们还额外添置了两组负载均衡器专门用于处理 CDN/代理层的流量。&lt;/p&gt;
&lt;p&gt;Cloudflare: Railgun&lt;/p&gt;
&lt;p&gt;与此配套，我们启用了两组&amp;nbsp;&lt;a href="https://www.cloudflare.com/website-optimization/railgun/"&gt;Railgun&lt;/a&gt;。Railgun 的原理是在 Cloudflare 那边，使用&amp;nbsp;&lt;a href="https://memcached.org/"&gt;memcached&lt;/a&gt;&amp;nbsp;匹配 URL 进行缓存数据。当 Railgun 启用的时候，每个页面（有一个大小阈值）都会被缓存下来。那么在下一次请求时候，如果在这个 URL 在 Cloudflare 节点上和我们这里都缓存的话，我们仍然会问 web 服务器最新的数据。但是我们不需要传输完整的数据，只需要把传输和上次请求的差异数据传给 Cloudflure。他们把这个差异运用于他们的缓存上，然后再发回给客户端。这时候，&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Gzip"&gt;gzip 压缩&lt;/a&gt;&amp;nbsp;的操作也从 Stack Overflow 的 9 台 Web Server 转移到了一个 Railgun 服务上，这台服务器得是 CPU 密集型的&amp;mdash;&amp;mdash;我指出这点是因为，这项服务需要评估、购买，并且部署在我们这边。&lt;/p&gt;
&lt;p&gt;举个例子，想象一下，两个用户打开同一个问题的页面。从浏览效果来看，他们的页面技术上长得&lt;em&gt;几乎&lt;/em&gt;一样，仅仅有细微的差别。如果我们大部分的传输内容只是一个 diff 的话，这将是一个巨大的性能提升。&lt;/p&gt;
&lt;p&gt;总而言之，Railgun 通过减少大量数据传输的方式提高性能。当它顺利工作的时候确实是这样。除此之外，还有一个额外的优点：请求不会重置连接。由于&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/TCP_congestion_control#Slow_start"&gt;TCP 慢启动&lt;/a&gt;，当连接环境较为复杂时候，可能导致连接被限流。而 Railgun 始终以固定的连接数连接到 Cloudflare 的终端，对用户请求采用了多路复用，从而其不会受慢启动影响。小的 diff 也减少了慢启动的开销。&lt;/p&gt;
&lt;p&gt;很可惜，我们由于种种原因我们在使用 Railgun 过程中一直遇到问题。据我所知，我们拥有当时最大的 Railgun 部署规模，这把 Railgun 逼到了极限。尽管我们花了一年追踪各种问题，最终还是不得不放弃了。这种状况不仅没有给我们省钱，还耗费了更多的精力。现在几年过去了。如果你正在评估使用 Railgun，你最好看最新的版本，他们一直在做&lt;a href="https://www.cloudflare.com/docs/railgun/changelog.html"&gt;优化&lt;/a&gt;。我也建议你自己做决定是否使用 Railgun。&lt;/p&gt;
&lt;h3 id="fastly"&gt;Fastly&lt;/h3&gt;
&lt;p&gt;我们最近才迁到&amp;nbsp;&lt;a href="https://www.fastly.com/"&gt;Fastly&lt;/a&gt;，因为我们在讲 CDN/代理层，我也会顺带一提。由于很多技术工作在 Cloudflare 那边已经完成，所以迁移本身并没有什么值得说的。大家会更感兴趣的是：为什么迁移？毕竟 Cloudflare 在各方面是不错的：丰富的数据中心、稳定的带宽价格、包含 DNS 服务。答案是：它不再是我们最佳的选择了。Flastly 提供了一些我们更为看中的特性：灵活的终端节点控制能力、配置快速分发、自动配置分发。并不是说 Cloudflare 不行，只是它不再适合 Stack Overflow 了。&lt;/p&gt;
&lt;p&gt;事实胜于雄辩：如果我不认可 Cloudflare，我的私人博客不可能选择它，嘿，就是这个博客，你现在正在阅读的。&lt;/p&gt;
&lt;p&gt;Fastly 吸引我们的主要功能是提供了&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Varnish_(software)"&gt;Varnish&lt;/a&gt; 和&amp;nbsp;&lt;a href="https://docs.fastly.com/guides/vcl/"&gt;VCL&lt;/a&gt;。这提供了高度的终端可定制性。有些功能吧，Cloudfalre 无法快速提供（因为他们是通用化的，会影响所有用户），在 Fastly 我们可以自己做。这是这两家架构上的差异，这种「代码级别高可配置」对于我们很适用。同时，我们也很喜欢他们在沟通、基础设施的开放性。&lt;/p&gt;
&lt;p&gt;我来展示一个 VCL 好用在哪里的例子。最近我们遇到 .NET 4.6.2 的一个&lt;a href="https://github.com/Microsoft/dotnet/issues/330"&gt;超恶心 bug&lt;/a&gt;，它会导致 max-age 有超过 2000 年的缓存时间。快速解决方法是在终端节点上有需要的时候去覆盖掉这个头部，当我写这篇文章的时候，这个 VCL 配置是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="s"&gt;vcl_fetch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(beresp.http.Cache-Control)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(req.url.path&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;"^/users/flair/")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="s"&gt;beresp.http.Cache-Control&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"public,&lt;/span&gt; &lt;span class="s"&gt;max-age=180"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kn"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="s"&gt;beresp.http.Cache-Control&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这将给用户能力展示页 3 分钟的缓存时间（数据量还好），其余页面都不设置。这是一个为解决紧急时间的非常便于部署的全局性解决方案。 我们很开心现在有能力在终端做一些事情。我们的&amp;nbsp;&lt;a href="https://twitter.com/alioth"&gt;Jason Harvey&lt;/a&gt;&amp;nbsp;负责 VCL 配置，并写了一些自动化推送的功能。我们基于一个 Go 的开源库&amp;nbsp;&lt;a href="https://github.com/alienth/fastlyctl"&gt;fastlyctl&lt;/a&gt;&amp;nbsp;做了开发。&lt;/p&gt;
&lt;p&gt;另一个 Fastly 的特点是可以使用我们自己的证书，Cloudflare 虽然也有这个服务，但是费用太高。如我上文提到的，我们现在已经具备使用 HTTP/2 推送的能力。但是，Fastly 就不支持 DNS，这个在 Cloudflare 那里是支持的。现在我们需要自己解决 DNS 的问题了。可能最有意思的就是这些来回的折腾吧？&lt;/p&gt;
&lt;h3 id="quan-ju-dns"&gt;全局 DNS&lt;/h3&gt;
&lt;p&gt;当我们从 Cloudflare 迁移到 Fastly 时候，我们必须评估并部署一个新的 DNS 供应商。这里有篇&amp;nbsp;&lt;a href="https://twitter.com/thefarseeker"&gt;Mark Henderson&lt;/a&gt;&amp;nbsp;写的&amp;nbsp;&lt;a href="http://blog.serverfault.com/2017/01/09/surviving-the-next-dns-attack/"&gt;文章&lt;/a&gt;&amp;nbsp;。鉴于此，我们必须管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们自己的 DNS 服务器（备用）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://name.com/"&gt;Name.com&lt;/a&gt;&amp;nbsp;的服务器（为了那些不需要 HTTPS 的跳转服务）&lt;/li&gt;
&lt;li&gt;Cloudflare DNS&lt;/li&gt;
&lt;li&gt;Route 53 DNS&lt;/li&gt;
&lt;li&gt;Google DNS&lt;/li&gt;
&lt;li&gt;Azure DNS&lt;/li&gt;
&lt;li&gt;其他一些（测试时候使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个本身就是另一个项目了。为了高效管理，我们开发了&amp;nbsp;&lt;a href="http://blog.serverfault.com/2017/04/11/introducing-dnscontrol-dns-as-code-has-arrived/"&gt;DNSControl&lt;/a&gt;。这现在已经是&lt;a href="https://stackexchange.github.io/dnscontrol/"&gt;开源项目了&lt;/a&gt;，&lt;a href="https://github.com/StackExchange/dnscontrol"&gt;托管在 GiHub&lt;/a&gt;&amp;nbsp;上，使用&amp;nbsp;&lt;a href="https://golang.org/"&gt;Go&lt;/a&gt;&amp;nbsp;语言编写。 简而言之，每当我们推送 JavaScript 的配置到 git，它都会马上在全球范围里面部署好 DNS 配置。这里有一个简单的例子，我们拿&amp;nbsp;&lt;a href="https://askubuntu.com/"&gt;askubuntu.com&lt;/a&gt;&amp;nbsp;做示范：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;D('askubuntu.com', REG_NAMECOM,
    DnsProvider(R53,2),
    DnsProvider(GOOGLECLOUD,2),
    SPF,
    TXT('@', 'google-site-verification=PgJFv7ljJQmUa7wupnJgoim3Lx22fbQzyhES7-Q9cv8'), // webmasters
    A('@', ADDRESS24, FASTLY_ON),
    CNAME('www', '@'),
    CNAME('chat', 'chat.stackexchange.com.'),
    A('meta', ADDRESS24, FASTLY_ON),
END)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;太棒了，接下来我们就可以使用客户端响应测试工具来测试啦！&lt;a href="#preparing-for-a-proxy-client-timings"&gt;上面提到的工具&lt;/a&gt;可以实时告诉我们真实部署情况，而不是模拟数据。但是我们还需要测试所有部分都正常。&lt;/p&gt;
&lt;h3 id="ce-shi"&gt;测试&lt;/h3&gt;
&lt;p&gt;客户端响应测试的追踪可以方便我们做性能测试，但这个并不适合用来做配置测试。客户端响应测试非常适合展现结果，但是配置有时候并没有界面，所以我们开发了&amp;nbsp;&lt;a href="https://godoc.org/github.com/StackExchange/httpunit"&gt;httpUnit&lt;/a&gt;&amp;nbsp;（后来知道&lt;a href="http://httpunit.sourceforge.net/"&gt;这个项目重名了&lt;/a&gt;&amp;nbsp;）。这也是一个使用 Go 语言的&lt;a href="https://github.com/StackExchange/httpunit"&gt;开源项目&lt;/a&gt;。以&amp;nbsp;&lt;code&gt;teststackoverflow.com&lt;/code&gt;&amp;nbsp;举例，使用的配置如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plan]]&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"teststackoverflow_com"&lt;/span&gt;
&lt;span class="s"&gt;    url = "http://teststackoverflow.com"&lt;/span&gt;
&lt;span class="s"&gt;    ips = ["28i"]&lt;/span&gt;
&lt;span class="s"&gt;    text = "&amp;lt;title&amp;gt;Test Stack Overflow Domain&amp;lt;/title&amp;gt;"&lt;/span&gt;
&lt;span class="s"&gt;    tags = ["so"]&lt;/span&gt;
&lt;span class="k"&gt;[[plan]]&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"tls_teststackoverflow_com"&lt;/span&gt;
&lt;span class="s"&gt;    url = "https://teststackoverflow.com"&lt;/span&gt;
&lt;span class="s"&gt;    ips = ["28"]&lt;/span&gt;
&lt;span class="s"&gt;    text = "&amp;lt;title&amp;gt;Test Stack Overflow Domain&amp;lt;/title&amp;gt;"&lt;/span&gt;
&lt;span class="s"&gt;    tags = ["so"]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每次我们更新一下防火墙、证书、绑定、跳转时都有必要测一下。我们必须保证我们的修改不会影响用户访问（先在预发布环境进行部署）。 httpUnit 就是我们来做集成测试的工具。&lt;/p&gt;
&lt;p&gt;我们还有一个开发的内部工具（由亲爱的&amp;nbsp;&lt;a href="https://twitter.com/yesthattom"&gt;Tom Limoncelli&lt;/a&gt;&amp;nbsp;开发），用来管理我们负载均衡上面的&amp;nbsp;&lt;a href="https://en.wikipedia.org/wiki/Virtual_IP_address"&gt;VIP 地址&lt;/a&gt;&amp;nbsp;。我们先在一个备用负载均衡上面测试完成，然后将所有流量切过去，让之前的主负载均衡保持一个稳定状态。如果期间发生任何问题，我们可以轻易回滚。如果一切顺利，我们就把这个变更应用到那台负载均衡上。这个工具叫做&amp;nbsp;&lt;code&gt;keepctl&lt;/code&gt;（keepalived control 的简称），时间允许的话很快就会整理开源出来。&lt;/p&gt;
&lt;h3 id="ying-yong-ceng-zhun-bei"&gt;应用层准备&lt;/h3&gt;
&lt;p&gt;上面提到的只是架构方面的工作。这通常是由&amp;nbsp;&lt;a href="http://stackoverflow.com/company/team#Engineering"&gt;Stack Overflow 的几名网站可靠性工程师&lt;/a&gt;组成的团队完成的。而应用层也有很多需要完成的工作。这个列表会很长，先让我拿点咖啡和零食再慢慢说。&lt;/p&gt;
&lt;p&gt;很重要的一点是，&lt;a href="https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/"&gt;Stack Overflow 与 Stack Exchange 的架构&lt;/a&gt;&amp;nbsp;Q&amp;amp;A 采用了&lt;a href="https://en.wikipedia.org/wiki/Multitenancy"&gt;多租户技术&lt;/a&gt;。这意味着如果你访问&amp;nbsp;&lt;code&gt;stackoverflow.com&lt;/code&gt;&amp;nbsp;或者&amp;nbsp;&lt;code&gt;superuser.com&lt;/code&gt;&amp;nbsp;又或者&amp;nbsp;&lt;code&gt;bicycles.stackexchange.com&lt;/code&gt;，你返回到的其实是同一台服务器上的同一个&amp;nbsp;&lt;code&gt;w3wp.exe&lt;/code&gt;&amp;nbsp;进程。我们通过浏览器发送的&amp;nbsp;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host"&gt;&lt;code&gt;Host&lt;/code&gt;&amp;nbsp;请求头&lt;/a&gt;来改变请求的上下文。为了更好地理解我们下文中提到的一些概念，你需要知道我们代码中的&amp;nbsp;&lt;code&gt;Current.Site&lt;/code&gt;&amp;nbsp;其实指的是&amp;nbsp;&lt;em&gt;请求&lt;/em&gt;&amp;nbsp;中的站点。&lt;code&gt;Current.Site.Url()&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code&gt;Current.Site.Paths.FaviconUrl&lt;/code&gt;&amp;nbsp;也是基于同样的概念。&lt;/p&gt;
&lt;p&gt;换一句话说：我们的 Q&amp;amp;A 全站都是跑在同一个服务器上的同一个进程，而用户对此没有感知。我们在九台服务器上每一台跑一个进程，只是为了发布版本和冗余的问题。&lt;/p&gt;
&lt;p&gt;全局登录&lt;/p&gt;
&lt;p&gt;整个项目中有一些看起来可以独立出来（事实上也是），不过也同属于整个大 HTTPS 迁移中的一部分。登录就是其中一个项目。我首先来说说这个，因为这比别它变化都要早上线。&lt;/p&gt;
&lt;p&gt;在 Stack Overflow（及 Stack Exchange）的头五六年里，你登录的是一个个的独立网站。比如，&lt;code&gt;stackoverflow.com&lt;/code&gt;、&lt;code&gt;stackexchange.com&lt;/code&gt;&amp;nbsp;以及&amp;nbsp;&lt;code&gt;gaming.stackexchange.com&lt;/code&gt;&amp;nbsp;都有它们自己的 cookies。值得注意的是：&lt;code&gt;meta.gaming.stackexchange.com&lt;/code&gt;&amp;nbsp;的登录 cookie 是从&amp;nbsp;&lt;code&gt;gaming.stackexchange.com&lt;/code&gt;&amp;nbsp;带过来的。这些是我们上面讨论证书时提到的 meta 站点。他们的登录信息是相关联的，你只能通过父站点登录。在技术上说并没有什么特别的，但考虑到用户体验就很糟糕了。你必须一个一个站登录。我们用「全局认证」的方法来&lt;a href="https://stackoverflow.blog/2010/09/11/global-network-auto-login/"&gt;「修复」了这个问题&lt;/a&gt;，方法是在页面上放一个&amp;nbsp;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;，内面访问一下&amp;nbsp;&lt;code&gt;stackauth.com&lt;/code&gt;。如果用户在别处登录过的话，它也会在这个站点上登录，至少会去试试。这个体验还行，但是会有弹出框问你是否点击重载以登录，这样就又不是太好。我们可以做得更好的。对了，你也可以去问问&amp;nbsp;&lt;a href="https://twitter.com/kevinmontrose"&gt;Kevin Montrose&lt;/a&gt;&amp;nbsp;关于移动 Safari 的匿名模式，你会震惊的。&lt;/p&gt;
&lt;p&gt;于是我们有了「通用登录」。为什么用「通用」这个名字？因为我们已经用过「全局」了。我们就是如此单纯。所幸 cookies 也很单纯的东西。父域名里的 cookie（如&amp;nbsp;&lt;code&gt;stackexchange.com&lt;/code&gt;）在你的浏览器里被带到所有子域名里去（如&amp;nbsp;&lt;code&gt;gaming.stackexchange.com&lt;/code&gt;）。如果我们只二级域名的话，其实我们的域名并不多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/"&gt;askubuntu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mathoverflow.net/"&gt;mathoverflow.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/"&gt;serverfault.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackapps.com/"&gt;stackapps.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackexchange.com/"&gt;stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/"&gt;stackoverflow.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://superuser.com/"&gt;superuser.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的，我们有一些域名是跳转到上面的列表中的，比如&amp;nbsp;&lt;a href="http://askdifferent.com/"&gt;askdifferent.com&lt;/a&gt;。但是这些只是跳转而已，它们没有 cookies 也无需登录。&lt;/p&gt;
&lt;p&gt;这里有很多细节的后端工作我没有提（归功于&amp;nbsp;&lt;a href="https://twitter.com/superdalgas"&gt;Geoff Dalgas&lt;/a&gt;&amp;nbsp;和&amp;nbsp;&lt;a href="https://twitter.com/aalear"&gt;Adam Lear&lt;/a&gt;），但大体思路就是，当你登录的时候，我们把这些域名都写入一个 cookie。我们是通过第三方的 cookie 和&lt;a href="https://en.wikipedia.org/wiki/Cryptographic_nonce"&gt;随机数&lt;/a&gt;来做的。当你登录其中任意一个网站的时候，我们在页面上都会放 6 个&amp;nbsp;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&amp;nbsp;标签来往其它域名写入 cookie，本质上就完成了登录工作。这并不能在&amp;nbsp;&lt;em&gt;所有情况&lt;/em&gt;&amp;nbsp;下都适用（尤其是移动 Safari 简直是要命了），但和之前比起来那是好得多了。&lt;/p&gt;
&lt;p&gt;客户端的代码不复杂，基本上长这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/users/login/universal/request'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'//'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Host&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/users/login/universal.gif?authToken='&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
            &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;amp;nonce='&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Nonce&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&amp;nbsp;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#footer'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;img style="display:none" src="'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'"&amp;gt;&amp;lt;/img&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是要做到这点，我们必须上升到账号级别的认证（之前是用户级别）、改变读取 cookie 的方式、改变这些 meta 站的登录工作方式，同时还要将这一新的变动整合到其它应用中。比如说，Careers（现在拆成了 Talent 和 Jobs）用的是另一份代码库。我们需要让这些应用读取相应的 cookies，然后通过 API 调用 Q&amp;amp;A 应用来获取账户。我们部署了一个 NuGet 库来减少重复代码。底线是：你在一个地方登录，就在所有域名都登录。不弹框，不重载页面。&lt;/p&gt;
&lt;p&gt;技术的层面上看，我们不用再关心&amp;nbsp;&lt;code&gt;*.*.stackexchange.com&lt;/code&gt;&amp;nbsp;是什么了，只要它们是&amp;nbsp;&lt;code&gt;stackexchange.com&lt;/code&gt;&amp;nbsp;下就行。这看起来和 HTTPS 没有关系，但这让我们可以把&amp;nbsp;&lt;code&gt;meta.gaming.stackexchange.com&lt;/code&gt;&amp;nbsp;变成&amp;nbsp;&lt;code&gt;gaming.meta.stackexchange.com&lt;/code&gt;&amp;nbsp;而不影响用户。&lt;/p&gt;
&lt;p&gt;本地 HTTPS 开发&lt;/p&gt;
&lt;p&gt;要想做得更好的话，本地环境应该尽量与开发和生产环境保持一致。幸好我们用的是 IIS，这件事情还简单的。我们使用一个工具来设置开发者环境，这个工具的名字叫「本地开发设置」&amp;mdash;&amp;mdash;单纯吧？它可以安装工具（Visual Studio、git、SSMS 等）、服务（SQL Server、Redis、Elasticsearch）、仓库、数据库、网站以及一些其它东西。做好了基本的工具设置之后，我们要做的只是添加 SSL/TLS 证书。主要的思路如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Websites = @(
    @{
        Directory = "StackOverflow";
        Site = "local.mse.com";
        Aliases = "discuss.local.area51.lse.com", "local.sstatic.net";
        Databases = "Sites.Database", "Local.StackExchange.Meta", "Local.Area51", "Local.Area51.Meta";
        Certificate = $true;
    },
    @{
        Directory = "StackExchange.Website";
        Site = "local.lse.com";
        Databases = "Sites.Database", "Local.StackExchange", "Local.StackExchange.Meta", "Local.Area51.Meta";
        Certificate = $true;
    }
)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我把使用到的代码&lt;a href="https://gist.github.com/NickCraver/6b5e75c153d60d0df5b0970d52412d4e"&gt;放在了一个 gist 上：&lt;code&gt;Register-Websites.psm1&lt;/code&gt;&lt;/a&gt;。我们通过 host 头来设置网站（通过别名添加），如果直连的话就给它一个证书（嗯，现在应该把这个行为默认改为&amp;nbsp;&lt;code&gt;$true&lt;/code&gt;&amp;nbsp;了），然后允许 AppPool 账号来访问数据库，于是我们本地也在使用&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;开发了。嗯，我知道我们应该把这个设置过程开源出来，不过我们仍需去掉一些专有的业务。会有这么一天的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么这件事情很重要？&lt;/strong&gt;&amp;nbsp;在此之前，我们从&amp;nbsp;&lt;code&gt;/content&lt;/code&gt;&amp;nbsp;加载静态内容，而不是从另一个域名。这很方便，但也隐藏了类似于&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS"&gt;跨域请求（CORS）&lt;/a&gt;的问题。在同一个域名下用同一个协议能正常加载的资源，换到开发或者生产环境下就有可能出错。&lt;a href="https://blog.codinghorror.com/the-works-on-my-machine-certification-program/"&gt;「在我这里是好的。」&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当我们使用和生产环境中同样协议以及同样架构的 CDN 还有域名设置时，我们就可以在开发机器上找出并修复更多的问题。比如，你是否知道，从&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;跳转到&amp;nbsp;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;时，&lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec15.html#sec15.1.3"&gt;浏览器是不会发送 referer&lt;/a&gt;&amp;nbsp;的？这是一个安全上的问题，referer 头中可能带有以明文传输的敏感信息。&lt;/p&gt;
&lt;p&gt;「Nick 你就扯吧，我们能拿到从 Google 拿到 referer 啊！」确实。但是这是因为他们&lt;em&gt;主动选择这一行为&lt;/em&gt;。如果你看一下 Google 的搜索页面，你可以看到这样的&amp;nbsp;&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;&amp;nbsp;指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;meta content="origin" id="mref" name="referrer"&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这也就是为什么你可以取到 referer。&lt;/p&gt;
&lt;p&gt;好的，我们已经设置好了，现在该做些什么呢？&lt;/p&gt;
&lt;h3 id="hun-he-nei-rong-lai-zi-yu-ni-men"&gt;混合内容：来自于你们&lt;/h3&gt;
&lt;p&gt;混合内容是个筐，什么都能往里装。我们这些年下来积累了哪些混合内容呢？不幸的是，有很多。这个列表里我们必须处理的用户提交内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;图片，出现在&lt;a href="https://stackoverflow.com/questions"&gt;问题&lt;/a&gt;、答案、&lt;a href="https://stackoverflow.com/tags"&gt;标签&lt;/a&gt;、wiki 等内容中使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;头像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;头像，出现在聊天中（站点侧边栏）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;图片，出现于个人资料页的「关于我」部分&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;图片，出现于&lt;a href="https://stackoverflow.com/help"&gt;帮助中心的文章中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;YouTube 视频（有些站点启用了，比如&amp;nbsp;&lt;a href="https://gaming.stackexchange.com/"&gt;gaming.stackexchange.com&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;图片，出现于&lt;a href="https://stackoverflow.com/help/privileges"&gt;特权描述中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;图片，出现于&lt;a href="http://stackoverflow.com/users/story/13249"&gt;开发者故事中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;图片，出现于&lt;a href="https://stackoverflow.com/jobs"&gt;工作描述中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;图片，出现于&lt;a href="https://stackoverflow.com/jobs/companies"&gt;公司页面中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;源地址，出现在&lt;a href="https://meta.stackoverflow.com/q/269753/13249"&gt;&amp;nbsp;JavaScript 代码中&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的每一个都带有自己独有的问题，我仅仅会覆盖一下值得一提的部分。注意：我谈论的每一个解决方案都必须扩展到我们这个架构下的几百个站点和数据库上。&lt;/p&gt;
&lt;p&gt;在上面的所有情况中（除了代码片段），要消除混合内容的第一步工作就是：你必须先消除&lt;em&gt;新&lt;/em&gt;的混合内容。否则，这个清理过程将会无穷无尽。要做到这一点，&lt;a href="https://meta.stackexchange.com/q/291947/135201"&gt;我们开始全网强制仅允许内嵌&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;图片&lt;/a&gt;。一旦这个完成之后，我们就可以开始清理了。&lt;/p&gt;
&lt;p&gt;对于问题、答案以及其他帖子形式中，我们需要具体问题具体分析。我们先来搞定 90% 以上的情况：&lt;code&gt;stack.imgur.com&lt;/code&gt;。在我来之前 Stack Overflow 就已经有自己托管的 Imgur 实例了。你在编辑器中上传的图片就会传到那里去。绝大部分的帖子都是用的这种方法，而他们几年前就为我们添加了 HTTPS 支持。所以这个就是一个很直接的查找替换（我们称为帖子 markdown 重处理）。&lt;/p&gt;
&lt;p&gt;然后我们通过通过&amp;nbsp;&lt;a href="https://www.elastic.co/"&gt;Elasticsearch&lt;/a&gt;&amp;nbsp;对所有内容的索引来找出所有剩下的文件。我说的我们其实指的是&amp;nbsp;&lt;a href="https://twitter.com/m0sa"&gt;Samo&lt;/a&gt;。他在这里处理了大量的混合内容工作。当我们看到大部分的域名其实已经支持 HTTPS 了之后，我们决定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于每个&amp;nbsp;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&amp;nbsp;的源地址都尝试替换成&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;。如果能正常工作则替换帖子中的链接&lt;/li&gt;
&lt;li&gt;如果源地址不支持&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;，将其转一个链接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，并没有那么顺利。我们发现用于匹配 URL 的正则表达式其实已经坏了好几年了，并且没有人发现&amp;hellip;&amp;hellip;所以我们修复了正则，重新做了索引。&lt;/p&gt;
&lt;p&gt;有人问我们：「为什么不做个代理呢？」呃，从法律和道德上来说，代理对我们的内容来说是个灰色地带。比如，我们&amp;nbsp;&lt;a href="https://photo.stackexchange.com/"&gt;photo.stackexchange.com&lt;/a&gt;&amp;nbsp;上的摄像师会明确声明不用 Imgur 以保留他们的权利。我们充分理解。如果我们开始代理并缓存&lt;em&gt;全图&lt;/em&gt;，这在法律上有点问题。我们后来发现在几百万张内嵌图片中，只有几千张即不支持&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;也没有 404 失效的。这个比例（低于 1%）不足于让我们去搭一个代理。&lt;/p&gt;
&lt;p&gt;我们确实&lt;em&gt;研究过&lt;/em&gt;搭一个代理相关的问题。费用有多少？需要多少存储？我们的带宽足够吗？我们有了一个大体上的估算，当然有点答案也不是很确定。比如我们是否要用 Fastly，还是直接走运营商？哪一种比较快？哪一种比较便宜？哪一种可以扩展？这个足够写另一篇博客了，如果你有具体问题的话可以在评论里提出，我会尽力回答。&lt;/p&gt;
&lt;p&gt;所幸，在这个过程中，为了解决几个问题，&lt;a href="https://twitter.com/balpha"&gt;balpha&lt;/a&gt;&amp;nbsp;更改了用 HTML5 嵌入 YouTube 的方式。我们也就顺便强制了一下 YouTube 的&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;嵌入。&lt;/p&gt;
&lt;p&gt;剩下的几个内容领域的事情差不多：先阻止新的混合内容进来，再替换掉老的。这需要我们在下面几个领域进行更改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帖子&lt;/li&gt;
&lt;li&gt;个人资料&lt;/li&gt;
&lt;li&gt;开发故事&lt;/li&gt;
&lt;li&gt;帮助中心&lt;/li&gt;
&lt;li&gt;职场&lt;/li&gt;
&lt;li&gt;公司业务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;声明：JavaScript 片段的问题仍然没有解决。这个有点难度的原因是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;资源有可能不以&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;的方式存在（比如一个库）&lt;/li&gt;
&lt;li&gt;由于这个是 JavaScript，你可以自己构建出任意的 URL。这里我们就无力检查了。&lt;ul&gt;
&lt;li&gt;如果你有更好的方式来处理这个问题，&lt;strong&gt;请告诉我们&lt;/strong&gt;。我们在可用性与安全性上不可兼得。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="hun-he-nei-rong-lai-zi-wo-men"&gt;混合内容：来自我们&lt;/h3&gt;
&lt;p&gt;并不是处理完用户提交的内容就解决问题了。我们自己还是有不少&amp;nbsp;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;的地方需要处理。这些更改本身没什么特别的，但是这至少能解答「为什么花了那么长时间？」这个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;广告服务（Calculon）&lt;/li&gt;
&lt;li&gt;广告服务（Adzerk）&lt;/li&gt;
&lt;li&gt;标签赞助商&lt;/li&gt;
&lt;li&gt;JavaScript 假定&lt;/li&gt;
&lt;li&gt;Area 51（这代码库也太老了）&lt;/li&gt;
&lt;li&gt;分析跟踪器（Quantcast, GA）&lt;/li&gt;
&lt;li&gt;每个站点引用的 JavaScript（社区插件）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/jobs&lt;/code&gt;&amp;nbsp;下的所有东西（这其实是个代理）&lt;/li&gt;
&lt;li&gt;用户能力&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;还有代码中所有出现&amp;nbsp;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaScript 和链接比较令人痛苦，所以我在这里稍微提一下。&lt;/p&gt;
&lt;p&gt;JavaScript 是一个不少人遗忘的角落，但这显然不能被无视。我们不少地方将主机域名传递给 JavaScript 时假定它是&amp;nbsp;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;，同时也有不少地方写死了 meta 站里的&amp;nbsp;&lt;code&gt;meta.&lt;/code&gt;&amp;nbsp;前缀。很多，真的很多，救命。还好现在已经不这样了，我们现在用服务器渲染出一个站点，然后在页面顶部放入相应的选择：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;StackExchange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="s2"&gt;"locale"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"stackAuthUrl"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://stackauth.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"site"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Stack Overflow"&lt;/span&gt;
    &lt;span class="s2"&gt;"childUrl"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://meta.stackoverflow.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"protocol"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"http"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;"user"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"gravatar"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;div class=\"gravatar-wrapper-32\"&amp;gt;&amp;lt;img src=\"https://i.stack.imgur.com/nGCYr.jpg\"&amp;gt;&amp;lt;/div&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"profileUrl"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://stackoverflow.com/users/13249/nick-craver"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这几年来我们在代码里也用到了很多静态链接。比如，在页尾，在页脚，在帮助区域&amp;hellip;&amp;hellip;到处都是。对每一个来说，解决方式都不复杂：把它们改成&amp;nbsp;&lt;code&gt;&amp;lt;site&amp;gt;.Url("/path")&lt;/code&gt;&amp;nbsp;的形式就好了。不过要找出这些链接有点意思，因为你不能直接搜&amp;nbsp;&lt;code&gt;"http://"&lt;/code&gt;。感谢 W3C 的丰功伟绩：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;svg xmlns="http://www.w3.org/2000/svg"...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是的，这些是标识符，是不能改的。所以我希望 Visual Studio 在查找文件框中增加一个「排除文件类型」的选项。Visual Studio 你听见了吗？VS Code 前段时间就加了这个功能。我这要求不过分。&lt;/p&gt;
&lt;p&gt;这件事情很枯燥，就是在代码中找出一千个链接然后替换而已（包括注释、许可链接等）。但这就是人生，我们必须要做。把这些链接改成&amp;nbsp;&lt;code&gt;.Url()&lt;/code&gt;&amp;nbsp;的形式之后，一旦站点支持 HTTPS 的时候，我们就可以让链接动态切换过去。比如我们得等到&amp;nbsp;&lt;code&gt;meta.*.stackexchange.com&lt;/code&gt;&amp;nbsp;搬迁完成之后再进行切换。插播一下我们数据中心的密码是「煎饼馃子」拼音全称，应该没有人会读到这里吧，所以在这里存密码很安全。当站点迁完之后，&lt;code&gt;.Url()&lt;/code&gt;&amp;nbsp;仍会正常工作，然后用&amp;nbsp;&lt;code&gt;.Url()&lt;/code&gt;&amp;nbsp;来渲染默认为 HTTPS 的站点也会继续工作。这将静态链接变成了动态。&lt;/p&gt;
&lt;p&gt;另一件重要的事情：这让我们的开发和本地环境都能正常工作，而不仅仅是链到生产环境上。这件事情虽然枯燥，但还是值得去做的。对了，因为我们的规范网址（canonical）也通过&amp;nbsp;&lt;code&gt;.Url()&lt;/code&gt;&amp;nbsp;来做了，所以一旦用户开始用上 HTTPS，Google 也可以感知到。&lt;/p&gt;
&lt;p&gt;一旦一个站点迁到 HTTPS 之后，我们会让爬虫来更新站点链接。我们把这个叫修正「Google 果汁」，同时这也可以让用户不再碰到 301。&lt;/p&gt;
&lt;h3 id="tiao-zhuan-301"&gt;跳转（301）&lt;/h3&gt;
&lt;p&gt;当你把站点移动到 HTTPS 之后，为了和 Google 配合，你有两件重要的事情要做：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新规范网址，比如&amp;nbsp;&lt;code&gt;&amp;lt;link rel="canonical" href="https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454" /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把&amp;nbsp;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;链接通过 301 跳转至&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个不复杂，也不是浩大的工程，但这非常&lt;em&gt;非常&lt;/em&gt;重要。Stack Overflow 大部分的流量都是从 Google 搜索结果中过来的，所以我们得保证这个不产生负面影响。这个是我们的生计，如果我们因此丢了流量那我真是要失业了。还记得那些&amp;nbsp;&lt;code&gt;.internal&lt;/code&gt;&amp;nbsp;的 API 调用吗？对，我们同样不能把&lt;em&gt;所有东西&lt;/em&gt;都进行跳转。所以我们在处理跳转的时候需要一定的逻辑（比如我们也不能跳转&amp;nbsp;&lt;code&gt;POST&lt;/code&gt;&amp;nbsp;请求，因为浏览器处理得不好），当然这个处理还是比较直接的。这里是实际上用到的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="kr"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;PerformHttpsRedirects&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTTPS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// If we're on HTTPS, never redirect back&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IsSecureConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Not HTTPS-by-default? Abort.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IsDefault&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Not supposed to redirect anyone yet? Abort.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RedirectFor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;SiteSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RedirectAudience&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NoOne&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Don't redirect .internal or any other direct connection&lt;/span&gt;
    &lt;span class="c1"&gt;// ...as this would break direct HOSTS to webserver as well&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RequestIPIsInternal&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Only redirect GET/HEAD during the transition - we'll 301 and HSTS everything in Fastly later&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HttpMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InvariantCultureIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HttpMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"HEAD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InvariantCultureIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Only redirect if we're redirecting everyone, or a crawler (if we're a crawler)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RedirectFor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;SiteSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RedirectAudience&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Everyone&lt;/span&gt;
            &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RedirectFor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;SiteSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RedirectAudience&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Crawlers&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IsSearchEngine&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InnerHttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// 301 when we're really sure (302 is the default)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RedirectVia301&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RedirectPermanent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PathAndQuery&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PathAndQuery&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InnerHttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ApplicationInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CompleteRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意我们并不是默认就跳 301（有一个 &lt;code&gt;.RedirectVia301&lt;/code&gt; 设置)，因为我们做一些会产生永久影响的事情之前必须仔细测试。我们会&lt;a href="#hsts-preloading"&gt;晚一点&lt;/a&gt;来讨论 &lt;a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HSTS&lt;/a&gt; 以及后续影响。&lt;/p&gt;
&lt;h3 id="websockets"&gt;Websockets&lt;/h3&gt;
&lt;p&gt;这一块会过得快一点。Websocket 不难，从某种角度来说，这是我们做过的最简单的事情。我们用 websockets 来处理实时的用户影响力变化、收件箱通知、新问的问题、新增加的答案等等。这也就说基本上每开一个 Stack Overflow 的页面，我们都会有一个对应的 websocket 连接连到我们的负载均衡器上。&lt;/p&gt;
&lt;p&gt;所以怎么改呢？其实很简单：安装一个证书，监听 &lt;code&gt;:443&lt;/code&gt; 端口，然后用 &lt;code&gt;wss://qa.sockets.stackexchange.com&lt;/code&gt; 来代替 &lt;code&gt;ws://&lt;/code&gt; 。后者其实早就做完了（我们用了一个专有的证书，但是这不重要）。从 &lt;code&gt;ws://&lt;/code&gt; 到 &lt;code&gt;wss://&lt;/code&gt; 只是配置一下的问题。一开始我们还用 &lt;code&gt;ws://&lt;/code&gt; 作为 &lt;code&gt;wss://&lt;/code&gt; 的备份方案，不过后来就变成&lt;em&gt;仅用&lt;/em&gt; &lt;code&gt;wss://&lt;/code&gt; 了。这么做有两个原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不用的话在 &lt;code&gt;https://&lt;/code&gt; 下面会有混合内容警告&lt;/li&gt;
&lt;li&gt;可以支持更多用户。因为很多老的代理不能很好地处理 websockets。如果使用加密流量，大多数代理就只是透传而不会弄乱流量。对移动用户来说尤其是这样。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最大的问题就是：「我们能处理了这个负载吗？」我们全网处理了不少并发 websocket，在我写这估的时候我们有超过 600000 个&lt;strong&gt;并发&lt;/strong&gt;的连接。这个是我们 HAProxy 的仪表盘在 &lt;a href="https://github.com/opserver/Opserver"&gt;Opserver&lt;/a&gt; 中的界面：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-Websockets.png"&gt;&lt;img alt="HAProxy Websockets" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-Websockets.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不管是在终端、抽象命名空间套接字还是前端来说都有很多连接。由于启用了 &lt;a href="https://tools.ietf.org/html/rfc5077"&gt;TLS 会话恢复&lt;/a&gt;，HAProxy 本身的负载也很重。要让用户下一次重新连接更快，第一次协商之后用户会拿到一个令牌，下一次会把这个令牌发送过来。如果我们的内存足够并且没有超时，我们会恢复上次的会话而不是再开一个。这个操作可以节省 CPU，对用户来说有性能提升，但会用到到更多内存。这个多因 key 大小而异（2048，4096 或是更多？）我们现在用的是 4096 位的 key。在开了 600000 个 websocket 的情况下，我们只用掉了负载均衡器 64GB 内存里的 19GB。这里面 12GB 是 HAProxy 在用，大多数为 TLS 会话缓存。所以结果来说还不错，如果&lt;em&gt;我们不得不买内存的话&lt;/em&gt;，这也会是整个 HTTPS 迁移中最便宜的东西。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-WebsocketMemory.png"&gt;&lt;img alt="HAProxy Websocket Memory" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-WebsocketMemory.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="wei-zhi"&gt;未知&lt;/h3&gt;
&lt;p&gt;我猜现在可能是我们来谈论一些未知问题的时候。有些问题是在我们尝试之前无法真正知道的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Analytics 里的流量表现怎么样？（我们会失去 referer 吗？）&lt;/li&gt;
&lt;li&gt;Google Webmasters 的转换是否平滑？（301 生效吗？规范域名呢？要多长时间？）&lt;/li&gt;
&lt;li&gt;Google 搜索分析会怎么工作（我们会在搜索分析中看到 &lt;code&gt;https://&lt;/code&gt; 吗？）&lt;/li&gt;
&lt;li&gt;我们搜索排名会下降吗？（最恐怖的）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有很多人都谈过他们转化成 &lt;code&gt;https://&lt;/code&gt; 的心得，但对我们却有点不一样。我们不是一个站点。我们是多个域名下的多个站点。我们不知道 Google 会怎么对待我们的网络。它会知道 &lt;code&gt;stackoverflow.com&lt;/code&gt; 和 &lt;code&gt;superuser.com&lt;/code&gt; 有关联吗？不知道。我们也不能指望 Google 来告诉我们这些。&lt;/p&gt;
&lt;p&gt;所以我们就做测试。在我们&lt;a href="https://meta.stackexchange.com/q/292058/135201"&gt;全网发布&lt;/a&gt; 中，我们测试了几个域名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://meta.stackexchange.com/"&gt;meta.stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.stackexchange.com/"&gt;security.stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://superuser.com/"&gt;superuser.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对，这些是 Samo 和我会了仔细讨论出来的结果，花了有三分钟那么久吧。Meta 是因为这是我们最重要的反馈网站。Security 站上有很多专家可能会注意到相关的问题，特别是 HTTPS 方面。最后一个，Super User，我们需要知道搜索对我们内容的影响。比起 meta 和 security 来说法，Super User 的流量要大得多。最重要的是，它有&lt;em&gt;来自 Google&lt;/em&gt; 的原生流量。&lt;/p&gt;
&lt;p&gt;我们一直在观察并评估搜索的影响，所以 Super User 上了之后其他网站过了很久才跟上。到目前为止我们能说的是：基本上没影响。搜索、结果、点击还有排名的周变化都在正常范围内。我们公司&lt;em&gt;依赖&lt;/em&gt;于这个流量，这对我们真的很重要。所幸，没有什么值得我们担心的点，我们可以继续发布。&lt;/p&gt;
&lt;h3 id="cuo-wu"&gt;错误&lt;/h3&gt;
&lt;p&gt;如果不提到我们搞砸的部分，这篇文章就还不够好。错误永远是个选择。让我们来总结一下这一路让我们后悔的事情：&lt;/p&gt;
&lt;h4 id="cuo-wu-xiang-dui-xie-yi-url"&gt;错误：相对协议 URL&lt;/h4&gt;
&lt;p&gt;如果你的一个资源有一个 URL 的话，一般来说你会看到一些 &lt;code&gt;http://example.com&lt;/code&gt; 或者 &lt;code&gt;https://example.com&lt;/code&gt; 之类的东西，包括我们图片的路径等等。另一个选项就是你可以使用 &lt;code&gt;//example.com&lt;/code&gt;。这被称为&lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Protocol-relative_URL"&gt;相对协议 URL&lt;/a&gt;。我们很早之前就在图片、JavaScript、CSS 等中这么用了（我们自有的资源，不是指用户提交）。几年后，我们发现这不是一个好主意，至少对我们来说不是。相对协议链接中的「相对」是&lt;em&gt;对于页面而言&lt;/em&gt;。当你在 &lt;code&gt;http://stackoverflow.com&lt;/code&gt; 时，&lt;code&gt;//example.com&lt;/code&gt; 指的是 &lt;code&gt;http://example.com&lt;/code&gt;；如果你在 &lt;code&gt;https://stackoverflow.com&lt;/code&gt; 时，就和 &lt;code&gt;https://example.com&lt;/code&gt; 等同。那么这个有什么问题呢？&lt;/p&gt;
&lt;p&gt;问题在于，图片 URL 不仅是用在页面中，它们还用在邮件、API 还有移动应用中。当我们理了一下路径结构然后在到处都使用图片路径时我们发现不对了。虽然这个变化极大降低了代码冗余，并且简化了很多东西，结果却是我们在邮件中使用了相对 URL。绝大多数邮件客户端都不能处理相对协议 URL 的图片。因为它们不知道是什么协议。Email 不是 &lt;code&gt;http://&lt;/code&gt; 也不是 &lt;code&gt;https://&lt;/code&gt;。只有你在浏览器里查看邮件，有可能是预期的效果。&lt;/p&gt;
&lt;p&gt;那该怎么办？我们把所有的地方都换成了 &lt;code&gt;https://&lt;/code&gt;。我把我们所有的路径代码统一到两个变量上：CDN 根路径，和对应特定站点的文件夹。例如 Stack Overflow 的样式表在 &lt;a href="https://cdn.sstatic.net/Sites/stackoverflow/all.css"&gt;&lt;code&gt;https://cdn.sstatic.net/Sites/stackoverflow/all.css&lt;/code&gt;&lt;/a&gt; 上（当然我们有缓存中断器），换成本地就是 &lt;code&gt;https://local.sstatic.net/Sites/stackoverflow/all.css&lt;/code&gt;。你能看出其中的共同点。通过拼接路径，逻辑简单了不少。则　通过强制 &lt;code&gt;https://&lt;/code&gt;，用户还可以在整站切换之前就享受 HTTP/2 的好处，因为所有静态资源都已经就位。都用 &lt;code&gt;https://&lt;/code&gt; 也表示我们可以在页面、邮件、移动还有 API 上使用&lt;strong&gt;同一个&lt;/strong&gt;属性。这种统一也意味着我们有一个固定的地方来处理所有路径&amp;mdash;&amp;mdash;我们到处都有缓存中断器。&lt;/p&gt;
&lt;p&gt;注意：如果你像我们一样中断缓存，比如 &lt;code&gt;https://cdn.sstatic.net/Sites/stackoverflow/all.css?v=070eac3e8cf4&lt;/code&gt;，请不要用构建号。我们的缓存中断使用的是文件的&lt;a href="https://en.wikipedia.org/wiki/Checksum"&gt;校验值&lt;/a&gt;，也就是说只有当文件真正变化的时候你才会下载一个新的文件。用构建号的话可能会稍微简单点，但同时也会对你的费用还有性能有所损伤。&lt;/p&gt;
&lt;p&gt;能做这个当然很好，可我们为什么不从一开始就做呢？因为 HTTPS 在那个时候性能还不行。用户通过 &lt;code&gt;https://&lt;/code&gt; 访问会比 &lt;code&gt;http://&lt;/code&gt;慢很多。举一个大一点的例子：我们上个月在 &lt;code&gt;sstatic.net&lt;/code&gt; 上收到了四百万个请求，总共有 94TB。如果 HTTPS 性能不好的话，这里累积下来的延迟就很可观了。不过因为我们上了 HTTP/2，以及设置好 CDN/代理层，性能的问题已经好很多了。对于用户来说更快了，对我们来说则更简单，何乐不为呢！&lt;/p&gt;
&lt;h4 id="cuo-wu-api-ji-internal"&gt;错误：API 及 .internal&lt;/h4&gt;
&lt;p&gt;当我们把代理架起来开始测试的时候发现了什么？我们忘了一件很重要的事，准确地说，我忘了一件很重要的事。我们在内部 API 里大量地使用了 HTTP。当然这个是正常工作的，只是它们变得更慢、更复杂、也更容易出问题了。&lt;/p&gt;
&lt;p&gt;比方说一个内部 API 需要访问 &lt;code&gt;stackoverflow.com/some-internal-route&lt;/code&gt;，之前，节点是这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始 app&lt;/li&gt;
&lt;li&gt;网关/防火墙（暴露给公网）&lt;/li&gt;
&lt;li&gt;本地负载均衡器&lt;/li&gt;
&lt;li&gt;目标 web 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是因为我们是可以解析 &lt;code&gt;stackoverflow.com&lt;/code&gt; 的，解析出来的 IP 就是我们的负载均衡器。当有代理的情况下，为了让用户能访问到最近的节点，他们访问到的是不同的 IP 和目标点。他们的 DNS 解析出来的 IP 是 CDN/代理层 (Fastly)。糟了，这意识着我们现在的路径是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始 app&lt;/li&gt;
&lt;li&gt;网关/防火墙（暴露给公网）&lt;/li&gt;
&lt;li&gt;我们的外部路由器&lt;/li&gt;
&lt;li&gt;运营商（多节点）&lt;/li&gt;
&lt;li&gt;代理（Cloudflare/Fastly）&lt;/li&gt;
&lt;li&gt;运营商（到我们的代理路）&lt;/li&gt;
&lt;li&gt;我们的外部路由器&lt;/li&gt;
&lt;li&gt;本地负载均衡器&lt;/li&gt;
&lt;li&gt;目标 web 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嗯，这个看起来更糟了。为了实现一个从 A 调用一下 B，我们多了很多不必要的依赖，同时性能也下降了。我不是说我们的代理很慢，只是原本只需要 1ms 就可以连到我们数据中心&amp;hellip;&amp;hellip;好吧，我们的代理很慢。&lt;/p&gt;
&lt;p&gt;我们内部讨论了多次如何用最简单的方法解决这个问题。我们可以把请求改成 &lt;code&gt;internal.stackoverflow.com&lt;/code&gt;，但是这会产生可观的修改（也许也会产生冲突）。我们也创建一个 DNS 来专门解析内部地址（但这样会产生通配符继承的问题）。我们也可以在内部把 &lt;code&gt;stackoverflow.com&lt;/code&gt; 解析成不同的地址（这被称为&lt;a href="https://en.wikipedia.org/wiki/Split-horizon_DNS"&gt;水平分割 DNS&lt;/a&gt;），但是这一来不好调试，二来在多数据中心的场景下不知道该到哪一个。&lt;/p&gt;
&lt;p&gt;最终，我们在所有暴露给外部 DNS 的域名后面都加了一个 &lt;code&gt;.internal&lt;/code&gt; 后续。比如，在我们的网络中，&lt;code&gt;stackoverflow.com.internal&lt;/code&gt; 会解析到我们的负载均衡器后面（DMZ）的一个内部子网内。我们这么做有几个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们可以在内部的 DNS 服务器里覆盖且包含一个顶级域名服务器（活动目录）&lt;/li&gt;
&lt;li&gt;当请求从 HAProxy 传到 web 应用中时，我们可以把 &lt;code&gt;.internal&lt;/code&gt; 从 &lt;code&gt;Host&lt;/code&gt; 头中移除（应用层无感知）&lt;/li&gt;
&lt;li&gt;如果我们需要内部到 DMZ 的 SSL，我们可以用一个类似的通配符组合&lt;/li&gt;
&lt;li&gt;客户端 API 的代码很简单（如果在域名列表中就加一个 &lt;code&gt;.internal&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们客户端的 API 代码是大部分是由 &lt;a href="https://twitter.com/marcgravell"&gt;Marc Gravell&lt;/a&gt; 写的一个 &lt;code&gt;StackExchange.Network&lt;/code&gt; 的 NuGet 库。对于每一个要访问的 URL，我们都用静态的方法调用（所以也就只有通用的获取方法那几个地方）。如果存在的话就会返回一个「内部化」URL，否则保持不变。这意味着一次简单的 NuGet 更新就可以把这个逻辑变化部署到所有应用上。这个调用挺简单的：&lt;/p&gt;
&lt;p&gt;# uri = SubstituteInternalUrl(uri);&lt;/p&gt;
&lt;p&gt;这里是 &lt;code&gt;stackoverflow.com&lt;/code&gt; DNS 行为的一个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fastly：151.101.193.69, 151.101.129.69, 151.101.65.69, 151.101.1.69&lt;/li&gt;
&lt;li&gt;直连（外部路由）：198.252.206.16&lt;/li&gt;
&lt;li&gt;内部：10.7.3.16&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记得我们之前提到的 &lt;a href="https://github.com/StackExchange/dnscontrol"&gt;dnscontrol&lt;/a&gt; 吗？我们可以用这个快速同步。归功于 JavaScript 的配置/定义，我们可以简单地共享、简化代码。我们匹配所有所有子网和所有数据中心中的所有 IP 的最后一个字节，所以用几个变量，所有 AD 和外部的 DNS 条目都对齐了。这也意味着我们的 HAProxy 配置更简单了，基本上就是这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stacklb::external::frontend_normal { 't1_http-in':
  section_name    =&amp;gt; 'http-in',
  maxconn         =&amp;gt; &lt;span class="nv"&gt;$t1_http_in_maxconn&lt;/span&gt;,
  inputs          =&amp;gt; {
    "&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;external_ip_base&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.16:80"  =&amp;gt; [ 'name stackexchange' ],
    "&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;external_ip_base&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.17:80"  =&amp;gt; [ 'name careers' ],
    "&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;external_ip_base&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.18:80"  =&amp;gt; [ 'name openid' ],
    "&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;external_ip_base&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.24:80"  =&amp;gt; [ 'name misc' ],
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;综上，API 路径更快了，也更可靠了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始 app&lt;/li&gt;
&lt;li&gt;本地负载均衡器（DMZ）&lt;/li&gt;
&lt;li&gt;目标 web 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们解决了几个问题，还剩下几百个等着我们。&lt;/p&gt;
&lt;h4 id="cuo-wu-301-huan-cun"&gt;错误：301 缓存&lt;/h4&gt;
&lt;p&gt;在从 &lt;code&gt;http://&lt;/code&gt; 301 跳到 &lt;code&gt;https://&lt;/code&gt; 时有一点我们没有意识的是，Fastly 缓存了我们的返回值。在 Fastly 中，&lt;a href="https://docs.fastly.com/guides/vcl/manipulating-the-cache-key"&gt;默认的缓存键&lt;/a&gt;并不考虑协议。我个人不同意这个行为，因为在源站默认启用 301 跳转会导致无限循环。这个问题是这样造成的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户访问 &lt;code&gt;http://&lt;/code&gt; 上的一个网络&lt;/li&gt;
&lt;li&gt;通过 301 跳转到了 &lt;code&gt;https://&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fastly 缓存了这个跳转&lt;/li&gt;
&lt;li&gt;任意一个用户（包括 #1 中的那个）以 &lt;code&gt;https://&lt;/code&gt; 访问同一个页面&lt;/li&gt;
&lt;li&gt;Fastly 返回一个跳至 &lt;code&gt;https://&lt;/code&gt; 的 301，尽量你已经在这个页面上了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这就是为什么我们会有无限循环。要解决这个问题，我们得关掉 301，清掉 Fastly 缓存，然后开始调查。Fastly &lt;a href="https://docs.fastly.com/guides/vcl/manipulating-the-cache-key#purging-adjustments-when-making-additions-to-cache-keys"&gt;建议我们在 vary 中加入 &lt;code&gt;Fastly-SSL&lt;/code&gt;&lt;/a&gt;，像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sub vcl_fetch {
  set beresp.http.Vary = if(beresp.http.Vary, beresp.http.Vary ",", "") "Fastly-SSL";
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在我看来，这应该是默认行为。&lt;/p&gt;
&lt;p&gt;错误：帮助中心的小插曲&lt;/p&gt;
&lt;p&gt;记得我们必须修复的帮助文档吗？帮助文档都是按语言区分，只有极少数是按站点来分，所以本来它们是可以共享的。为了不产生大量重复代码及存储结构，我们做了一点小小的处理。我们把实际上的帖子对象（和问题、答案一样）存在了&amp;nbsp;&lt;code&gt;meta.stackexchange.com&lt;/code&gt;&amp;nbsp;或者是这篇帖子关联的站点中。我们把生成的&amp;nbsp;&lt;code&gt;HelpPost&lt;/code&gt;&amp;nbsp;存在中心的&amp;nbsp;&lt;code&gt;Sites&lt;/code&gt;&amp;nbsp;数据库里，其实也就是生成的 HTML。在处理混合内容的时候，我们也处理了单个站里的帖子，简单吧！&lt;/p&gt;
&lt;p&gt;当原始的帖子修复后，我们只需要为每个站点去再生成 HTML 然后填充回去就行了。但是这个时候我犯了个错误。回填的时候拿的是&lt;em&gt;当前站点&lt;/em&gt;（调用回填的那个站点），而不是原始站。这导致&amp;nbsp;&lt;code&gt;meta.stackexchange.com&lt;/code&gt;&amp;nbsp;里的 12345 帖子被&amp;nbsp;&lt;code&gt;stackoverflow.com&lt;/code&gt;&amp;nbsp;里的 12345 帖子所替代。有的时候是答案、有的时候是问题，有的时候有一个 tag wiki。这也导致了一些&lt;a href="https://meta.stackoverflow.com/q/345280/13249"&gt;很有意思的帮助文档&lt;/a&gt;。这里有一些&lt;a href="https://meta.stackoverflow.com/a/345282/13249"&gt;相应的后果&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我只能说，还好修复的过程挺简单的：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-HelpCommit.png"&gt;&lt;img alt="Me being a dumbass" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/HTTPS-HelpCommit.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再一次将数据填充回去就能修复了。不过怎么说，这个当时算是在公共场合闹了个笑话。抱歉。&lt;/p&gt;
&lt;h3 id="kai-yuan_1"&gt;开源&lt;/h3&gt;
&lt;p&gt;这里有我们在这个过程中产出的项目，帮助我们改进了 HTTPS 部署的工作，希望有一天这些能拯救世界吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/StackExchange/blackbox"&gt;BlackBox&lt;/a&gt;&amp;nbsp;（在版本控制中安全存储私密信息）作者&amp;nbsp;&lt;a href="https://twitter.com/yesthattom"&gt;Tom Limoncelli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/StackExchange/capnproto-net"&gt;capnproto-net&lt;/a&gt;（不再支持 &amp;mdash;&amp;mdash; .NET 版本的&amp;nbsp;&lt;a href="https://capnproto.org/"&gt;Cap&amp;rsquo;n Proto&lt;/a&gt;）作者&amp;nbsp;&lt;a href="https://twitter.com/marcgravell"&gt;Marc Gravell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/StackExchange/dnscontrol"&gt;DNSControl&lt;/a&gt;（控制多个 DNS 提供商）作者&amp;nbsp;&lt;a href="https://twitter.com/captncraig"&gt;Craig Peterson&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href="https://twitter.com/yesthattom"&gt;Tom Limoncelli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/StackExchange/httpunit"&gt;httpUnit&lt;/a&gt;&amp;nbsp;（网站集成测试） 作者&amp;nbsp;&lt;a href="https://twitter.com/mjibson"&gt;Matt Jibson&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href="https://twitter.com/yesthattom"&gt;Tom Limoncelli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/opserver/Opserver"&gt;Opserver&lt;/a&gt;&amp;nbsp;（支持 Cloudflare DNS） 作者&amp;nbsp;&lt;a href="https://twitter.com/Nick_Craver"&gt;Nick Craver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alienth/fastlyctl"&gt;fastlyctl&lt;/a&gt;（Go 语言的 Fastly API 调用）作者&amp;nbsp;&lt;a href="https://twitter.com/alioth"&gt;Jason Harvey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alienth/fastly-ratelimit"&gt;fastly-ratelimit&lt;/a&gt;（基于 Fastly syslog 流量的限流方案）作者&amp;nbsp;&lt;a href="https://twitter.com/alioth/"&gt;Jason Harvey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="xia-yi-bu"&gt;下一步&lt;/h3&gt;
&lt;p&gt;我们的工作并没有做完。接下去还有一此要做的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们要修复我们聊天域名下的混合内容，如&amp;nbsp;&lt;a href="https://chat.stackoverflow.com/"&gt;chat.stackoverflow.com&lt;/a&gt;，这里有用户嵌入的图片等&lt;/li&gt;
&lt;li&gt;如果可能的话，我们把所有适用的域名加进&amp;nbsp;&lt;a href="https://hstspreload.org/"&gt;Chrome HSTS 预加载列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我们要评估&amp;nbsp;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning"&gt;HPKP&lt;/a&gt;&amp;nbsp;以及我们是否想部署（这个很危险，目前我们倾向于不部署）&lt;/li&gt;
&lt;li&gt;我们需要把聊天移到&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;我们需要把所有的 cookies 迁移成安全模式&lt;/li&gt;
&lt;li&gt;我们在等能支持 HTTP/2 的 HAProxy 1.8（大概在九月出来）&lt;/li&gt;
&lt;li&gt;我们需要利用 HTTP/2 的推送（我会在六月与 Fastly 讨论这件事情&amp;mdash;&amp;mdash;他们还现在不支持跨域名推送）&lt;/li&gt;
&lt;li&gt;我们需要把 301 行为从 CDN/代理移出以达到更好的性能（需要按站点发布）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HSTS 预加载&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HSTS&lt;/a&gt;&amp;nbsp;指的是「HTTP 严格传输安全」。OWASP 在&lt;a href="https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet"&gt;这里&lt;/a&gt;有一篇很好的总结。这个概念其实很简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你访问&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;页面的时候，我们给你发一个这样的头部：&lt;code&gt;Strict-Transport-Security: max-age=31536000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在这个时间内（秒），你的浏览器只会通过&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;访问这个域名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哪怕你是点击一个&amp;nbsp;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;的链接，你的浏览器也会&lt;em&gt;直接&lt;/em&gt;跳到&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;。哪怕你有可能已经设置了一个&amp;nbsp;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;的跳转，但你的浏览器不会访问，它会直接访问 SSL/TLS。这也避免了用户访问不安全的&amp;nbsp;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;而遭到劫持。比如它可以把你劫持到一个&amp;nbsp;&lt;code&gt;https://stack&amp;lt;长得很像o但实际是个圈的unicode&amp;gt;verflow.com&lt;/code&gt;&amp;nbsp;上，那个站点甚至有可能部好了 SSL/TLS 证书。只有不访问这个站点才是安全的。&lt;/p&gt;
&lt;p&gt;但这需要我们至少访问一次站点，然后才能有这个头部，对吧？对。所以我们有&amp;nbsp;&lt;a href="https://hstspreload.org/"&gt;HSTS 预加载&lt;/a&gt;，这是一个域名列表，随着所有主流浏览器分发且由它们预加载。也就是说它们在第一次访问的时候就会跳到&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;去，所以&lt;strong&gt;永远不会&lt;/strong&gt;有任何&amp;nbsp;&lt;code&gt;http://&lt;/code&gt;&amp;nbsp;通信。&lt;/p&gt;
&lt;p&gt;很赞吧！所以要怎么才能上这个列表呢？这里是要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要有一个有效的证书&lt;/li&gt;
&lt;li&gt;如果你监听 80 端口的话，HTTP 应该跳到同一个主机的 HTTPS 上&lt;/li&gt;
&lt;li&gt;所有子域名都要支持 HTTPS&lt;/li&gt;
&lt;li&gt;特别是如果有 DNS 纪录的话，www 子域名要支持 HTTPS&lt;/li&gt;
&lt;li&gt;主域名的 HSTS 头必要满足如下条件：&lt;/li&gt;
&lt;li&gt;max-aget 至少得是十八周（10886400 秒）&lt;/li&gt;
&lt;li&gt;必须有 includeSubDomains 指令&lt;/li&gt;
&lt;li&gt;必须指定 preload 指令&lt;/li&gt;
&lt;li&gt;如果你要跳转到 HTTPS 站点上，跳转也必须有 HSTS 头部（而不仅仅是跳过去的那个页面）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这听起来还行吧？我们所有的活跃域名都支持 HTTPS 并且有有效的证书了。不对，我们还有一个问题。记得我们有一个&amp;nbsp;&lt;code&gt;meta.gaming.stackexchange.com&lt;/code&gt;&amp;nbsp;吧，虽然它跳到&amp;nbsp;&lt;code&gt;gaming.meta.stackexchange.com&lt;/code&gt;，但这个跳转本身并没有有效证书。&lt;/p&gt;
&lt;p&gt;以 meta 为例，如果我们在 HSTS 头里加入&amp;nbsp;&lt;code&gt;includeSubDomains&lt;/code&gt;&amp;nbsp;指令，那么网上所有指向旧域名的链接都会踩坑。它们本该跳到一个&amp;nbsp;&lt;code&gt;http:///&lt;/code&gt;&amp;nbsp;站点上（现在是这样的），一旦改了就会变成一个非法证书错误。昨天我们看了一下流量日志，每天仍有 8 万次访问的是通过 301 跳到 meta 子域上的。这里有很多是爬虫，但还是有不少人为的流量是从博客或者收藏夹过来的&amp;hellip;&amp;hellip;而有些爬虫真的很蠢，从来不根据 301 来更新他们的信息。嗯，你还在看这篇文章？我自己写着写着都已经睡着 3 次了。&lt;/p&gt;
&lt;p&gt;我们该怎么办呢？我们是否要启用 SAN 证书，加入几百个域名，然后调整我们的基础架构使得 301 跳转也严格遵守 HTTPS 呢？如果要通过 Fastly 来做的话就会提升我们的成本（需要更多 IP、证书等等）。&lt;a href="https://letsencrypt.org/"&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;&amp;nbsp;&lt;em&gt;倒是&lt;/em&gt;真的能帮上点忙。获取证书的成本比较低，如果你不考虑设置及维护的人力成本的话（因为我们由于&lt;a href="#certificates"&gt;上文所述&lt;/a&gt;内容并没有在使用它).&lt;/p&gt;
&lt;p&gt;还有一块是上古遗留问题：我们内部的域名是&amp;nbsp;&lt;code&gt;ds.stackexchange.com&lt;/code&gt;。为什么是&amp;nbsp;&lt;code&gt;ds.&lt;/code&gt;？我不确定。我猜可能是我们不知道怎么拼 data center 这个词。这意味着&amp;nbsp;&lt;code&gt;includeSubDomains&lt;/code&gt;&amp;nbsp;会自动包含&lt;em&gt;所有内部终端&lt;/em&gt;。虽然我们大部分都已经上了&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;，但是如果什么都走 HTTPS 会导致一些问题，也会带来一定延时。不是说我们不想在内部也用&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;，只不过这是一个整体的项目（大部分是证书分发和维护，还有多级证书），我们不想增加耦合。那为什么不改一下内部域名呢？主要还是时间问题，这一动迁需要大量的时间和协调。&lt;/p&gt;
&lt;p&gt;目前，我们将 HSTS 的&amp;nbsp;&lt;code&gt;max-age&lt;/code&gt;&amp;nbsp;设为两年，并且&lt;strong&gt;不包括&lt;/strong&gt;&amp;nbsp;&lt;code&gt;includeSubDomains&lt;/code&gt;。除非迫不得以，我不会从代码里移除这个设定，因为它太危险了。一旦我们把所有 Q&amp;amp;A 站点的 HSTS 时间都设置好之后，我们会和 Google 聊一下是不是能在不加&amp;nbsp;&lt;code&gt;includeSubDomains&lt;/code&gt;&amp;nbsp;的情况下把我们加进 HSTS 列表中，至少我们会试试看。你可以看到，虽然很罕见，但&lt;a href="https://chromium.googlesource.com/chromium/src/net/+/master/http/transport_security_state_static.json"&gt;目前的这份列表中&lt;/a&gt;还是出现了这种情况的。希望从加强 Stack Overflow 安全性的角度，他们能同意这一点。&lt;/p&gt;
&lt;p&gt;聊天&lt;/p&gt;
&lt;p&gt;为了尽快启用&amp;nbsp;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Secure_and_HttpOnly_cookies"&gt;&lt;code&gt;安全&lt;/code&gt;&amp;nbsp;cookie&lt;/a&gt;（仅在 HTTPS 下发送），我们会将聊天（&lt;a href="https://chat.stackoverflow.com/"&gt;chat.stackoverflow.com&lt;/a&gt;、[&lt;a href="http://chat.stackexchange.com/"&gt;chat.stackexchange.com&lt;/a&gt;及&amp;nbsp;&lt;a href="https://chat.meta.stackexchange.com/"&gt;chat.meta.stackexchange.com&lt;/a&gt;）跳转至&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;。 正如我们的通用登录所做的那样，聊天会依赖于二级域名下的 cookie。如果 cookie 仅在&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;下发送，你就只能在&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;下登录。&lt;/p&gt;
&lt;p&gt;这一块有待斟酌，但其实在有混合内容的情况下将聊天迁至&amp;nbsp;&lt;code&gt;https://&lt;/code&gt;&amp;nbsp;是一件好事。我们的网络更加安全了，而我们也可以处理实时聊天中的混合内容。希望这个能在接下去的一两周之内实施，这在我的计划之中。&lt;/p&gt;
&lt;p&gt;今天&lt;/p&gt;
&lt;p&gt;不管怎么说，这就是我们今天到达的地步，也是我们过去四年中一直在做的事情。确实有很多更高优先级的事情阻挡了 HTTPS 的脚步&amp;mdash;&amp;mdash;这也远远不是我们唯一在做的事情。但这就是生活。做这件事情的人们还在很多你们看不见的地方努力着，而涉及到的人也远不止我所提到的这些。在这篇文章中我只提到了一些花了我们很多时间的、比较复杂的话题（否则就会太长了），但是这一路上不管是 Stack Overflow 内部还是外部都有很多人帮助过我们。&lt;/p&gt;
&lt;p&gt;我知道你们会有很多的疑问、顾虑、报怨、建议等等。我们非常欢迎这些内容。本周我们会关注底下的评论、我们的 meta 站、Reddit、Hacker News 以及 Twitter，并尽可能地回答/帮助你们。感谢阅读，能全文读下的来真是太棒了。（比心）&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/09/https-on-stack-overflow/"&gt;https://blog.alswl.com/2017/09/https-on-stack-overflow/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">罗晟, alswl</dc:creator><pubDate>Wed, 27 Sep 2017 12:07:44 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2017-09-27:2017/09/https-on-stack-overflow/</guid><category>译文</category><category>HTTPS</category></item><item><title>一个关于 nolock 的故事</title><link>https://blog.alswl.com/2017/09/sql-server-nolock/</link><description>&lt;p&gt;&lt;img alt="sql-server.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/sql-server.png"/&gt;&lt;/p&gt;
&lt;p&gt;加入沪江不久，我就被扔到一个将集团 SQL Sever 的数据库迁移到 MySQL 的项目里，
同时伴随进行的还有 .net 系统迁移到 Java 系统。
在这个过程中我发现了一个很有趣的现象：历史遗留的 .net 项目中，
几乎所有的 SQL 中都会使用一个关键字：&lt;code&gt;nolock&lt;/code&gt;。
这让我很困惑，&lt;code&gt;nolock&lt;/code&gt; 的字面意思是对当前技术不使用锁技术，为什么要这样用呢？&lt;/p&gt;

&lt;p&gt;我找了一个范例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dbo&lt;/span&gt;&lt;span class="p"&gt;].[&lt;/span&gt;&lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nolock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt;  &lt;span class="n"&gt;aField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; 
       &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;bField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作为横向支持工程师，开发工程师会问我：「数据库即将从 SQL Server
迁移到 MySQL，我们编码中还需要使用 &lt;code&gt;nolock&lt;/code&gt; 么？
MySQL 里面对应的写法是什么？」。
我并没有 SQL Server 的生产环境使用经验，一时间无法回答。
于是课后做相关知识学习，这里就是这次学习的一点成果。&lt;/p&gt;
&lt;p&gt;这个问题将被拆解成三个小问题进行回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nolock&lt;/code&gt; 是什么？&lt;/li&gt;
&lt;li&gt;为什么会需要在每个 Query 语句使用 &lt;code&gt;nolock&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;MySQL 的对应写法是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们一个一个来看。&lt;/p&gt;
&lt;h2 id="di-yi-ge-wen-ti-nolock-shi-shi-yao"&gt;第一个问题：nolock 是什么？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nolock&lt;/code&gt; 是 SQL Server 的一个关键字，这类关键字官方将其称之为 Hints。
Hints 的设计目的是为了能够让 SQL 语句在运行时，动态修改查询优化器的行为。
在语法上，Hints 以 &lt;code&gt;WITH&lt;/code&gt; 开头。除了 &lt;code&gt;WITH(nolock)&lt;/code&gt;，
还有 &lt;code&gt;TABLOCK&lt;/code&gt; / &lt;code&gt;INDEX&lt;/code&gt; / &lt;code&gt;ROWLOCK&lt;/code&gt; 等常见的 Hints。&lt;/p&gt;
&lt;p&gt;让我们仔细看看 MSDN 文档上的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;nolock&lt;/code&gt; 的作用等同于 &lt;code&gt;READUNCOMMITTED&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;READUNCOMMITTED&lt;/code&gt; 这是一种 RDBMS 隔离级别。
使用 &lt;code&gt;nolock&lt;/code&gt; 这个关键词，可以将当前查询语句隔离级别调整为 &lt;code&gt;READ UNCOMMITTED&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;计算机基础好的同学，应该对 &lt;code&gt;READUNCOMMITTED&lt;/code&gt; 这个关键词还有印象。
而基础不扎实的同学，也许只是觉得这个关键词眼熟，但是讲不清楚这是什么。
如果阅读这句话完全没有理解困难，那恭喜你，你可以直接跳到下一节了。
其他朋友就跟随我继续探索一下 RDMBS 的世界，复习一下隔离级别相关的知识。&lt;/p&gt;
&lt;h3 id="ge-chi-ji-bie"&gt;隔离级别&lt;/h3&gt;
&lt;p&gt;SQL 92 定义了四个隔离级别
（&lt;a href="https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels"&gt;Isolation (database systems) - Wikipedia&lt;/a&gt;），
其隔离程度由高到低是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可序列化（Serializable）&lt;/li&gt;
&lt;li&gt;可重复读（Repeatable reads）&lt;/li&gt;
&lt;li&gt;提交读（Read committed）&lt;/li&gt;
&lt;li&gt;未提交读（Read uncommitted）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单单将这几个技术名词简单地罗列出来并没有什么意义，还有这几个问题需要搞清楚：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隔离级别解决什么问题？&lt;/li&gt;
&lt;li&gt;为什么存在多种隔离级别？&lt;/li&gt;
&lt;li&gt;我们所谓的隔离级别从高到低，是什么含义，如何逐层降低的？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先是「隔离级别解决什么问题？」，
用通俗的语言描述就是：加一个针对数据资源的锁，从而保证数据操作过程中的一致性。&lt;/p&gt;
&lt;p&gt;这是最简单的实现方式，过于粗暴的隔离性将大幅降低性能，
多种隔离级别就是是为了取得两者的平衡。&lt;/p&gt;
&lt;p&gt;接下来我们来回答第二个问题「为什么存在多种粒度的隔离级别？」
这其实是一个需求和性能逐步平衡的过程，&lt;/p&gt;
&lt;p&gt;我们逐层递进，将隔离级别由低到高逐层面临进行分析。&lt;/p&gt;
&lt;h4 id="read-uncommitted"&gt;Read Uncommitted&lt;/h4&gt;
&lt;p&gt;Read Uncommitted 这个隔离级别是最低粒度的隔离级别，
如同它的名字一般，它允许在操作过程中不会锁，从而让当前事务读取到其他事务的数据。&lt;/p&gt;
&lt;p&gt;&lt;img alt="read-uncommitted.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/read-uncommitted.png"/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，在 Transaction 2 查询时候，Transaction 1 未提交的数据就已经对外暴露。
如果 Transaction 1 最后 Rollback 了，那么 Transaction 读取的数据就是错误的。&lt;/p&gt;
&lt;p&gt;「读到了其他事务修改了但是未提交的数据」即是&lt;strong&gt;脏读&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="read-committed_1"&gt;Read Committed&lt;/h3&gt;
&lt;p&gt;想要避免脏读，最简单的方式就是在事务更新操作上加一把写锁，
其他事务需要读取数据时候，需要等待这把写锁释放。&lt;/p&gt;
&lt;p&gt;&lt;img alt="read-committed-1.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/read-committed-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，Transaction 1 在写操作时候，对数据 A 加了写锁，
那么 Transaction 2 想要读取 A，就必须等待这把锁释放。
这样就避免当前事务读取其他事务的未提交数据。&lt;/p&gt;
&lt;p&gt;但是除了脏读，一致性的要求还需要「可重复读」，即
「在一个事务内，多次读取的特定数据都必须是一致的
（即便在这过程中该数据被其他事务修改）」。&lt;/p&gt;
&lt;p&gt;&lt;img alt="read-committed-2.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/read-committed-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;上图就是没能保证「可重复度」，Transaction 2 第一次读取到了数据 A，
然后 Transaction 1 对数据 A 更新到 A'，那么当 Tranction 2 再次读取 A 时候，
它本来期望读到 A，但是却读到了 A'，这和它的预期不相符了。
解决这个问题，就需要提升隔离级别到「Repeatable Read」。&lt;/p&gt;
&lt;h3 id="repeatable-read"&gt;Repeatable Read&lt;/h3&gt;
&lt;p&gt;这个名字非常容易理解，即保障在一个事务内重复读取时，
始终能够读取到相同的内容。来看图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="repeatable-read.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/repeatable-read.png"/&gt;&lt;/p&gt;
&lt;p&gt;如上所示，当 Transation 2 读取 A 时候，会同时加上一把 Read Lock，
这把锁会阻止 Transaction 1 将 A 更新为 A'，Transaction 1 要么选择等待，
要么就选择结束。&lt;/p&gt;
&lt;p&gt;当我们将隔离级别升到这里是，似乎已经完美无缺了。
不管是写入还是读取，我们都可以保证数据的一致性不被破坏。
但是其实还有漏洞：新增数据的一致性！&lt;/p&gt;
&lt;p&gt;上述的三个隔离级别，都是对特定的一行数据进行加锁，
那假如将要更新的数据还没有写入数据库，如何进行加锁呢？
比如自增表的新键，或者现有数据内的空缺 Key？&lt;/p&gt;
&lt;p&gt;&lt;img alt="repeatable-read-2.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/repeatable-read-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;如图所示，在上述操作中，Transaction 2 查询了一个范围 Range 之后，Transaction 1
在这个范围内插入了一条新的数据。此时 Transaction 2 再次进行范围查询时候，
会发现查询到的 Range 和上次已经不一样了，多了一个 newA。&lt;/p&gt;
&lt;p&gt;这就是最高隔离级别才能解决的「幻影读」：
当两个完全相同的查询语句执行得到不同的结果集，
这常常在范围查询中出现。&lt;/p&gt;
&lt;h3 id="serializable"&gt;Serializable&lt;/h3&gt;
&lt;p&gt;从字面意思看，该隔离级别需要将被操作的数据加锁加一把锁。
任何读写操作都需要先获得这把锁才能进行。如果操作中带 WHERE 条件，
还需要将 WHERE 条件相关的范围全部加锁。&lt;/p&gt;
&lt;p&gt;&lt;img alt="serializable.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/serializable.png"/&gt;&lt;/p&gt;
&lt;p&gt;如图所示，在 Transaction 2 操作过程中，会对 Range 进行加锁，
此时其他事务无法操作其中的数据，只能等待或者放弃。&lt;/p&gt;
&lt;h3 id="db-de-mo-ren-ge-chi-ji-bie"&gt;DB 的默认隔离级别&lt;/h3&gt;
&lt;p&gt;现在我们已经理解了隔离级别，那么「SQL Server 默认使用的隔离级别是什么呢？」
根据 &lt;a href="https://msdn.microsoft.com/en-us/library/ms175909.aspx"&gt;Customizing Transaction Isolation Level&lt;/a&gt;
这个文档描述，SQL Server 默认隔离级别是 READ COMMITTED。&lt;/p&gt;
&lt;p&gt;MySQL InnoDB 的默认隔离级别可以在 &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html"&gt;MySQL :: MySQL 5.7 Reference Manual :: 14.5.2.1 Transaction Isolation Levels&lt;/a&gt;
查询到，是 Read-Repeatable。&lt;/p&gt;
&lt;p&gt;隔离级别并没有最好之说，越高隔离级别会导致性能降低。
隔离级别的设定需要考虑业务场景。&lt;/p&gt;
&lt;h2 id="di-er-ge-wen-ti-wei-shi-yao-yao-shi-yong-nolock_1"&gt;第二个问题：为什么要使用 nolock？&lt;/h2&gt;
&lt;p&gt;我们已经知道 &lt;code&gt;nolock&lt;/code&gt; 的作用是动态调整隔离级别。
那为什么在 SQL Server 的 Query 操作中，需要启用 &lt;code&gt;nolock&lt;/code&gt; 呢？
我问了几个工程师，他们都语焉不详，或者是很泛泛地说：禁用读写锁，可以提升查询性能。&lt;/p&gt;
&lt;p&gt;此时我产生了困惑：「那么此时的数据一致性就不需要考虑了么？
我们的数据库，已经到了需要禁用锁的程度来进行优化了么？」
我于是自己去探索，想知道为何广泛使用 &lt;code&gt;nolock&lt;/code&gt; 会成为一个「最佳实践」？&lt;/p&gt;
&lt;p&gt;由于时代久远，我只能追述到一些相关信息，比如
&lt;a href="https://blogs.msdn.microsoft.com/sqlcat/2013/09/16/top-10-sql-server-integration-services-best-practices/"&gt;Top 10 SQL Server Integration Services Best Practices | SQL Server Customer Advisory Team&lt;/a&gt;
中提到 「Use the NOLOCK or TABLOCK hints to remove locking overhead.」
但这个是针对于 SSIS 查询器，并不是针对业务内部使用。
反而能找到一大堆的文档，在反对使用 &lt;code&gt;nolock&lt;/code&gt; 这个关键字。&lt;/p&gt;
&lt;p&gt;继续追查下去，还从蛛丝马迹中寻找到一个使用 &lt;code&gt;nolock&lt;/code&gt; 的理由，
SQL Server 默认是 Read Committed，
更新操作会产生排它锁，会 block 这个资源的查询操作，
已插入但未提交的数据主键也会产生一个共享锁，
而此时则会 block 这张表的全表查询和 Insert 操作。
为了避免 Insert 被 Block，就会推荐使用 &lt;code&gt;nolock&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了验证这是原因，我做一些 &lt;code&gt;nolock&lt;/code&gt; 测试。&lt;/p&gt;
&lt;h3 id="nolock-ce-shi"&gt;nolock 测试&lt;/h3&gt;
&lt;p&gt;检查当前 SQL Server 隔离级别，确认隔离级别是默认的 Read Committed：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;transaction_isolation_level&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'Unspecified'&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'ReadUncommitted'&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'ReadCommitted'&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'Repeatable'&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'Serializable'&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'Snapshot'&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION_ISOLATION_LEVEL&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dm_exec_sessions&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;session_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt;&lt;span class="n"&gt;SPID&lt;/span&gt;

&lt;span class="c1"&gt;-- ReadCommitted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建表，初始化数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;id&lt;/span&gt;    &lt;span class="nb"&gt;BIGINT&lt;/span&gt;    &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;NCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;clustered&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Transaction 1 中发起 Update 操作（INSERT / DELETE 同理），但是并不做 Commit 提交：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;开启一个新的 Session，发起全表查询和新增 PK 查询操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不出所料，此时查询果然会被 Block 住。&lt;/p&gt;
&lt;h3 id="mvcc"&gt;MVCC&lt;/h3&gt;
&lt;p&gt;并发控制的手段有这些：封锁、时间戳、乐观并发控制、悲观并发控制。
SQL Server 在 2015 后，引入了 MVCC（多版本控制）。
如果最终数据是一致，会允许数据写入，否则其他事务会被阻止写入。
那么 MVCC 引入是否可以解决 Insert 数据的锁问题？
同样，我做了以下测试：&lt;/p&gt;
&lt;p&gt;查询 SQL Server 使用启用 MVCC ALLOW_SNAPSHOT_ISOLATION：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snapshot_isolation_state&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;databases&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 T-SQL 启用测试表的 SNAPSHOT_ISOLATION：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;HJ_Test3D&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;ALLOW_SNAPSHOT_ISOLATION&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着重复上面里面的 Insert 试验，依然被 Block 住。
看来 MVCC 并不能解决 Insert 锁的问题。&lt;/p&gt;
&lt;h3 id="sql-server-2005-zhi-hou-huan-xu-yao-shi-yong-nolock-yao"&gt;SQL Server 2005 之后还需要使用 nolock 么？&lt;/h3&gt;
&lt;p&gt;从官方文档和上文测试可以看到，在 Insert 时候，由于排它锁的存在，
会导致 &lt;code&gt;SELECT ALL&lt;/code&gt; 以及 &lt;code&gt;SELECT&lt;/code&gt; 新插入数据的相关信息被锁住。
在这两种情景下面是需要使用 &lt;code&gt;nolock&lt;/code&gt; 的。&lt;/p&gt;
&lt;p&gt;除此之外，有这么几类场景可以使用 &lt;code&gt;nolock&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 SSIS 查询器中进行数据分析，不需要精准数据&lt;/li&gt;
&lt;li&gt;历史数据进行查询，没有数据更新操作，也不会产生脏数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要思考一下，性能和数据一致性上的权衡上，
我们是否愿意放弃数据一致性而为了提高一丝丝性能？
以及我们有多少场景，会频繁使用 &lt;code&gt;SELECT ALL&lt;/code&gt; 操作而没有查询条件？&lt;/p&gt;
&lt;p&gt;微软官方在 2015 的特性列表里面，明确地指出 &lt;code&gt;nolock&lt;/code&gt; 特性未来会在某个版本被废除：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Specifying NOLOCK or READUNCOMMITTED in the FROM clause of an UPDATE or DELETE statement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而改为推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove the NOLOCK or READUNCOMMITTED table hints from the FROM clause.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事实上，我听过不少团队会禁止在生产环境使用不带 WHERE 条件的 SQL。
那在这种模式下，产生相关的问题的几率也就更小了。
如果有很高的并发需求，那需要考虑一下是否需要其他优化策略：比如使用主从分离、
Snapshot 导出、流式分析等技术。&lt;/p&gt;
&lt;h2 id="di-san-ge-wen-ti-mysql-de-dui-ying-xie-fa-shi-shi-yao_1"&gt;第三个问题：MySQL 的对应写法是什么？&lt;/h2&gt;
&lt;p&gt;终于轮到 MySQL 的讨论了。MySQL，InnoDB 天生支持 MVCC，
并且支持 &lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt; &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-auto-increment-handling.html"&gt;AUTO_INCREMENT Handling in InnoDB&lt;/a&gt;。
这样可以避免 Insert 操作锁住全局 Select 操作。
只有在同时 Insert 时候，才会被 Block 住。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt; 支持几种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;innodb_autoinc_lock_mode = 0 (&amp;ldquo;traditional&amp;rdquo; lock mode)&lt;ul&gt;
&lt;li&gt;涉及auto-increment列的插入语句加的表级AUTO-INC锁，只有插入执行结束后才会释放锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;innodb_autoinc_lock_mode = 1 (&amp;ldquo;consecutive&amp;rdquo; lock mode)&lt;ul&gt;
&lt;li&gt;可以事先确定插入行数的语句，分配连续的确定的 auto-increment 值&lt;/li&gt;
&lt;li&gt;对于插入行数不确定的插入语句，仍加表锁&lt;/li&gt;
&lt;li&gt;这种模式下，事务回滚，auto-increment 值不会回滚，换句话说，自增列内容会不连续&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;innodb_autoinc_lock_mode = 2 (&amp;ldquo;interleaved&amp;rdquo; lock mode)&lt;ul&gt;
&lt;li&gt;同一时刻多条 SQL 语句产生交错的 auto-increment 值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里也做了相应的测试。首先检查数据库隔离级别和 &lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt; 模式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt;&lt;span class="k"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tx_isolation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt;&lt;span class="k"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tx_isolation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt;&lt;span class="n"&gt;tx_isolation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'innodb_autoinc_lock_mode'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检查后发现都是 Repeatable Read，&lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt; 模式是 1。
然后创建测试表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;InnoDB&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="n"&gt;CHARSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Transaction 1 中 Insert 数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Transaction 2 中 Select 数据，可以正常查询：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt;   &lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Transaction 2 中 Insert 数据，会被 Block 住：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个测试可以证明 MySQL 可以在 &lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt;=1 下，
Insert 同时 Query 不会被 Block，
但是在另外一个事务中 Insert 会被 Block。
结论是，由于 &lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt; 的存在，MySQL 中可以不需要使用 &lt;code&gt;nolock&lt;/code&gt;
关键词进行查询。&lt;/p&gt;
&lt;h2 id="hui-gu-yi-xia"&gt;回顾一下&lt;/h2&gt;
&lt;p&gt;本文着重去回答这么几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要用 &lt;code&gt;noloc&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;为什么要改变隔离级别？&lt;/li&gt;
&lt;li&gt;为什么 MySQL 不需要做类似的事情？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然只凑足了三个 「为什么」 的排比，
但是聪明的读者仍然会发现，我是使用了著名的
&lt;a href="https://zh.wikipedia.org/wiki/%E4%BA%94%E4%B8%AA%E4%B8%BA%E4%BB%80%E4%B9%88"&gt;五个为什么&lt;/a&gt;
方法思考问题。
通过使用这个方法，我们最后不但打破了老旧的最佳实践，还了解了本质原理，
并找到了新的最佳实践。&lt;/p&gt;
&lt;p&gt;希望读者朋友在遇到困难时候，多问几个为什么，多抱着打破砂锅问到底的精神，
这样才能让每个困难成为我们成长的垫脚石。&lt;/p&gt;
&lt;h2 id="xiang-guan-zi-liao"&gt;相关资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/%E4%BA%8B%E5%8B%99%E9%9A%94%E9%9B%A2"&gt;事务隔离 - 维基百科，自由的百科全书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/hints-transact-sql-table"&gt;Table Hints (Transact-SQL) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/snapshot-isolation-in-sql-server"&gt;Snapshot Isolation in SQL Server | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-databases-transact-sql"&gt;sys.databases (Transact-SQL) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html"&gt;MySQL :: MySQL 5.7 Reference Manual :: 15.3 InnoDB Multi-Versioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/09/sql-server-nolock/"&gt;https://blog.alswl.com/2017/09/sql-server-nolock/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Tue, 19 Sep 2017 16:43:45 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2017-09-19:2017/09/sql-server-nolock/</guid><category>SQL Server</category><category>MySQL</category></item><item><title>当我们在聊监控，我们在聊什么？</title><link>https://blog.alswl.com/2017/06/monitoring-introducing/</link><description>&lt;p&gt;最近在团队中给大家做了一个分享，泛泛地聊了一些有关「监控」的话题。
其实做分享对分享者的作用往往大于参与者。
这是一次将自己知识的梳理的过程，于是我将这次分享整理成这篇文章。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201706/stock-exchange.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201706/stock-exchange.png"/&gt;&lt;/p&gt;

&lt;h2 id="mu-de"&gt;目的 🎯&lt;/h2&gt;
&lt;p&gt;我们先来聊聊，什么是「监控」，以及我们期望通过「监控」完成哪些目的？&lt;/p&gt;
&lt;p&gt;传统意义上的监控，是指：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过一些手段和工具，关注运行中的&lt;strong&gt;硬件、软件、用户体验&lt;/strong&gt;的关键数据，将其暴露出来。
  当关键数据出现异常时候发出警告，进行人工或者自动的响应。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们平时看到的最常见的监控系统，比如 Zabbix，提供了丰富的模板，
可以监控服务器的 Load / CPU Usage / Alive 这些常规指标。
并在出现问题时候，对其进行报警通知。
随后运维工程师们会上线进行应急操作，case by case 的处理故障。&lt;/p&gt;
&lt;p&gt;我将上面的使用目的归纳为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;故障发生时提供数据报警&lt;/li&gt;
&lt;li&gt;提供历史数据以供分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;故事到这里似乎可以结束了，可监控真的是这么简单的么？
当然没，随着时代的进步，用户对服务提出了更为严苛的要求，
同时我们也有能力进一步控制平均故障修复时间
（&lt;a href="https://en.wikipedia.org/wiki/Mean_time_between_failures"&gt;MTBF&lt;/a&gt;），
上述描述的做法已经不能满足我们了。&lt;/p&gt;
&lt;p&gt;现在让我们切换一下视角，从传统的 OPS 的视角切换到 SRE
（&lt;a href="https://en.wikipedia.org/wiki/Site_reliability_engineering"&gt;Site Reliability Engineering&lt;/a&gt;）的视角。
当我们在关注网站整体的可用性时，我们会发现：
故障警报处理当然很重要，但是我们根本上想减少甚至避免 MTBF。
我们有两种手段：
一种是去除单点故障，让问题自然发生，但是不对线上造成影响；
另一种是在问题出现的早期就发现并进行及时修复。
前者是高可用范畴，后者就是我们今天关注的「监控」了。&lt;/p&gt;
&lt;p&gt;监控的目的是要&lt;strong&gt;将灾难消灭在襁褓里；在灾难即将出现或者发生问题时， 给大家展示直接的原因&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那为了达成这两个目标，我们需要回到问题的本质，重新思考两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监控哪些对象？&lt;/li&gt;
&lt;li&gt;如何识别故障？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="dui-xiang"&gt;对象 🐘🐘&lt;/h2&gt;
&lt;p&gt;我们说的监控对象，一般指的都是某个资源，
资源即持有某种其他方需要的某些属性的载体，包括硬件、软件。
除了资源这种类型，还有一种常见的监控对象是「体验」，即终端用户的访问感受，
这块内容我们暂时略去。&lt;/p&gt;
&lt;p&gt;让我们来先看一下常见的资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件&lt;ul&gt;
&lt;li&gt;服务器&lt;/li&gt;
&lt;li&gt;网络设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件&lt;ul&gt;
&lt;li&gt;Application&lt;/li&gt;
&lt;li&gt;Infrastructure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个分类是粗粒度的描述，为了落地地描述监控对象对象的健康状况，
我们还要进一步细化。以「服务器」为例，我们可以将其监控的内容细化为以下监控项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Network interface&lt;/li&gt;
&lt;li&gt;Storage devices&lt;/li&gt;
&lt;li&gt;Controllers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何评估这些监控项的健康状况？我们使用
&lt;a href="https://en.wikipedia.org/wiki/Service_level_indicator"&gt;SLI（Service Level Indicator）&lt;/a&gt;。
比如&lt;strong&gt;可用性&lt;/strong&gt;就是一个最容易理解的 SLI。
这里我将资源归为两类，面向用户提供服务的资源和面向存储的资源，
以下是针对这两类资源的常见 SLI：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User-facing Service&lt;ul&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;Latency&lt;/li&gt;
&lt;li&gt;Throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Storage System&lt;ul&gt;
&lt;li&gt;Latency&lt;/li&gt;
&lt;li&gt;Throughput&lt;/li&gt;
&lt;li&gt;durability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 SLI 建立的数字关键指标，称之为
&lt;a href="https://en.wikipedia.org/wiki/Service_level_objective"&gt;Service Level Objective&lt;/a&gt;。
SLO 往往是一组数字范围，比如 CPU 负载的 SLO 可以设置为 0.0-6.0（针对 8 核 CPU）。
不同的资源、不同的业务场景，会有不一样的 SLO 设计。&lt;/p&gt;
&lt;p&gt;看到这里，我们已经聊了要监控哪些指标，那么接下来我们聊聊如何用量化的思想，
帮助指标更易于识别、分析和决策。&lt;/p&gt;
&lt;h2 id="liang-hua-de-si-xiang"&gt;量化的思想 🔢&lt;/h2&gt;
&lt;p&gt;刚开始担任线上救火队成员时候，当有个系统出现问题时候，我经常听到这样的描述：
网站挂了、页面打不开了，CPU 出问题了，内存爆了，线程池炸了等等。
这样的表述虽然没错，但带来的可用价值太少，信息熵太低。
这样的说辞多了，就给人产生一种不靠谱，不科学的感觉。&lt;/p&gt;
&lt;p&gt;那怎样才能成为科学的描述？
古希腊哲学家在思考宇宙的时候，提出了一种心智能力，
从而打开了科学的窗子，这就是 Reasonable，中文名叫理智，这成为了自然科学的基石。
使用 Reasonable 探讨意味着探讨要深入问题的本质，不停留在表象，挖掘出真正有价值的内容。&lt;/p&gt;
&lt;p&gt;但是光有 Reasonable 还不够，B站粉丝建了一个微博，每天会检查
&lt;a href="http://weibo.com/yamanasion?refer_flag=1001030201_&amp;amp;is_hot=1"&gt;今天B站炸了吗&lt;/a&gt;，
他只能告诉我们炸没炸，不能给工程师带来实际的用处。
在科学的发展历史上，我们可以发现在亚里士多德的著作里没有任何数据公式。
他对现象只有描述，只是定性分析，通过描述性状来阐述定理。
这个定性的研究方式到了伽利略那里才出现了突破。
这里我们可以引入第二个关键词是  Quantifier，量化。
伽利略率先使用定量分析的方法，并将其运用到动力学和天文学，从而开创了近代科学。&lt;/p&gt;
&lt;p&gt;如果我们以定量的方式来描述网站挂没挂，就会变成：网站的响应耗时在 30s，基本无法使用。
描述线程池出问题，就会变成：active 线程数量是 200，已经到达 maxCount 数量，无法进行分配。
你看，通过这样的描述，我们一下子就能发现问题出在哪里。&lt;/p&gt;
&lt;h2 id="use"&gt;USE 💡&lt;/h2&gt;
&lt;p&gt;现在我们已经了解了「监控哪些对象？」，以及尝试用「量化」这个法宝来「识别故障」。
那有没有一些最佳实践帮助大家高效的识别故障呢？这里我推荐 Brend Gregg 大神的 &lt;a href="http://www.brendangregg.com/usemethod.html"&gt;USE 方法&lt;/a&gt;。
Brend Gregg 是 Netflix 的首席 SRE，著有 &lt;a href="http://www.brendangregg.com/sysperfbook.html"&gt;Systems Performance Book&lt;/a&gt;，
目前已经出版中文版 &lt;a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B0140I5WPK"&gt;性能之巅:洞悉系统、企业与云计算&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;USE 分别是三个单词的首字母缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utilization：使用率，CPU running percent，硬盘的 IO &lt;/li&gt;
&lt;li&gt;Saturation：饱和度，一般偏存储型资源，内存使用，硬盘使用&lt;/li&gt;
&lt;li&gt;Error：错误数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以为每个资源找到各自的 USE 度量指标，具体的 Check List 清单可以参考
&lt;a href="http://www.brendangregg.com/USEmethod/use-rosetta.html"&gt;USE Method: Rosetta Stone of Performance Checklists&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里举个例子，前段时间在设计 MySQL HA 方案时候，同时关注了 MySQL 的监控方案，
那么针对 MySQL，我们要做哪些监控呢？下面是使用 USE 方法设计出来的 SLI：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Business&lt;ul&gt;
&lt;li&gt;Questions：语句计总，Throughput&lt;/li&gt;
&lt;li&gt;Slow_queries：慢查询计总，Error&lt;/li&gt;
&lt;li&gt;Com_select：查询语句计总，Throughput&lt;/li&gt;
&lt;li&gt;Com_insert：插入语句计总，Throughput&lt;/li&gt;
&lt;li&gt;Com_update：更新语句计总，Throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Threads &amp;amp; Connections&lt;ul&gt;
&lt;li&gt;Threads_connected：当前连接数，Utilization&lt;/li&gt;
&lt;li&gt;Threads_running：当前使用中连接数，Utilization&lt;/li&gt;
&lt;li&gt;Aborted_connects：尝试连接失败数，Error&lt;/li&gt;
&lt;li&gt;Connection_errors_max_connections：由于连接数超标从而失败的连接数，Error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Buffer&lt;ul&gt;
&lt;li&gt;Innodb_buffer_pool_pages_total：内存使用页数，Utilization&lt;/li&gt;
&lt;li&gt;Innodb_buffer_pool_read_requests：读请求数计总，Utilization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wan"&gt;完 🏁&lt;/h2&gt;
&lt;p&gt;如果你对我上面描述的还意犹未尽，建议你可以看 &lt;a href="https://book.douban.com/subject/19992841/"&gt;Effective Monitoring and Alerting&lt;/a&gt;。
虽然本书没有中文版，但是关于监控、报警的原理解析很到位，值得一看。
另外还有一本 &lt;a href="https://book.douban.com/subject/26875239/"&gt;SRE: Google运维解密&lt;/a&gt;，
里面有不少篇幅在讲「SLA」，也是和监控、报警息息相关的。&lt;/p&gt;
&lt;p&gt;这次讲了一些概念性的内容，期望对大家有帮助，下一次我再分享一篇文章，聊聊 Metrics。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/06/monitoring-introducing/"&gt;https://blog.alswl.com/2017/06/monitoring-introducing/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Thu, 08 Jun 2017 15:40:41 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2017-06-08:2017/06/monitoring-introducing/</guid><category>Monitoring</category></item><item><title>XSS 攻击的处理</title><link>https://blog.alswl.com/2017/05/xss/</link><description>&lt;p&gt;这是一年前写的项目笔记，一直在我的待办事项里等待做总结，今天偶然翻到，就整理成文章发出来。
谨以此文怀念 &lt;a href="http://wooyun.org/"&gt;乌云&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201705/wooyun.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201705/wooyun.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="shi-qing-yuan-you"&gt;事情缘由&lt;/h2&gt;
&lt;p&gt;春节前的某一天，收到一封来自乌云（国内知名白帽子团队）的邮件，
告知我厂网站上出现一例 XSS 漏洞。
因为以前对 XSS 输入做过防御，还以为是某个前端 DOM 上的 XSS 漏洞，
后来仔细一看，不妙，是个影响甚大的存储型 XSS 漏洞。&lt;/p&gt;
&lt;p&gt;这里简单科普一下 XSS
&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC"&gt;跨网站脚本 -维基百科，自由的百科全书&lt;/a&gt;
中介绍到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;跨网站脚本（Cross-site  scripting，通常简称为XSS或跨站脚本或跨站脚本攻击）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。
  它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;XSS 攻击可以分成两种，反射性 XSS / 存储型 XSS。前者是需要用户触发的 XSS，
针对当前用户的攻击行为。而后者存储型 XSS 则更为严重，一旦攻击代码被保存，
所有访问被攻击的页面，都会触发用户被攻击行为。&lt;/p&gt;
&lt;p&gt;这次爆出的问题就是最严重的存储型 XSS，意味着每个访问到有问题页面的用户都会中招。
时间紧迫，问题必须被解决。&lt;/p&gt;
&lt;h2 id="xss-shi-xian-shou-duan"&gt;XSS 实现手段&lt;/h2&gt;
&lt;p&gt;在解决问题之前，需要对这个问题有必要的基础认识。
我们先看看 XSS 攻击是如何工作的，以及攻击者的目的是什么。&lt;/p&gt;
&lt;p&gt;XSS 的原理是通过构造特殊的数据，并通过传递参数或者保存表单数据的方式，
让这些构建的数据破坏 DOM 结构，从而让自己预先构造数据中的 JS 脚本被执行。&lt;/p&gt;
&lt;p&gt;检查存储型 XSS 漏洞的方法，可以在对应的 input field 里放入一些构造的数据，如果保存后可以被执行，就说明存在 XSS 漏洞。&lt;/p&gt;
&lt;p&gt;常见的检测方法（来自&amp;nbsp;&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC#.E6.A3.80.E6.B5.8B.E6.96.B9.E6.B3.95"&gt;跨网站脚本 - 维基百科，自由的百科全书&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;document.cookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&amp;gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;"&amp;gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;script&amp;gt;alert (vulnerable)&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;%3Cscript%3Ealert('&lt;/span&gt;&lt;span class="nx"&gt;XSS&lt;/span&gt;&lt;span class="s1"&gt;')%3C/script%3E&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;script&amp;gt;alert('&lt;/span&gt;&lt;span class="nx"&gt;XSS&lt;/span&gt;&lt;span class="s1"&gt;')&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;img src="javascript:alert('&lt;/span&gt;&lt;span class="nx"&gt;XSS&lt;/span&gt;&lt;span class="s1"&gt;')"&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;img src="http://xxx.com/yyy.png" onerror="alert('&lt;/span&gt;&lt;span class="nx"&gt;XSS&lt;/span&gt;&lt;span class="s1"&gt;')"&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;（这个仅限IE有效）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;攻击者通过 XSS 可以窃取用户的相关信息，如果用户是管理员，那么影响更大。
通过这些身份信息，攻击者可以进一步篡改信息或者进行诈骗，后果不堪设想。
PS：一个有效粗暴的方式，是将对公、对内系统的域名分离，对内部系统进行物理级别隔离。&lt;/p&gt;
&lt;h2 id="wo-han-li-shi-shang-de-chu-li-fang-an"&gt;我厂历史上的处理方案&lt;/h2&gt;
&lt;p&gt;XSS 问题又来已久，咱厂子开了这么久，历史上如何防御的呢？
答案是用了两个策略：第一个是使用&amp;nbsp;&lt;a href="https://www.owasp.org/index.php/Main_Page"&gt;OWASP&lt;/a&gt;
提供的库进行内容过滤，第二个是在存储数据时，存储了转义后的数据。&lt;/p&gt;
&lt;p&gt;在技术上处理 XSS，有两种态度可以选择：第一种是前置过滤，即将用户所有数据都进行转义，
在输出时候在前端（模板渲染）层面直接输出。
第二种是用户输入的数据不经过转义就直接存储起来，前端在使用时候保证对数据进行转义。&lt;/p&gt;
&lt;p&gt;我厂历史上使用的方案的前者，优点是在于前端不需要在每个地方转义，
避免某个地方忘记了转义，从而导致漏洞。缺点则是在输出内容到非 Web 客户端时候，比如
APP，需要进行额外的数据处理过程， 否则 HTMLEncode 的内容，在 APP
上面无法正确输出。&lt;/p&gt;
&lt;p&gt;这个处理方案是稳妥的，那么为什么最近又暴露出问题了？
排查之后发现，原来最近有若干个服务迁移到了一个新系统，
而新系统在安全上面没有全局处理，所以爆出了漏洞。&lt;/p&gt;
&lt;h2 id="ben-ci-chu-li-fang-an"&gt;本次处理方案&lt;/h2&gt;
&lt;p&gt;知道了原因，那么可以快速解决问题了。在这次处理过程中，我们讨论了在当前移动平台增长迅速，Web 平台增长缓慢的大势下，能否直接存储用户原始数据？
而且由于规范制定不严格，目前系统内有些地方存储转码后数据，有些地方存储转码前数据。
导致在一些特殊的字符（颜文字）处理上不一致，从而导致在处理 &lt;code&gt;br&lt;/code&gt; / &lt;code&gt;&amp;lt;&lt;/code&gt; 这类特殊字符时，表现不同。&lt;/p&gt;
&lt;p&gt;由于 DB 中有部分数据转义处理，部分数据原文存储，所以先处理输出后敏感信息，在模板层面启用全局
encode。 将有危险的数据转移为在 HTML 文本。&lt;/p&gt;
&lt;p&gt;PS：现代 Web 框架的模板渲染引擎，一般会默认开启 HTMLEncode，而
Freemarker 居然在 2.3.24-rc01 才支持，现在都没有发布，唉&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;处理方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开启全局 HTML 输出 Encode，有一个&amp;nbsp;&lt;a href="http://watchitlater.com/blog/2011/10/default-html-escape-using-freemarker/"&gt;Default HTML-escape using Freemarker&lt;/a&gt;&amp;nbsp;方案，可以默认开启 Html Encode，在这个处理方案中，需要注意有些地方真的需要输出原始 html，需要&amp;nbsp;&lt;code&gt;noescape&lt;/code&gt;&amp;nbsp;特殊处理&lt;/li&gt;
&lt;li&gt;检查所有前端操作，禁止字符串拼接，使用框架支持的模板进行渲染，拖小菊的福，新系统在这块工作完成度一直比较好&lt;/li&gt;
&lt;li&gt;将&amp;nbsp;&lt;a href="https://www.owasp.org/index.php/Main_Page"&gt;OWASP&lt;/a&gt;&amp;nbsp;方案强制开启&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qi-ta-tips"&gt;其他 Tips&lt;/h2&gt;
&lt;p&gt;OWASP 有一个很长的 &lt;a href="https://www.owasp.org/index.php/SS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"&gt;列表&lt;/a&gt;，教导如何避免 XSS，里面提到了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为何以及如何进行「积极防御」，对立面是仅仅输出时候转义内容本身&lt;/li&gt;
&lt;li&gt;几条对抗 XSS 的规则&lt;ul&gt;
&lt;li&gt;尽量不在特定地方输出不可信变量：script / comment / attribute / tag / style， 因为逃脱 HTMl 规则的字符串太多了。&lt;/li&gt;
&lt;li&gt;将不可信变量输出到 div / body / attribute / javascript tag / style 之前，对&amp;nbsp;&lt;code&gt;&amp;amp; &amp;lt; &amp;gt; " ' /&lt;/code&gt;&amp;nbsp;进行转义&lt;/li&gt;
&lt;li&gt;将不可信变量输出 URL 参数之前，进行 URLEncode&lt;/li&gt;
&lt;li&gt;使用合适的 HTML 过滤库进行过滤&lt;/li&gt;
&lt;li&gt;预防 DOM-based XSS，见&amp;nbsp;&lt;a href="https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet"&gt;DOM based XSS Prevention Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开启 HTTPOnly cookie，让浏览器接触不到 cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;最后送上一个 XSS 攻击工具&amp;nbsp;&lt;a href="http://webxss.net/"&gt;http://webxss.net/&lt;/a&gt;，知己知彼，百战不殆。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/05/xss/"&gt;https://blog.alswl.com/2017/05/xss/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Wed, 31 May 2017 22:04:00 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2017-05-31:2017/05/xss/</guid><category>security</category></item><item><title>👁️ 预测未来？</title><link>https://blog.alswl.com/2017/01/prophecy/</link><description>&lt;p&gt;&lt;img alt="201702/clock.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201702/clock.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="la-pu-la-si-zhi-yao"&gt;拉普拉斯之妖&lt;/h2&gt;
&lt;p&gt;未来是可以被预测的么？&lt;/p&gt;
&lt;p&gt;专家在预测股票趋势变化，天气预报员可以预测未来一周甚至更长时间的天气。
如果给他们更多的信息和参数，是否可以将未来预测的更准确？
如果精确的粒度可以达到基本粒子级别，同时给一个计算力超群的计算器，能否精确的推衍未来变化？&lt;/p&gt;

&lt;p&gt;这些想法在我刚接触经典力学时浮现，学习了牛顿三定律之后，异常激动。
感觉人类可以凭借技术的进步，逐步对未来精确预测。彼时可以解决人类即将遇到的任何问题了，化问题于无形。&lt;/p&gt;
&lt;p&gt;这想法其实在 200 年前就出现了。法国伟大的数学家拉普拉斯（Laplace）在他的著作「概率论」里面，
提出了这样的观点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们可以把宇宙现在的状态视为其过去的果以及未来的因。假若一位智者会知道在某一时刻所有促使自然运动的力和所有组构自然的物体的位置，假若他也能够对这些数据进行分析，则在宇宙里，从最大的物体到最小的粒子，它们的运动都包含在一条简单公式里。对于这位智者来说，没有任何事物会是含糊的，并且未来只会像过去般出现在他眼前。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;「根据当前已知即可预测未来」，这种决定论，就是拉普拉斯之妖。&lt;/p&gt;
&lt;h2 id="da-po"&gt;打破&lt;/h2&gt;
&lt;p&gt;除了拉普拉斯的决定论，这个世纪末还发生了另外一件事情。
开尔文男爵在 19 世纪的最后一天，发表了「物理大厦已经落成，所剩只是一些装饰性工作」的言论。
然而，在随后的岁月里，经典物理大厦却开始被量子力学逐步击破，轰然倒地。&lt;/p&gt;
&lt;p&gt;在决定论这个方面，根据海森堡的不确定性理论，粒子的位置与动量不可同时被确定。
这个结论说明目前技术下面，无法精准测量粒子的状态。
既然无法准确测量粒子的状态，就失去了演算未来可能性的基础，更无法预测未来了。&lt;/p&gt;
&lt;p&gt;那既然是无法预测，是否表示，预测未来这件事情是无稽之谈，未来是不成规律的？&lt;/p&gt;
&lt;h2 id="hun-dun-bei-li-jie-cuo-wu-de-hu-die-xiao-ying"&gt;混沌：被理解错误的「蝴蝶效应」&lt;/h2&gt;
&lt;p&gt;针对未来的预测，动力系统中，有相当多的研究和思考，其中比较注明的一项是：蝴蝶效应。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201702/chaos-butterfly.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201702/chaos-butterfly_400.png"/&gt;&lt;/p&gt;
&lt;p&gt;关于「蝴蝶效应」，不用过多解释。命名的来源据说是发现者 Edward Lorenz 觉得图形像是蝴蝶。
而有另一种另一说法是，Edward 的一个比喻「巴西蝴蝶煽动，引起德克萨斯的龙卷风」。&lt;/p&gt;
&lt;p&gt;事实上这种说法是不精准的。Edward 在预测天气模型中，发现起始数据的微小差异，
会导致数日之后计算结果的巨大差异。
从点在于在预测模型上，忽略了一个蝴蝶煽动引起的力量，即起始条件的设定，会导致结果的巨大差异。
而不是表名龙卷风是蝴蝶煽动产生的。&lt;/p&gt;
&lt;p&gt;如果蝴蝶煽动能够产生龙卷风。那么一个普通人的呼吸，也可以造成同样的效果。😂&lt;/p&gt;
&lt;h2 id="fen-xing-he-hun-dun"&gt;分形和混沌&lt;/h2&gt;
&lt;p&gt;和混沌相关的，还有一个重要概念「分形」：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个粗糙或零碎的几何形状，可以分成数个部分，且每一部分都（至少近似地）是整体缩小后的形状&amp;rdquo;[2]，即具有自相似的性质。分形的核心是自相似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随机从这种自相似的图形中提取样本，样本集表现出不可预测的特性。&lt;/p&gt;
&lt;p&gt;混沌的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;非线性系统在一定参数条件下展现分岔（bifurcation）、周期运动与非周期运动相互纠缠，以至于通向某种非周期有序运动。这种运动是不可预测，呈现出失序的状态。三体问题，即是一例混沌的场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么混沌和分形是具有相关性的呢？这里有一个重要概念 IFS。
IFS（Iterated Function System）是迭代函数系统，即在数学上被认为一个完全向量空间上收缩映射的有限集。
分形的图案，部分可以抽象出 IFS 公式。&lt;/p&gt;
&lt;p&gt;这个公式的奇妙之处是在于，在公式渐进推算过程之中，初始看到的结果是混沌无序的，而在逐步运算之后，可以看出分形的特征。&lt;/p&gt;
&lt;p&gt;下图是根据一个 IFS 公式，逐步构造出一个分形图片的过程：&lt;/p&gt;
&lt;p&gt;&lt;img alt="201702/chaosgame.gif" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201702/chaosgame.gif"/&gt;&lt;/p&gt;
&lt;p&gt;图片来自 Wikipedia &lt;a href="https://en.wikipedia.org/wiki/Iterated_function_system"&gt;https://en.wikipedia.org/wiki/Iterated_function_system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这种由初期混沌，逐渐表现为分形的情况，被学者总结为：「混沌在（生成）时间上是分形的；而分形的在空间（展示）上是混沌的。」
混沌中可以找到有序，在非线性中找到理性，混沌中可以演化出非规则，也可以演化出在规则中混沌。&lt;/p&gt;
&lt;h2 id="zhe-xue-shang-de-xiang-zheng"&gt;哲学上的象征&lt;/h2&gt;
&lt;p&gt;感谢你迷迷糊糊的读到这里，混沌不仅仅在数学和物理上面，吸引着一代代人的探索。
在哲学生活指导方面，也有重大的意义。早在古人说「分久必合，合久必分」，
就是一种稳定线性的表现，具有预测性的表现。
而「一生二、二生三，三生万物」则体现了古人对分形的理解。
经典的「马蹄毁了一场战争」故事，讲的是混沌理论。&lt;/p&gt;
&lt;p&gt;这些对未来预测能力的渴望，表现了对生活的掌控欲望，对未来可行性的探索，
在低谷期可以带来希望，大跃进时期可以带来警醒。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;对于我个人而言，虽然失去了能够预测未来的理论基础而略感遗憾。
但是反过来想想，如果真的发明了一台机器，能够精确预言到未来，
那么在发明实现的当天，就能够推衍出未来所有出现的科学理论、文学、艺术创作，
那给后人创造了一个多么再无新事物的未来，这该是一个多么无趣的世界啊。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/01/prophecy/"&gt;https://blog.alswl.com/2017/01/prophecy/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Tue, 31 Jan 2017 11:12:43 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2017-01-31:2017/01/prophecy/</guid><category>Math</category></item><item><title>👷如何做年前大扫除</title><link>https://blog.alswl.com/2017/01/spring-cleaning/</link><description>&lt;p&gt;今年过年特别早，离春节只剩下二十多天了。
为期 7 天的春节里，工程师们不上班，那万一线上业务出现了故障怎么办？
大公司的朋友们会安排专门的人进行值班（此处心疼一下那些需要大年三十还要值班保证高峰的工程师们），
而作为创业团队人少，难做到在线值守，就需要对线上进行一些整理盘点，找出潜在问题，为春节长假做一些准备。&lt;/p&gt;
&lt;p&gt;我们称之为年前大扫除。&lt;/p&gt;
&lt;p&gt;大扫除需要做些什么呢，且听我一一道来。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201701/saber.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201701/saber.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;PS: 冷知识，大扫除英文是 spring cleaning，所以春节大扫除是 Spring Festival spring cleaning。&lt;/p&gt;
&lt;h2 id="da-sao-chu-de-nei-rong"&gt;大扫除的内容&lt;/h2&gt;
&lt;p&gt;大扫除其实是一个查漏补缺+囤积粮草的事情。&lt;/p&gt;
&lt;p&gt;查漏补缺，即找出潜在的问题。这些问题平时可能不会特意去查看，
借助大扫除这个运动，恰好进行盘点。
计算机的世界里，有一个方法论非常好使，在极多场景可以见到其身影：分层。
TCP 的七层模型，架构设计的 N 层 模型，都是对分层思想的使用。
查漏补缺也不例外，我们可以按照业务访问流程，将需要排查的问题拆分为：业务、应用、中间件、网络、物理、存储 etc。&lt;/p&gt;
&lt;p&gt;通过分层，不仅仅完成了自上而下地遍历整个技术栈，也同时将不同模块的内容交给不同的责任方，
确保任务的分割。&lt;/p&gt;
&lt;p&gt;分完模块，还要告知大家如何具体查找问题。
这里我介绍一个通用的方法：USE&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For every resource, check Utilization, Saturation, and Errors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;USE 方法是从 Brend Gregg 那里学来的。
在技术设施的领域里，Resource 即是指各种类型的资源，比如 CPU、磁盘、网络、内存，
Utilization 指的是使用率，可以简单分为百分制和非百分制。
Saturation 是指饱和率，支持 queue 的资源，就会有这个指标。
Error 即错误，可以从错误统计和日志得知。&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;业务领域里面，USE 也有相对应的含义。以审核系统举例，
对应的 USE 可以理解为「审核应用实例跑的 CPU 占用如何，任务队列是否塞满，业务日志是否有异常」。&lt;/p&gt;
&lt;p&gt;除了 USE 里面提到的指标，还有几个指标特别重要：
TPS 、Latency 和 Capacity。
这几个指标对性能敏感的尤为重要。
检查 USE 的同时，我们必须关注一下这三个指标，
确保 TPS / Latency 是否满足我们预期的 SLA。
哦？压根没有制定 SLA，不要慌，和历史数据对比，先制定一个粗糙的 SLA。
哦？连历史数据都没有？那只能找你 Leader 让他考量一下了。&lt;/p&gt;
&lt;p&gt;负责每个子系统的同学，记得检查时候将这些收集到的数据列下来。
在 Metric 做的还不够完善时候，这些数据也是很宝贵的。&lt;/p&gt;
&lt;p&gt;在我看来，检查 USE / TPS / Latency ，&lt;strong&gt;&lt;strong&gt;最大的作用是将抽象的可用性指标描述为几个易于理解的数值进行量化。
一旦能够量化，就可以对比、观测、监控，并且 Review 起来也异常轻松&lt;/strong&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="ying-dui-fang-an"&gt;应对方案&lt;/h2&gt;
&lt;p&gt;检查出问题之后，就要考虑应对了。时间急任务多，我们的应对方案是是囤积粮草 / 写救命笔记。&lt;/p&gt;
&lt;p&gt;囤积粮草比较好理解，&lt;strong&gt;&lt;strong&gt;基于已有的容量预估，为容易出问题的系统提供一份冗余&lt;/strong&gt;&lt;/strong&gt;。
有些团队平时做基础设施就比较，做 Scale 就是小轻松。
那平时 Scalable 做的不好的朋友，就只能将应用实例多开一些，以避免临时出现的流量波动。&lt;/p&gt;
&lt;p&gt;无状态的服务好搞，有状态的 DB 就很难在短时间内做 Scale。
检查这些服务的容量，如果重点资源临近阈值，比如 DB 的硬盘资源，缓存的内存容量。
核心服务的余量在检查中真的发现问题的话，那也只能短期内做扩容了。&lt;/p&gt;
&lt;p&gt;对于小团队来说，春节长假的特殊性在于响应会变慢甚至是联系不上。
一旦线上有异常，可能找不到合适的人员来进行处理。
所以第二条写救命笔记则更为重要。
「Google SRE」里面有个小段子，一个绝对不能被按的按钮，
这个按钮会清空内存数据，在飞行过程中被宇航员按了。幸亏美女工程师（下图）写了相关的救命手册，
专门写了针对这种情况的操作，救了这些宇航员的命。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201701/sre.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201701/sre.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;图片来自 「Google SRE」&lt;/p&gt;
&lt;p&gt;从这个故事里面可以看到，一个紧急操作手册是多么重要。
&lt;strong&gt;&lt;strong&gt;所以在大扫除期间，我们还要补一补平时的文档，将一些常见问题 / 常规操作记录下来。&lt;/strong&gt;&lt;/strong&gt;
步骤需要细致到能让让每个远程值班的同学做到 step by step 操作。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;啰嗦了这么多，相信大家对大扫除要做些什么已经有所印象了，祝大家过个好年，流量涨涨涨，还能平平安安的。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;[The USE Method] &lt;a href="http://www.brendangregg.com/usemethod.html"&gt;http://www.brendangregg.com/usemethod.html&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;[USE Method: Linux Performance Checklist] &lt;a href="http://www.brendangregg.com/USEmethod/use-linux.html"&gt;http://www.brendangregg.com/USEmethod/use-linux.html&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/01/spring-cleaning/"&gt;https://blog.alswl.com/2017/01/spring-cleaning/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Tue, 03 Jan 2017 23:20:50 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2017-01-03:2017/01/spring-cleaning/</guid><category>Infrastructure</category><category>DevOps</category></item><item><title>🔑 也谈 HTTPS - 如何内测</title><link>https://blog.alswl.com/2016/12/https-2/</link><description>&lt;p&gt;&lt;img alt="201612/mouse.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201612/mouse.jpeg"/&gt;
(图片来自 &lt;a href="https://www.duitang.com/blog/?id=48013745"&gt;茶杯中的可爱小白鼠 壁纸 - 2560x1920－堆糖，美好生活研究所&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;在上篇文章 &lt;a href="https://blog.alswl.com/2016/11/https-1/"&gt;🔒 也谈 HTTPS - HTTPDNS + HTTPS&lt;/a&gt; 中，
我们谈了如何基于 HTTPDNS 来部署无坚不摧的 HTTPS 通信环境，
这次我们讨论另外一个比较头疼的问题：部署。&lt;/p&gt;

&lt;p&gt;小站点部署 HTTPS 相对成本低，改改前端代码，就可以上线了。
但作为业务有一定复杂度的大网站，就没办法这么暴力上线了。&lt;/p&gt;
&lt;p&gt;前端在基础库中调整 Scheme 之后，仍然可能存在很多边边角角没有覆盖到。
比如 JS 里面写死了 HTTP，那在 HTTPS 下请求 HTTP XHR 的话，
浏览器会将请求拦截掉。
一旦出现这种故障，用户就无法正常使用业务，小白用户往往也不懂得自己将 &lt;code&gt;https://&lt;/code&gt; 换成 &lt;code&gt;http://&lt;/code&gt; 使用。&lt;/p&gt;
&lt;p&gt;解决的思路是足够的内测，找一群人帮我在 HTTPS 环境下使用足够长时间。
让他们当小白鼠，提前发现问题并解决。
于是，我把目光转向了身边的一大大群小白鼠，整个办公室的同事~😄&lt;/p&gt;
&lt;p&gt;没错，&lt;strong&gt;&lt;strong&gt;我要强制所有同事使用 HTTPS 的公司网站&lt;/strong&gt;&lt;/strong&gt;，从而靠他们帮我发现问题。&lt;/p&gt;
&lt;p&gt;靠发邮件、QQ 广播呼吁大家使用 HTTPS 站点的方法，估计是不行的。
没有利益驱动，推动力是不足的，我必须想点强制的手段让他们使用 HTTPS。&lt;/p&gt;
&lt;p&gt;有三种方法来达到这个效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;业务系统内入口判断用户身份，是雇员的话，切换到 HTTPS&lt;/li&gt;
&lt;li&gt;Nginx 入口系统判断 IP 来源，办公室 IP 则切换到 HTTPS&lt;/li&gt;
&lt;li&gt;改造办公室网络，访问站点时候，自动切换到 HTTPS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了避免对线上业务系统、基础设施造成影响，我采用了第三条方案。&lt;/p&gt;
&lt;p&gt;说干就干，直接对公司网络出口设备是 ROS&lt;a href="http://wiki.mikrotik.com/wiki/Main_Page"&gt;via&lt;/a&gt; 动起刀子。&lt;/p&gt;
&lt;p&gt;实现的原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A：办公室网络的 🐁 们请求站点 http://www.duitang.com&lt;/li&gt;
&lt;li&gt;B：操作 RouterOS 的防火墙，将 dst 为 www.duitang.com IP 的 TCP 请求都 dst-nat 到新的一台 Nginx 服务器 proxy.duitang.com&lt;/li&gt;
&lt;li&gt;C：这台 proxy.duitang.com 做过特别定制，将所有针对 *.duitang.com 请做一次 302 请求，将 http://www.duitang.com 请求都转发到 https://www.duitang.com&lt;/li&gt;
&lt;li&gt;D：Client 收到 302 请求，重新请求 https://www.duitang.com&lt;/li&gt;
&lt;li&gt;E：同 B&lt;/li&gt;
&lt;li&gt;F：proxy.duitang.com 将请求转发到真正的 www.duitang.com 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS：这里要小心的是，需要配置 proxy.duitang.com 的 &lt;code&gt;resolver&lt;/code&gt; 避免 Nginx 内部请求。&lt;/p&gt;
&lt;p&gt;流程图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="201612/https_ros_process.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201612/https_ros_process.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;这样操作之后，在办公室网络下，所有访问公司网站的 HTTP 流量都会跳转到 HTTPS。&lt;/p&gt;
&lt;p&gt;PS：我原始方案想使用 ROS 的 L7 防火墙 直接抓 HTTP 包，match HTTP 头数据，
再修改返回的 TCP 包。
但测试下来发现 ROS L7 Firewall 不支持写 TCP 数据。
所以我最后只能使用中间跳转的方案。&lt;/p&gt;
&lt;p&gt;如果不是使用 ROS 的朋友也不用担心，原理和流程已经讲清楚了，
无非是使用 Cisco / Huawei 网络设备的防火墙命令实现需要的功能。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上篇文章发完之后，好几个朋友问我 IP 证书供应商的事情。我就简单说一下我了解的情况。&lt;/p&gt;
&lt;p&gt;国内 SSL 证书供应商们会给他们兜售的产品起各种各样花里胡哨的名字，
什么超真、超强、超安、超快，国外有些企业也会搞什么 Pro / Super / Premium / Essential，
其实 SSL 证书的区分，笼统来说就三种类型：DV / OV / EV，
Domain Validation / Orgnization Validation / Extented Validation。
他们区别除了字面意思，就是所有权审核流程一个比一个麻烦。&lt;/p&gt;
&lt;p&gt;想基于 IP 直接搞所有权审核，要看对应供应商的证书是否支持。
去年年底我做了一个调查，支持 IP 证书的厂家如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rapid SSL 不支持 ip&lt;/li&gt;
&lt;li&gt;wosign OV 级别支持&lt;ul&gt;
&lt;li&gt;OV 需要验证 需要验证申请单位的营业执照、等其他证明文件&lt;/li&gt;
&lt;li&gt;浏览器支持情况&lt;ul&gt;
&lt;li&gt;Firefox 32 &lt;a href="https://mozillacaprogram.secure.force.com/CA/IncludedCACertificateReport"&gt;https://mozillacaprogram.secure.force.com/CA/IncludedCACertificateReport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;交叉认证了 Startcom 的证书，可以支持老版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GlobalSign OV 支持&lt;ul&gt;
&lt;li&gt;$349 * 6 * 8 = 16752&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.globalsign.com/customer/portal/articles/1216536-securing-a-public-ip-address---ssl-certificates"&gt;https://support.globalsign.com/customer/portal/articles/1216536-securing-a-public-ip-address---ssl-certificates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;需要认证 RIPE ip， &lt;a href="https://apps.db.ripe.net/search/query.html?searchtext=221.228.82.178#resultsAnchor"&gt;https://apps.db.ripe.net/search/query.html?searchtext=221.228.82.178#resultsAnchor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Geotrust 明确表示不支持 https://www.geocerts.com/faq#Q47&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在 Wosign 爆了丑闻，于是支持 IP SSL 又少了一家。
只剩下 GlobalSign 了，但是 GlobalSign OV 又贵审核又麻烦，
不知道看到此文的大神们有没有更好的推荐。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/193775/ssl-certificate-for-a-public-ip-address"&gt;domain name - SSL certificate for a public IP address? - Server Fault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.mikrotik.com/wiki/Manual:IP/Firewall/Filter"&gt;ROS Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.mikrotik.com/wiki/Manual:IP/Firewall/NAT"&gt;ROS NAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.mikrotik.com/wiki/Manual:IP/Firewall/L7"&gt;ROS Firewall L7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.mikrotik.com/viewtopic.php?f=13&amp;amp;t=62152"&gt;How to block and redirect website - MikroTik RouterOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.mikrotik.com/viewtopic.php?t=39837"&gt;Mikrotik IP REDIRECT using firewall - MikroTik RouterOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.mikrotik.com/viewtopic.php?t=88049"&gt;Redirect all traffic from a spesific ip number to a web page - MikroTik RouterOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/12/https-2/"&gt;https://blog.alswl.com/2016/12/https-2/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Thu, 08 Dec 2016 20:16:26 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-12-08:2016/12/https-2/</guid><category>HTTPS</category><category>HTTPDNS</category><category>MikroTik</category></item><item><title>教你在上海挑房子</title><link>https://blog.alswl.com/2016/12/house/</link><description>&lt;p&gt;&lt;img alt="201612/shanghai.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201612/shanghai.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;点开的同学别失望，这并不是教你如何快速致富的 😂 &amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上海政府在 11-28 出了房屋新政 &lt;a href="http://sh.xinhuanet.com/2016-11/28/c_135864791.htm"&gt;via&lt;/a&gt;，对房价进行进一步调控。
其核心思想是「认房又认贷」。3 月份的政策 &lt;a href="http://www.shanghai.gov.cn/nw2/nw2314/nw2319/nw10800/nw11408/nw39426/u26aw46965.html"&gt;via&lt;/a&gt; 是限制购房资格。
这次 11 月份调整则是提高二套房首付比例。
双管齐下，进一步给上海房市进行降温。&lt;/p&gt;
&lt;p&gt;在这种严苛的政策下面，如何挑选一套自己满意，家人住得安心的房子就尤为关键了。
我对房市一直比较关注，也曾有几位朋友咨询我的一些经验。之前我是将 Evernote
笔记链接贴给别人，这次我就详细讲讲，如何在上海挑房子。&lt;/p&gt;
&lt;p&gt;第一步，&lt;strong&gt;&lt;strong&gt;是建立有价值的 Indicator，并对具体房源进行计算&lt;/strong&gt;&lt;/strong&gt;。
Indicator 的含义是建立一系列评价指标，比如价格、户型、位置，
再根据这些 Indicator 给房源进行打分。
如果我是一个购房者，我挺希望我的置业顾问告诉我这套房有哪些优点、缺点，综合评价得几份。
（当然实际情况下这些置业顾问都是吹得天花乱坠，尽睁眼说瞎话。）
看房的过程可能长达数月，而人的记忆会随着时间逐步失真，只对最近看到的事物有深刻印象。
使用客观的数字评价房源，则可以进行精准的评价，避免产生主观臆断。&lt;/p&gt;

&lt;p&gt;我使用的 Indicator 和评价细项罗列如下，供参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;价格&lt;/li&gt;
&lt;li&gt;面积&lt;/li&gt;
&lt;li&gt;地理位置：内环、中环、外环&lt;/li&gt;
&lt;li&gt;交通：离地铁距离，换乘便利性；多地铁线换乘；&lt;/li&gt;
&lt;li&gt;户型：南北通透；客厅朝南；全明；户型方正；无暗室&lt;/li&gt;
&lt;li&gt;装修：毛胚；简装；普通；精装；豪装&lt;/li&gt;
&lt;li&gt;商圈：购物中心；超市；菜场&lt;/li&gt;
&lt;li&gt;学区房&lt;/li&gt;
&lt;li&gt;产权：满五唯一&lt;/li&gt;
&lt;li&gt;楼层&lt;/li&gt;
&lt;li&gt;房龄：5 / 10 / 15 / 20&lt;/li&gt;
&lt;li&gt;政策发展前景&lt;/li&gt;
&lt;li&gt;停车&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二步，&lt;strong&gt;&lt;strong&gt;就是和家人达成一致的期望&lt;/strong&gt;&lt;/strong&gt;，避免潜在的纠纷。
每个人对未来的住房有自己的期望，即便是一家人，
各自看中的点也不会太一样。不管平时家庭决策是什么流程，我都建议坐下来一起讨论讨论。
将 Indicator 依次列出，大家讨论各自心中的优先级。&lt;/p&gt;
&lt;p&gt;除了优先级的讨论，还要考虑一下各自对 Indicator 划分等级的理解。
比如对房型、装修这两项，评价标准就会很模糊，这一切都需要讨论清楚。&lt;/p&gt;
&lt;p&gt;我个人最为看中价格、位置、交通，可以放弃的有学区房、停车、户型。&lt;/p&gt;
&lt;p&gt;第三步，&lt;strong&gt;&lt;strong&gt;划定圈子，判断趋势&lt;/strong&gt;&lt;/strong&gt;。
众多 Indicator 里面，价格是固定的，户型、楼层等是和具体房源相关的，
我们能够撬动的最重要因素，其实就是位置。&lt;/p&gt;
&lt;p&gt;作为上海这个拥有 2500w 人口的超大型城市，是不可能把各个位置的房源都扫一遍的，
所以必须重点规划自己准备实地考察的区域。
那么我们就在上海地图上面划几个圈了，数据可以通过链家、中原地产等多网站收集。
安居客有一个大颗粒度的圈子，展示了社区集中点 &lt;a href="http://shanghai.anjuke.com/"&gt;via&lt;/a&gt;，
下图是我筛选条件之后形成的几个簇：&lt;/p&gt;
&lt;p&gt;&lt;img alt="201612/map_thumb.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201612/map_thumb.png"/&gt;&lt;/p&gt;
&lt;p&gt;（数据爬取分析这一块，我只服一个人，他专门写了一堆爬虫捞数据然后分析，
如果对杭州的房地产投资感兴趣，可以私信我，我可以帮忙问问。）&lt;/p&gt;
&lt;p&gt;从城市级别来看，其实不同区域的变化趋势基本是一致的，但是局部地区可能受外部因素而出现较大波动。
比如上海闸北并入静安，价格就大涨；大宁板块产生一个地王，也会让这片区域价格大幅波动；
甚至新开业一个 Mall，都会让周边价格波动。
这些外部因素，必须提前关注政府市政规划方案、房产网站、公众号、房产微博。
政策相关推荐阅读：「上海市城市总体规划（2015-2040）纲要概要」 
&lt;a href="http://2040.shgtj.net/web/"&gt;via&lt;/a&gt; 规划了整体发展格调。
「上海市商业网点布局规划（2013-2020）」&lt;a href="http://www.scofcom.gov.cn/zxxxgk/235081.htm"&gt;via&lt;/a&gt; 规划了 14 个市级商圈，之前只有 10 个，还有若干区级商圈。 &lt;/p&gt;
&lt;p&gt;第四步，&lt;strong&gt;&lt;strong&gt;快速行动，快速决策&lt;/strong&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;还记得捡西瓜的故事么，小猴子一直想找个大西瓜，但一路看过去最后什么都没捡到。
看房不仅仅是一个体力活，而且非常讲究时效性的，必须能够快速响应，快速决策。
在上海这中刚需强需求旺盛的城市，一套评价都不错的房源，半天内就会被别人拿下。
所以前期观察一段时间之后，必须摸清楚自己的需求和承受能力，遇到合适的房源，
就速战速决。&lt;/p&gt;
&lt;p&gt;速战速决还依赖实地看房源的效率。
从我的经验来看，一天至多可以看 10 套左右的房源。
出发前一天约好中介、房东，列一个清单，时间、地点、联系方式全部罗列下来，第二天依照清单行动。
另外为了提高速度，全程应该打车，对于上海这样的一线城市，出租车费用和房产价格相比，真的是小钱。&lt;/p&gt;
&lt;p&gt;在看中合适的房源之后，有些人可能面对这笔巨额交易摇摆不定，而错失了良机。
收益于 Indicator + 前期数据准备，我们在看房时候应该具有了客观的评价能力。
一旦各方面满意，不要犹豫，快速决策。
但也不要因为几次擦肩而过就冲动决策，要相信客观的 Indicator 数据。&lt;/p&gt;
&lt;p&gt;我推荐上班族看房时间安排是，频繁看房两个月，每周末两天出动。
前期一个月看房，不管看中多中意的，都不做决策，
但要计算出一个自己心理预期。一个月后，看到合适的立刻上手。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;OK 写完了。回顾其实这四个步骤，其实就是选一个开源软件的流程嘛。
设定特性需求 -&amp;gt; 设定期望 -&amp;gt; 调研候选者 -&amp;gt; 快速测试上线。
嚯嚯嚯。&lt;/p&gt;
&lt;p&gt;最后，如果你恰好在看房，希望你看完本文有些收获，收获自己中意的住房。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/12/house/"&gt;https://blog.alswl.com/2016/12/house/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Mon, 05 Dec 2016 21:29:37 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-12-05:2016/12/house/</guid><category>Shanghai</category></item><item><title>🔒 也谈 HTTPS - HTTPDNS + HTTPS</title><link>https://blog.alswl.com/2016/11/https-1/</link><description>&lt;p&gt;最近谈论 HTTPS 的文章很多，其原因之一是运营商作恶底线越来越低，动不动就插播广告，
前两天小米还联合几家公司发文 &lt;a href="http://weibo.com/1771925961/Da1aopxLQ?refer_flag=1001030103_&amp;amp;type=comment#_rnd1480392491936"&gt;关于抵制流量劫持等违法行为的联合声明&lt;/a&gt; 痛斥某些运营商。
另一方面也是苹果 &lt;a href="https://techcrunch.com/2016/06/14/apple-will-require-https-connections-for-ios-apps-by-the-end-of-2016/"&gt;ATS&lt;/a&gt; 政策的大力推动，逼迫大家在 APP 中全部使用 HTTPS 通信。
上 HTTPS 的好处很多：保护用户的数据不外泄，避免中间人篡改数据，
对企业信息进行鉴权。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201611/https.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201611/https.png"/&gt;&lt;/p&gt;
&lt;p&gt;关于 HTTPS 如何购买证书，如何部署，网上的教程已经太多了，实践起来没有太大的难处。
我们在部署 HTTPS 的时候，遇到了一些新问题，首当其冲的就是 HTTPS 部分网络不可访问的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管使用了 HTTPS 技术，部分邪恶的运营商，仍然使用 DNS 污染技术，让域名指向的他们自己服务器
  而这些服务器并没有部署 SSL 服务（就算部署了，也会触发 SSL 证书 Common name 不一致报警），
  导致 443 端口直接被拒绝。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个问题不解决，强行上 HTTPS 的话，会导致一部分用户出现无法访问网站
一旦用户不爽了，轻则对产品不信任，重则直接导致用户流失。&lt;/p&gt;
&lt;p&gt;运营商为了赚广告钱、省网间结算是不择手段的。
他们普遍使用的劫持手段是通过 ISP提供的 DNS 伪造域名。
那有没有什么方法可以解决 DNS 劫持呢？
业界有一套解决这类场景的方案，即 HTTPDNS。&lt;/p&gt;
&lt;p&gt;HTTPDNS 的原理很简单，将 DNS 这种容易被劫持的协议，转为使用 HTTP 协议请求 Domain &amp;lt;-&amp;gt; IP 映射。
获得正确 IP 之后，Client 自己组装 HTTP 协议，从而避免 ISP 篡改数据。&lt;/p&gt;
&lt;p&gt;有两篇文章很清晰的讲解了 HTTPDNS 的细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA3ODgyNzcwMw==&amp;amp;mid=201837080&amp;amp;idx=1&amp;amp;sn=b2a152b84df1c7dbd294ea66037cf262&amp;amp;scene=2&amp;amp;from=timeline&amp;amp;isappinstalled=0#rd"&gt;【鹅厂网事】全局精确流量调度新思路-HttpDNS服务详解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;腾讯这篇文章时间点是 2014 年，说明这个方案上线更早，也较为成熟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/speed/public-dns/docs/dns-over-https"&gt;DNS-over-HTTPS &amp;nbsp;|&amp;nbsp; Public DNS &amp;nbsp;|&amp;nbsp; Google Developers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;该方案更为先进，使用 HTTP 替换为 HTTPS，减少一个隐患点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="201611/httpdnsjbyl.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201611/httpdnsjbyl.png"/&gt;&lt;/p&gt;
&lt;p&gt;点击 &lt;a href="https://dns.google.com/resolve?name=www.duitang.com"&gt;https://dns.google.com/resolve?name=www.duitang.com&lt;/a&gt; /
&lt;a href="http://119.29.29.29/d?dn=www.duitang.com"&gt;http://119.29.29.29/d?dn=www.duitang.com&lt;/a&gt; 感受一下 DNS-over-HTTPS / HTTPDNS。&lt;/p&gt;
&lt;h2 id="dan-ip-duo-yu-ming-zhi-chi"&gt;单 IP 多域名支持&lt;/h2&gt;
&lt;p&gt;这个方案看似完美，但是在实际生产中，会遇到一个问题。&lt;/p&gt;
&lt;p&gt;Android / iOS 在操作系统级别对 HTTPS 通信是提供了封装。
APP 无法在发起连接时候，也没有权限直接操作 socket。
所以尽管 APP 拿到了域名对应的 IP，却没有办法让这个 IP 在 HTTPS 里生效。&lt;/p&gt;
&lt;p&gt;解决的思路很暴力：&lt;strong&gt;彻底放弃域名系统，完全使用基于 IP 系统的通讯。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原本请求 &lt;code&gt;https://www.duitang.com&lt;/code&gt; 的 request，
调整为请求 &lt;code&gt;https://221.228.82.181&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;OK，做到这一步，我们就可以跟运营商劫持说拜拜了。&lt;/p&gt;
&lt;p&gt;不，还没结束。&lt;/p&gt;
&lt;p&gt;完全搞定运营商之后，这 IP 方案给我们自己带来一个困扰：
&lt;strong&gt;Nginx 服务器无法通过 Host 来识别不同域名下面的请求了！！！&lt;/strong&gt;
在由于使用一个独立 IP，会导致所有域名请求混在一起，无法分别。
大公司可以 dedicated IP，小公司就玩不起了。&lt;/p&gt;
&lt;p&gt;为了解决同一个 IP 下面多个域名的问题，我们引入了一个URL参数： &lt;code&gt;__domain&lt;/code&gt;。
当请求 IP 域名时候，必须带着这个参数，服务器会将请求域名解析出来，再分发到对应的域名。&lt;/p&gt;
&lt;p&gt;实现这个逻辑的 Nginx 核心代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;query_domain&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;arg___domain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;query_domain&lt;/span&gt; &lt;span class="o"&gt;!~&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.example.com/404/ redirect;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;my_host&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;query_domain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;Host&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;my_host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;REAL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后一个注意事项是，记得调整 Nginx 配置的 remote_addr，否则都变成了 127.0.0.1，
也许会导致其他一些策略失效。&lt;/p&gt;
&lt;p&gt;完美收工，效果如下：&lt;a href="https://221.228.82.181/?__domain=www.duitang.com"&gt;https://221.228.82.181/?__domain=www.duitang.com&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;恭喜你，已经掌握核心科技了，再也不怕运营商瞎折腾了，从此走上了业务蓬勃发展的金光大道&amp;hellip;&amp;hellip;☀️&lt;/p&gt;
&lt;p&gt;下一篇文章，我会再谈谈如何做 HTTPS 的「内测」，避免将线上业务一次性切到 HTTPS 导致不少边边角角业务无法正常使用。&lt;/p&gt;
&lt;hr/&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/11/https-1/"&gt;https://blog.alswl.com/2016/11/https-1/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Wed, 30 Nov 2016 22:02:23 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-11-30:2016/11/https-1/</guid><category>HTTPS</category><category>HTTPDNS</category></item><item><title>API 集成测试实践</title><link>https://blog.alswl.com/2016/08/api-integration-test/</link><description>&lt;p&gt;&lt;img alt="abao.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201608/abao_thumbnail.png"/&gt;&lt;/p&gt;
&lt;p&gt;为了提高测试，工程师需要对自己提交的产物进行测试，一般是单元测试、集成测试。
之后提交物流转到 QA 团队，QA 团队根据需求描述对提交物进行测试，
这个测试过程非常耗费人力。
尤其是当开发交付的质量不高时候，很可能自身没有经过测试，会遇到主干流程都无法进行的状况。&lt;/p&gt;
&lt;p&gt;如果在 QA 人工介入测试之前，就进行一轮黑盒自动化集成测试，可以大大地提高 QA 团队的工作效率。
基于这样的判断，我们团队花了一些时间，将基于 API 的自动化测试系统搭建起来。
现在将这个系统的选型和运行状况拎出来，和大家分享。&lt;/p&gt;
&lt;h2 id="que-ren-ce-shi-fan-wei-mu-biao-he-yi-yi"&gt;确认测试范围、目标和意义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;范围&lt;ul&gt;
&lt;li&gt;后台输出的 API 级别 URL&lt;/li&gt;
&lt;li&gt;使用场景&lt;ul&gt;
&lt;li&gt;打包时候的冒烟&lt;/li&gt;
&lt;li&gt;Dev / QA 手工添加添加新特性用例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目标&lt;ul&gt;
&lt;li&gt;覆盖大部分的 URL，当期设计为 top 10 URL，仅包含 GET 接口&lt;/li&gt;
&lt;li&gt;选型时，需要考虑非幂等（POST / DELETE / PUT）等接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;意义&lt;ul&gt;
&lt;li&gt;提高开发效率，一种自动化的 IT 测试方案&lt;/li&gt;
&lt;li&gt;提高测试效率，减少人工集成测试成本&lt;/li&gt;
&lt;li&gt;提高工程质量，通过覆盖率提升，保证工程质量逐步提升，放心开发新功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="te-xing-xu-qiu"&gt;特性需求&lt;/h2&gt;
&lt;p&gt;选型一个系统，不是看市面上有哪些可以供选择，而是看我需要什么样特性的一款产品。
如果自己的需求和市面上的现成产品差异过大，也可以考虑自己定制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Required&lt;ul&gt;
&lt;li&gt;开源&lt;/li&gt;
&lt;li&gt;免费&lt;/li&gt;
&lt;li&gt;使用 DSL 或者简单代码描述测试用例&lt;/li&gt;
&lt;li&gt;支持细粒度的单 API 测试和构建带过程的测试用例&lt;/li&gt;
&lt;li&gt;HTTP API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optional&lt;ul&gt;
&lt;li&gt;CI 集成&lt;/li&gt;
&lt;li&gt;UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tiao-xuan-chu-lai-de-xuan-xing-he-ping-jie"&gt;挑选出来的选型和评价&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.runscope.com/"&gt;API Monitoring and Testing &amp;middot; Runscope&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;收费&lt;/li&gt;
&lt;li&gt;非开源&lt;/li&gt;
&lt;li&gt;有监控特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/software/bamboo"&gt;Bamboo - Continuous integration, deployment &amp;amp; release management | Atlassian&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;收费&lt;/li&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://circleci.com/features/"&gt;Continuous Integration Product and Features - CircleCI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;li&gt;收费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sauce Labs&lt;ul&gt;
&lt;li&gt;客户端测试，收费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apiary&lt;ul&gt;
&lt;li&gt;API 设计工具 + API Test&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://frisbyjs.com/"&gt;http://frisbyjs.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;code&lt;/li&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;open source&lt;/li&gt;
&lt;li&gt;NO UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vowsjs/api-easy"&gt;https://github.com/vowsjs/api-easy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;同上&lt;/li&gt;
&lt;li&gt;真是热爱造轮子的 JS 生态圈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/visionmedia/supertest"&gt;https://github.com/visionmedia/supertest&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;同上&lt;/li&gt;
&lt;li&gt;从 Star 看，这个质量最高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dareid.github.io/chakram/"&gt;http://dareid.github.io/chakram/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;code&lt;/li&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;open source&lt;/li&gt;
&lt;li&gt;NO UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vrest.io/"&gt;https://vrest.io/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;收费&lt;/li&gt;
&lt;li&gt;不开源&lt;/li&gt;
&lt;li&gt;无插件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://swagger.io/open-source-integrations/"&gt;http://swagger.io/open-source-integrations/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;for API&lt;/li&gt;
&lt;li&gt;生态环境强大&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cachecontrol/hippie-swagger"&gt;https://github.com/cachecontrol/hippie-swagger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用户端似乎在尝试用 swagger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://robotframework.org/"&gt;http://robotframework.org/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;一个通用自动化测试工具&lt;/li&gt;
&lt;li&gt;DSL&lt;/li&gt;
&lt;li&gt;扩展性较强&lt;/li&gt;
&lt;li&gt;活跃度在降低&amp;nbsp;&lt;a href="https://github.com/robotframework/robotframework/graphs/contributors"&gt;https://github.com/robotframework/robotframework/graphs/contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cucumber.io/"&gt;https://cucumber.io/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cucumber.io/docs/reference"&gt;https://cucumber.io/docs/reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;和 Robotframework 相似，通用自动化测试工具&lt;/li&gt;
&lt;li&gt;DSL&lt;/li&gt;
&lt;li&gt;活跃度降低&amp;nbsp;&lt;a href="https://github.com/cucumber/cucumber-jvm/graphs/contributors"&gt;https://github.com/cucumber/cucumber-jvm/graphs/contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.solanolabs.com/"&gt;https://www.solanolabs.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Airbnb 在用&lt;/li&gt;
&lt;li&gt;收费&lt;/li&gt;
&lt;li&gt;云端的通用测试环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/christophd/citrus"&gt;https://github.com/christophd/citrus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.citrusframework.org/"&gt;http://www.citrusframework.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;依赖 mvn / ant，离代码太近&lt;/li&gt;
&lt;li&gt;项目不够活跃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码内测试&lt;ul&gt;
&lt;li&gt;src/it/com/duitang/xxx&lt;/li&gt;
&lt;li&gt;eg. tritornis&lt;/li&gt;
&lt;li&gt;Spring&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html"&gt;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.spring.io/autorepo/docs/spring-framework/3.2.x/spring-framework-reference/html/testing.html"&gt;http://docs.spring.io/autorepo/docs/spring-framework/3.2.x/spring-framework-reference/html/testing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这部分工作，是和团队的其他成员一起去看的，大家各自分头寻找一些产品，然后进行评测，给出结论。&lt;/p&gt;
&lt;p&gt;经过讨论，我们将重点关注放在这么几款下面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;supertest&lt;/li&gt;
&lt;li&gt;robotframework&lt;/li&gt;
&lt;li&gt;swagger&lt;/li&gt;
&lt;li&gt;讨论时候的新发现&amp;nbsp;&lt;a href="https://github.com/svanoort/pyresttest"&gt;https://github.com/svanoort/pyresttest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="da-jian-demojin-xing-shi-yong"&gt;搭建 demo，进行试用&lt;/h2&gt;
&lt;p&gt;在确定选用那几款产品之后，就可以集中精力在几款候选者里面。搭建相应的环境，对他们进行实际测试。&lt;/p&gt;
&lt;p&gt;supertest：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能太简单了，简单到几乎可以自己写掉，不算一个 test framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pyresettest：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈哈哈，YAML based，dreamed feature&lt;/li&gt;
&lt;li&gt;支持 YAML / extractor / validator&lt;/li&gt;
&lt;li&gt;天生支持 host 为参数&lt;/li&gt;
&lt;li&gt;create for me!!!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hippie-swagger：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在使用上，和 supertest 差异不大&lt;/li&gt;
&lt;li&gt;仍然需要自己定义，在 swagger 描述文件不存在时候会抛错，描述文件不符合时会抛错&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;robotframework：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;较为复杂&lt;/li&gt;
&lt;li&gt;有 YAML 了，不用试了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="shi-yong-gan-jue"&gt;使用感觉&lt;/h2&gt;
&lt;p&gt;经过一个季度的试用，我们基于 pyresttest 的项目 abao 运行较稳定。
尽量在工程师提交代码之后，运行一次，从而可以在早期发现问题。&lt;/p&gt;
&lt;p&gt;由于是基于 Python 的源代码，我们还给 pyresttest 开发了几款插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie_extractor：用来解析特定的 cookie&lt;/li&gt;
&lt;li&gt;file_choice_generator：从文件随机选择预设数据&lt;/li&gt;
&lt;li&gt;file_seq_generator：从文件顺序选择预设数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在和 CI 的配合方面，我们在 Jinkins 搭建了 abao / abao-master 项目，
前者响应每次 Push 请求，都会自动构建一遍，后者每天凌晨会将 master 运行一遍。&lt;/p&gt;
&lt;p&gt;感谢项目贡献者：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abao&lt;/span&gt;
 &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;months&lt;/span&gt;
 &lt;span class="n"&gt;active&lt;/span&gt;   &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;
 &lt;span class="n"&gt;commits&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;109&lt;/span&gt;
 &lt;span class="n"&gt;authors&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="mi"&gt;39&lt;/span&gt;  &lt;span class="n"&gt;Chery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Peng&lt;/span&gt;  &lt;span class="mf"&gt;35.8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
    &lt;span class="mi"&gt;33&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;          &lt;span class="mf"&gt;30.3&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
    &lt;span class="mi"&gt;17&lt;/span&gt;  &lt;span class="n"&gt;yanqi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;chen&lt;/span&gt;  &lt;span class="mf"&gt;15.6&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
    &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="err"&gt;橙子&lt;/span&gt;        &lt;span class="mf"&gt;10.1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
     &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="n"&gt;fiona66&lt;/span&gt;     &lt;span class="mf"&gt;6.4&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
     &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="err"&gt;雪糕&lt;/span&gt;        &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;参考文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/integrations"&gt;Integrations Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/search.action?queryString=%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95&amp;amp;page=1&amp;amp;searchOrder=&amp;amp;sst=guKeEhPzzhUs7xpS"&gt;http://www.infoq.com/cn/search.action?queryString=%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95&amp;amp;page=1&amp;amp;searchOrder=&amp;amp;sst=guKeEhPzzhUs7xpS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/news/2014/02/autotest-2013"&gt;http://www.infoq.com/cn/news/2014/02/autotest-2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/articles/cucumber-robotframework-comparison"&gt;http://www.infoq.com/cn/articles/cucumber-robotframework-comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform"&gt;http://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nerds.airbnb.com/testing-at-airbnb/"&gt;http://nerds.airbnb.com/testing-at-airbnb/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google keywords&lt;ul&gt;
&lt;li&gt;integration api test framework&lt;/li&gt;
&lt;li&gt;github intergration test&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/08/api-integration-test/"&gt;https://blog.alswl.com/2016/08/api-integration-test/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sun, 14 Aug 2016 19:08:20 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-08-14:2016/08/api-integration-test/</guid><category>Test</category><category>API</category></item><item><title>搞定暴涨的流量</title><link>https://blog.alswl.com/2016/06/capacity-planning/</link><description>&lt;p&gt;2013 年左右，我司业务发展迅速，每天晚上都会面临服务器濒临崩溃情况。
我相信每个高速发展的互联网企业在某个阶段都会面临这样的情形，比如去年爆红的「足迹」。
过程往往是：线上出现故障，手机会收到报警，然后登录到服务器上去解决问题。
处理这种问题工种现在有一个时髦的名称，叫做「SRE（Site Reliability Engineer）」系统可用性工程师。&lt;/p&gt;
&lt;p&gt;虽然我常常救火，但是我还是想尽可能避免线上发生故障。「最好的消息，就是没有消息。」
减少故障出现概率，增强系统可用性，降低故障处理时间是 SRE 的最大课题。
在这里有最常用的两个手段，一个是优化性能，一个是做好容量规划和扩展。
这里我着重讨论后者「容量规划」。&lt;/p&gt;
&lt;p&gt;&lt;img alt="看我的一堆报警消息" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201606/message.png"/&gt;&lt;/p&gt;
&lt;p&gt;^ 看我的一堆报警消息&lt;/p&gt;

&lt;h2 id="mian-lin-de-wen-ti"&gt;面临的问题&lt;/h2&gt;
&lt;p&gt;面对暴涨流量，一边是业务方的满心欢喜，一边就是工程师的烦恼和压力了。
也许是一个受欢迎的功能上线了，或者是某个社会活动导致流量爆发，系统开始出现高延迟，磁盘 IO 不够用了。
也许是 DB 第一个倒下，也许是 RPC 系统第一个倒下&amp;hellip;&amp;hellip;
呃，大神可能会说，我艹，RPC 系统第一个倒下还搞个屁啊，赶紧倒闭算了。&lt;/p&gt;
&lt;p&gt;核心的问题就是，在现有性能下面，在面临可能的大流量冲击时候，如何做到不慌不忙，能够 handle 住突如其来的流量？&lt;/p&gt;
&lt;h2 id="she-ding-rong-liang-mu-biao"&gt;设定容量目标&lt;/h2&gt;
&lt;p&gt;在解决这个问题之前，我们得先考虑清楚，我们到底要多强的流量处理能力。
如果今天我们只是一个两三台服务器的小团队，却企图设计一个能够抗住 1 亿 pv 访问的系统，
显然是不现实的，至少是不经济的。&lt;/p&gt;
&lt;p&gt;衡量系统容量的指标可以简化为在什么流量下面，提供什么样的可用性保证。
一个实际的样例是，在 1 亿 pv 下面，提供 99.99% 的可用性，
其可用性的评判标准是「服务器在 200ms 内返回正确的数据」。&lt;/p&gt;
&lt;p&gt;这里有一个重要的概念，可用性保证，术语是服务等级协议（SLA）。
这个指标可以从大部分标准云供应商的标准条款里看到，比如我司机房供应商提供的可用性保证是 99.9%。
阿里云 ECS 的 SLA 是「99.95%」，统计周期是 1 个月
（如果故障时间低于 5 min，不计入故障时间，云供应商都这样，特别霸权）。&lt;/p&gt;
&lt;p&gt;一个对 SLA 的直观认识是（具体数据来自 &lt;a href="https://en.wikipedia.org/wiki/High_availability#Percentage_calculation"&gt;High availability - Wikipedia, the free encyclopedia&lt;/a&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;99.0% 意味着一年有 87 天不可用&lt;/li&gt;
&lt;li&gt;99.5% 意味着一年 1.83 天不可用&lt;/li&gt;
&lt;li&gt;99.9% 意味着一年 8.76 小时不可用&lt;/li&gt;
&lt;li&gt;99.99% 意味着一年 52.56 分钟不可用&lt;/li&gt;
&lt;li&gt;99.999% 意味着一年 5 分 15 秒不可用，这是高可用的一般标准&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设定越高的 SLA 的成本越高，具体 SLA 的设定是成本、收益、期望的平衡。
不同的业务需要的 SLA 也不一样，一般认为 99.9% 基本可用，99.99% 可用性较高，
99.999% 为高可用。&lt;/p&gt;
&lt;p&gt;有些云供应商号称 8 个 9，9 个 9，那往往都是对于存储服务里面的数据不丢失这个指标。
除了忽悠忽悠人，这个 SLA 没什么用的。&lt;/p&gt;
&lt;h2 id="ce-liang"&gt;测量&lt;/h2&gt;
&lt;p&gt;做一件伟大事情时候，先有目标，下一步如果是迈出脚步出去闯荡，那么往往换来的是一个身心疲惫的自己。
更稳当的做法是，先摸摸清楚，自己有几把刷子，是不是还要再练练，有没有资格上战场。
没有 Profiling，就是瞎子，根本不用谈优化和容量规划。&lt;/p&gt;
&lt;p&gt;对于一般的业务场景而言，常见的测量指标分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器的硬件指标（CPU、内存、硬盘 IO、硬盘容量、网络）&lt;/li&gt;
&lt;li&gt;服务的软件指标（QPS / latency / pool）&lt;/li&gt;
&lt;li&gt;业务的数据指标（核心业务指标，比如注册数，核心动作次数）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我司的实践情况是这样的，我们使用 Zabbix 测量服务器，用自己设计的系统收集服务数据，使用 Grafana 呈现。
后者被设计到 RPC 系统内部，数据是全量收集。
我司在业务层面的数据监控做的还不足，这种不足不仅仅体现在数据的全面性上面，还体现在相关成员（比如产品汪）对数据的利用率上面。&lt;/p&gt;
&lt;p&gt;除了测量线上的实施数据，了解某个设施的性能极限也是很重要，目前常见的测量方式是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模拟流量进行测试&lt;/li&gt;
&lt;li&gt;在线上进行测试，并实时跟踪进展情况，出现异常时候，停止流量切入&lt;/li&gt;
&lt;li&gt;从线上引入流量到测试环境进行测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我发现，第一种方法往往不准，第三种方法对于小团队来说，成本太高。第二种方法是最粗暴和有效的。&lt;/p&gt;
&lt;h2 id="yu-jing-he-ti-xing"&gt;预警和提醒&lt;/h2&gt;
&lt;p&gt;仅仅知道当前系统的性能表现是不足的，重要的如何将这些数据利用起来，对未来系统增长进行预估。
流量增长 vs 资源消耗，这个曲线大部分情况是线性的，有些情况确实指数增长的。&lt;/p&gt;
&lt;p&gt;常见的做法是，给核心指标设置一个阈值（比如 80% 磁盘使用率，40% 磁盘 IO 利用率），当监控的数据到达这个阈值时候。
就必须进行容量扩充，进行负载均衡。&lt;/p&gt;
&lt;p&gt;一个从运维同学身上学到的是，提前采购一些设备放到机房里面，比如硬盘、内存，别到时候供应商来不及供货。
必要库存可以降低 MTBF。&lt;/p&gt;
&lt;p&gt;除了设定阈值报警，应当定期跑一些脚本获得数据。定期检查报警系统，避免报警系统失效。&lt;/p&gt;
&lt;h2 id="bi-xuan-xiang-scalable"&gt;必选项 - Scalable&lt;/h2&gt;
&lt;p&gt;上文写到，「必要时候进行容量扩充，进行负载均衡」。
这点的提出，意味这需要&lt;strong&gt;保证基础设施是可扩展的，支持负载均衡，支持硬件扩容&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Web 系统比较容易做到横向扩容，使用 Nginx / LVS 等负载均衡即可。
中间件服务一般也是在设计时候就考虑了扩展。（什么？你们家 RPC 系统设计调用不支持扩展？什么脑残设计？！）&lt;/p&gt;
&lt;p&gt;DB 级别的服务，往往就要花一些心思了，一些技术（比如 MySQL）想要做到横向扩展，
需要进行提前设计。而一些设施虽然容易进行扩展，比如 ES / Kafka 等现代化设施，
但在部署的时候仍然要进行一些提前准备。&lt;/p&gt;
&lt;p&gt;除了提前做好 Scalable，还有几个和部署相关的 tips 可以供参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用工具：自动化部署，现在有太多工具可以供选择，比如 ansible 就是一个很好的工具&lt;/li&gt;
&lt;li&gt;automatic everything：避免登录服务器操作才能保证未来自动化&lt;/li&gt;
&lt;li&gt;工程化：用最佳实践去维护部署系统，用工程化的态度去写部署代码&lt;/li&gt;
&lt;li&gt;保持同质，避免花样：避免使用 shell 级别的操作原语操作部署系统，使用预设的 module 去操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="end"&gt;End&lt;/h2&gt;
&lt;p&gt;好了，现在去预测一下当大流量来临之际，你的服务会在哪些环节失败。
想不出来的话，就一点点去测量各个环节性能，然后做一把容量规划吧。&lt;/p&gt;
&lt;p&gt;调优和增加容量，这是两个手段，这两个手段互相作用，互相影响。使用时候需要根据成本和收益进行选择。&lt;/p&gt;
&lt;p&gt;关于容量规划的更多细节，可以看看 &lt;a href="https://book.douban.com/subject/4200645/"&gt;Web容量规划的艺术 (豆瓣)&lt;/a&gt;
这里看看。只是这本书写在 2010 年，并且作者介绍的过于传统运维视角一些。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/06/capacity-planning/"&gt;https://blog.alswl.com/2016/06/capacity-planning/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sun, 19 Jun 2016 23:57:39 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-06-19:2016/06/capacity-planning/</guid><category></category></item><item><title>一次「分答」记录</title><link>https://blog.alswl.com/2016/06/q-and-a/</link><description>&lt;p&gt;尝试在团队内部发起一次类似「分答」的沟通方式，一对一面聊。
回答其他工程师的问题，这种沟通的方式暨在提供一个特定的场合，帮助加强双方了解，
解决团队中其他工程师的一些实际的问题。&lt;/p&gt;
&lt;p&gt;在征得对方同意之后，我将他的问题和我的回答 PO 出来。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201606/questions-and-answers.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201606/questions-and-answers.jpg"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;喜欢什么游戏，玩游戏的问题&lt;ul&gt;
&lt;li&gt;喜欢和人玩游戏，不喜欢和不认识网友玩游戏&lt;/li&gt;
&lt;li&gt;小学从红月开始玩，传奇、CS、魔兽、真三、DOTA，大学时候和舍友玩游戏，毕业后不玩&lt;/li&gt;
&lt;li&gt;minecraft 尝试着玩过，没有玩下去，找不到人&lt;/li&gt;
&lt;li&gt;日活的桌面游戏，三国杀等蛮喜欢&lt;/li&gt;
&lt;li&gt;不喜欢浪费时间，怕没控制&lt;/li&gt;
&lt;li&gt;从玩游戏里面学习什么么？不，就是纯粹享受游戏，不会想这么多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;喜欢什么语言&lt;ul&gt;
&lt;li&gt;看场合，小东西，小场景用 Python，生产环境用 Java，生产环境又有时间，考虑 Scala&lt;/li&gt;
&lt;li&gt;只允许选一门语言，就用 Python&lt;/li&gt;
&lt;li&gt;最吸引的特点，熟悉程度高，生产效率高，第三方库丰富，粘合性强&lt;/li&gt;
&lt;li&gt;为 Python 做一些功能扩展？不同时期答案会不一样，目前来说，希望有一个开发效率更高的 framework；有时间的话，会考虑如何绕过底层 GIL 问题 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有什么事情投入精力，铩羽而归&lt;ul&gt;
&lt;li&gt;工具向重的人，推广 git 花了两年，推广 Restful 不利&lt;/li&gt;
&lt;li&gt;做业务开发 leader，和 tsu、小管一起做，项目管理、团队管理没做好，没做好，有挫败感。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;职业迷茫期&lt;ul&gt;
&lt;li&gt;我作为一个学渣，并且长期以来没有人给予职业生涯规划，一直对自己未来发展有困惑&lt;/li&gt;
&lt;li&gt;如何在无领导的情况之下，探索未来道路，规划自己工作内容？跟优秀的人聊，跟外部的人聊，看博客，看书&lt;/li&gt;
&lt;li&gt;迷茫是客观存在的，并且可能持续存在很久，正视它&lt;/li&gt;
&lt;li&gt;现实中一定会遇到各种挑战和困难的，用挑战和困难填充自己，丰富自己的生活&lt;/li&gt;
&lt;li&gt;迷茫是未知，有恐惧，有兴奋。对当前的我来说，恐惧可能更多，但是要面对&lt;/li&gt;
&lt;li&gt;职业生涯里面，前期的同质度更高，资深工程师可以会给初级工程师规划清晰一些，但是越往后期，越难规划，需要自己探索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推荐书&lt;ul&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/people/alswl/collect?sort=rating&amp;amp;start=0&amp;amp;filter=all&amp;amp;mode=list&amp;amp;tags_sort=count"&gt;https://book.douban.com/people/alswl/collect?sort=rating&amp;amp;start=0&amp;amp;filter=all&amp;amp;mode=list&amp;amp;tags_sort=count&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学习来源&lt;ul&gt;
&lt;li&gt;博客，infoq 等专业信息来源&lt;/li&gt;
&lt;li&gt;书籍&lt;/li&gt;
&lt;li&gt;周围的人&lt;/li&gt;
&lt;li&gt;尽可能从每天时间挤出时间阅读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生活和工作平衡点&lt;ul&gt;
&lt;li&gt;不同的人，同一个人的不同时期所需要的平衡不一样&lt;/li&gt;
&lt;li&gt;对自己人生期望不一样的人，平衡点不一样&lt;/li&gt;
&lt;li&gt;对我来说，目前阶段不存在明显边界，尽可能投入工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何保持激情&lt;ul&gt;
&lt;li&gt;人总是有低谷期的，不可能一直保持亢奋，除非是甲亢&lt;/li&gt;
&lt;li&gt;短期情绪会有起伏，长期来看，保持梦想和对自己高要求，可以帮助保持激情&lt;/li&gt;
&lt;li&gt;我有低谷期，低谷期适合反思&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何擦屁股&lt;ul&gt;
&lt;li&gt;现实是残酷的，总有屁股要擦，自己也有脏屁股，今天要给昨天的自己擦屁股&lt;/li&gt;
&lt;li&gt;现实中存在脏屁股，尽可能了解它，看代码、文档，设计方案，了解的人，让自己变舒服&lt;/li&gt;
&lt;li&gt;责任心的体现，做好当下的事情；解决这样的问题，解决当前的问题；避免留下脏屁股，设计好，规划好&lt;/li&gt;
&lt;li&gt;责任心的话很虚。一个人做擦屁股、低产值的事情，从长远来看，是错的；短期需要撑下来；并且帮助团队避免这样的事情发生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最有成就感的事情&lt;ul&gt;
&lt;li&gt;顶着家庭压力，到上海来&lt;/li&gt;
&lt;li&gt;在堆糖改造环境，提升自己心智水平，不害怕问题，自信，自省&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/06/q-and-a/"&gt;https://blog.alswl.com/2016/06/q-and-a/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Wed, 15 Jun 2016 09:59:16 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-06-15:2016/06/q-and-a/</guid><category></category></item><item><title>海贼王和创业团队</title><link>https://blog.alswl.com/2016/04/onepiece-startup/</link><description>&lt;p&gt;一个同事在知乎提了一个问题 &lt;a href="https://www.zhihu.com/question/35037806"&gt;如果把草帽海贼团比作一个创业团队,这个Team的组织架构是怎样的?有哪些优势,又有哪些不足?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="201604/onepiece.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201604/onepiece.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;这个话题很有趣，作为追了多年的 fans ，又是身处互联网创业团队的我要来强答一记。&lt;/p&gt;
&lt;p&gt;海贼王的世界很大，富有个性的角色和团队也很多，恰好可以和显示世界中的互联网创业团队进行对比。
柳传志讲的好，做大事，要「建班子，定战略，带队伍」，我们就着金句来看看草帽这个团队怎么样。&lt;/p&gt;

&lt;h2 id="chan-pin-he-zhan-lue"&gt;产品和战略&lt;/h2&gt;
&lt;p&gt;我先讲产品和战略。&lt;/p&gt;
&lt;p&gt;由于海贼王世界的设定，以及作为一个全年段漫画动画的原因。
海贼王世界的整体战略是较为简单，海贼团的目标都较为单一，即「找到 哥尔 D 罗杰 留下的宝藏」。
海贼团们实现目标的路径也较为单一，打斗增强战斗力，不断寻找线索，去伟大航道寻找宝藏。&lt;/p&gt;
&lt;p&gt;所以故事的开展反而是围绕另外一条隐秘的线索「历史的真相」，尾田大神埋坑很深。
「历史的真相」并不是作为大部分人努力和前进的目标，所以「海贼王」世界的故事虽然曲折跌宕，
但是产品模型极为单一，不具备太多可以讨论的点。&lt;/p&gt;
&lt;h2 id="tuan-dui"&gt;团队&lt;/h2&gt;
&lt;p&gt;接着讲团队，一个团队第一重要的是创始人，这必须要是一位领袖人物。&lt;/p&gt;
&lt;p&gt;评价领袖优秀程度，从这么几个角度评价：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意志力：打不死的小强，不达目标誓不罢休&lt;/li&gt;
&lt;li&gt;专业技能：能打、脑子灵光、心灵手巧、一技之长&lt;/li&gt;
&lt;li&gt;规划能力：除了体力值和专业智慧，也要讲讲战略和谋略&lt;/li&gt;
&lt;li&gt;管理能力：沟通协调、团队管理促进能力，能够带领团队实现目标，促进他人成长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以这个标准来看几个具有领袖气质的角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路飞&lt;ul&gt;
&lt;li&gt;意志力：5&lt;/li&gt;
&lt;li&gt;专业技能：5&lt;/li&gt;
&lt;li&gt;规划能力：1（率性而为的大爷）&lt;/li&gt;
&lt;li&gt;管理能力：1（团队自由生长）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;白胡子&lt;ul&gt;
&lt;li&gt;意志力：5&lt;/li&gt;
&lt;li&gt;专业技能：5&lt;/li&gt;
&lt;li&gt;规划能力：4（顶上之战的过程证明）&lt;/li&gt;
&lt;li&gt;管理能力：5（队长们的成长和忠诚度证明）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多弗朗明哥&lt;ul&gt;
&lt;li&gt;意志力：5&lt;/li&gt;
&lt;li&gt;专业技能：5&lt;/li&gt;
&lt;li&gt;规划能力：5&lt;/li&gt;
&lt;li&gt;管理能力：5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;艾斯&lt;ul&gt;
&lt;li&gt;意志力：5&lt;/li&gt;
&lt;li&gt;专业技能：4（以牺牲的时间点战斗力打分）&lt;/li&gt;
&lt;li&gt;规划能力：2（追踪黑胡子，一个人冒进，被黑胡子摆了一道）&lt;/li&gt;
&lt;li&gt;管理能力：2（也就混到一个队长，能够鼓励其他人，但是没发现黑胡子成长的问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;唐僧（乱入一个对比）&lt;ul&gt;
&lt;li&gt;意志力：5+&lt;/li&gt;
&lt;li&gt;专业技能：4（熟读经书算不算专业能力？）&lt;/li&gt;
&lt;li&gt;规划能力：0&lt;/li&gt;
&lt;li&gt;管理能力：0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上面的判断可以看出，对于一个领袖而言，路飞仅仅是不错，但是谈不上多么优秀，
倒是白胡子，典范啊典范。&lt;/p&gt;
&lt;p&gt;根据上面提到的能力模型，草帽海贼团的其他角色大家也可以心里评估出来了：
大部分人都是意志力、专业技能强悍（即便是乌索普，射击能力也是可以评上 3），但是同时也在规划能力和管理能力上面较弱。&lt;/p&gt;
&lt;p&gt;唉，这么弱，很难继续支撑草帽海贼团继续走下去啊，怎么办呢？&lt;/p&gt;
&lt;h2 id="dai-dui-wu"&gt;带队伍&lt;/h2&gt;
&lt;p&gt;草帽海贼团，一个极为漂亮的「自组织团队」。&lt;/p&gt;
&lt;p&gt;什么是「自组织团队」？来自 InfoQ 的一篇文章 &lt;a href="http://www.infoq.com/cn/articles/what-are-self-organising-teams"&gt;什么是自组织团队？&lt;/a&gt; 里面讲到团队的特性：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;分散式的控制，也就是说与集中式的控制截然相反，&lt;/li&gt;
&lt;li&gt;不断适应改变的环境，&lt;/li&gt;
&lt;li&gt;在局部相互作用下自然浮现出来的结构,&lt;/li&gt;
&lt;li&gt;反馈，包括肯定的和否定的&lt;/li&gt;
&lt;li&gt;弹性，归结于系统修复和调整的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;用简单的关键词概括，其实是这么几个关键词：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自行决策&lt;/li&gt;
&lt;li&gt;自己成长&lt;/li&gt;
&lt;li&gt;适应环境变化&lt;/li&gt;
&lt;li&gt;团队内部信任并且沟通顺畅&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从这几个关键词来看，草帽海贼团和这种自组织模式极为匹配。路飞从来不会发号施令，统一调度，顶多喊几句口号振奋一下大家。
路飞自身的规划能力和帮助他人成长的能力也远不及格。团队里面其他的成员，索隆、香吉士等的成长，完全是靠自己，
甚至在「两年」跨度这么长的时间，尾田也是借外部力量帮助团队这些成员成长，而不是依靠领袖来培养成员。&lt;/p&gt;
&lt;p&gt;路飞选择这种自组织模式，不仅仅是一种巧合，更多的是一种逼不得已。尾田大神写的就是青春热血漫画，要是换成一个有勇有谋，
那就成主旋律电视剧了，大家可能也是因为路飞这种优点和缺点喜欢他。&lt;/p&gt;
&lt;h3 id="anti-zi-zu-zhi-mo-shi"&gt;Anti-自组织模式&lt;/h3&gt;
&lt;p&gt;和「自组织模式」相反的情况，可以参照一下多弗朗明哥的团队。我们可以看到，在多弗朗明哥团里里面，有严密的等级关系（四大干部，家族干部，普通小兵），
有帮助人才成长的流程（培训罗的一系列流程）。
这种设定也是多弗朗明哥的战略能力和管理能力的体现。&lt;/p&gt;
&lt;p&gt;还有一种更极致的组织模式「集权模式」，由核心层发号施令，协同作战。
海贼王的世界里，较少发现这样的模式，反派角色海军有一点点像。
倒是另外一部作品「星球大战」，其中的帝国、第一秩序，都是典型的 Manager 发号施令，底层士兵只要好好作战即可。
统一培养成行的克隆人，就可以支撑这样的团队发挥十足战力。&lt;/p&gt;
&lt;p&gt;这种集权模式，缺少向上反馈能力，缺少自发的创新能力。在业务发展顺利规模扩张阶段，也许可以发展不错，但是长久以往，
核心层必然会发觉创新力和驱动力不足，花费大量的精力在管理、制度建设、奖惩机制上面。&lt;/p&gt;
&lt;p&gt;路飞的缺点和优点一样鲜明，他很幸运的（可能也完全不知道）使用了「自组织团队」这种模式，完成了创业的起步阶段。
但是这种模式有也有自带的缺陷，需要目标一致性很高，团队成员自身有极高成长度。一旦遇到业务爆炸（顶上之战这种规模的战役），
这团队就完蛋了。期望路飞在未来的航道上，注意培养一下自己不善于的能力。好消息是，从最近的「庞克哈撒德篇」和「德雷斯罗撒篇」战况来看，
路飞已经开始学会制定「寻找友军结盟」、「树立竞争对手标杆」这样的初级战略方案了。&lt;/p&gt;
&lt;h2 id="mo_1"&gt;末&lt;/h2&gt;
&lt;p&gt;海贼王的世界，真的就是现实中「海盗」的正式写照吧。完成不可能的目标，成就团队，成就自己。&lt;/p&gt;
&lt;p&gt;「世代传承的意志，时代的变迁，人们的梦，只要人们继续追求自由的答案，这一切的一切都将永不停止.这世界&amp;hellip;&amp;hellip;没错！一个追求自由任凭选择的世界，就在我们的眼前无限地延伸，如果我们的梦想可以引导你的方向的话，就去追寻吧！在名为信念的旗帜下」&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/04/onepiece-startup/"&gt;https://blog.alswl.com/2016/04/onepiece-startup/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Wed, 27 Apr 2016 00:36:10 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-04-27:2016/04/onepiece-startup/</guid><category></category></item><item><title>Windows management for hacker</title><link>https://blog.alswl.com/2016/04/windows-management-for-hacker/</link><description>&lt;p&gt;团队里的同学有时看见我键指如飞，可以用快捷键将 Mac 的窗口玩转于手心。他们表示酷炫非常，
心生羡慕的同时，希望掌握这门技艺，我就把使用的 Phoenix 介绍给大家。结果过了一段时间，
发现普及率并不高，本着好为人师的精神，今天我就来八一八这款优秀的桌面管理工具。&lt;/p&gt;
&lt;p&gt;在介绍我使用的工具之前，我要先介绍一下我选择的原因和历史。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201604/ergodox_infinity.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201604/ergodox_infinity.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;ps：配图是我长草多年的 Ergodox Infinity。（@夫人，看到这里的时候，请留步思考 5s）。&lt;/p&gt;
&lt;h2 id="alttab-ku-nan-de-li-shi"&gt;Alt+Tab = 苦难的历史&lt;/h2&gt;
&lt;p&gt;当我还年轻的时候，曾经对 Alt+Tab 这个快捷键愤慨无比，觉得这种设计虽然简单但是很蠢。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;命中率低&lt;/strong&gt;。要在茫茫图标中查找自己需要的窗口，如果开了 20 个应用，切换到一个非常用窗口至多可能需要 20-1 次按键。
    不要跟我说有 Alt+Shift+Tab 的反向循环操作，估计大部分用户都不知道。而且 正向/反向 切换伤脑子。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交互方式耗时&lt;/strong&gt;。由于 Alt+Tab 的操作需要用户进行反馈才能进行，是 &lt;code&gt;眼-手-眼-手&lt;/code&gt; 的操作反馈方式，
    这种交互模式费时费脑子。跟这种需要实时反馈对立的交互模式应当是类似「一键呼出」的操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在大显示器、多显示器的环境下面，Alt-Tab 模式没有做任何优化&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;频繁切出窗口进行切换，容易让人分神，比如切换时候看到某个播放器的标题，在放一首喜欢的歌，很可能吸引过去。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有人会问，难道不优化都是缺陷么？
    我的答案是肯定的。Alt+Tab 是几乎除鼠标之外的唯一一种窗口操作方式。如果它不能跟上时代的步伐，
    对大显示器、多显示器做优化，那就是不作为，不努力，不上进。跟不上变化是要被淘汰的！&lt;/p&gt;
&lt;p&gt;&lt;img alt="201604/alt_tab_windows.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201604/alt_tab_windows.jpeg"/&gt;&lt;/p&gt;
&lt;h2 id="ping-pu-shi-chuang-kou-guan-li-qi"&gt;平铺式窗口管理器&lt;/h2&gt;
&lt;p&gt;在被 Windows Alt-Tab 虐了多年之后，我长大了，开始接触 Linux，但是这种痛苦仍然时刻包围着我。
当我分期购买一个外置显示器之后，这种痛苦到达到了顶端。
恰好彼时我是 &lt;a href="https://www.archlinux.org/"&gt;ArchLinux&lt;/a&gt; 的信徒，很快就发现了一片桃源：
自己安装 &lt;a href="https://wiki.archlinux.org/index.php/window_manager"&gt;Window manager&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我重新认识了桌面系统世界，除了介绍常规的 Gnome / KDE / xfce 之外，还有一类窗口管理系统，他们叫做「平铺式窗口管理器」。
（严格来说，Gnome / KDE / xfce 属于 Desktop environment，层级比「窗口管理系统」要高，我这里不做严格区分）。&lt;/p&gt;
&lt;p&gt;什么是平铺式窗口管理器？来一个直观的认识：&lt;/p&gt;
&lt;p&gt;&lt;img alt="201604/awesome_1.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201604/awesome_1.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="201604/awesome_2.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201604/awesome_2.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;官方的解释是&amp;hellip;&amp;hellip;呵呵，自己点进去看解释吧。平铺式桌面管理器（包括同时支持平铺式和堆叠式的混合式桌面管理器）给我带来了新的认知，
原来桌面系统是可以进行接口编程的，我不那么 care 到底是哪种风格，我 care 的是，
能否通过编程定制来解决我的 Alt-Tab 问题。&lt;/p&gt;
&lt;h2 id="wo-qi-wang-de-chuang-kou-guan-li-mo-shi"&gt;我期望的窗口管理模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;快速启动最常用的应用，同时也能将其快速呼出&lt;/li&gt;
&lt;li&gt;对大屏幕友好，现在显示器普遍是大屏幕，可以自由控制窗体的移动，方便多个窗口同时进行操作&lt;/li&gt;
&lt;li&gt;对多屏幕友好，多屏幕间的切换，要友好。可以快速屏幕间切换&lt;/li&gt;
&lt;li&gt;对键盘友好，对鼠标友好，全键盘操作模式，但同时要对鼠标友好，比如鼠标跟随焦点功能，毕竟一些操作还是鼠标方便&lt;/li&gt;
&lt;li&gt;帮助集中注意力，将操作界面隔离成多个目的区分的空间，比如写作时候，期望只有一个 Evernote + Chrome 在眼前&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wo-zai-mac-xia-mian-de-fang-an"&gt;我在 Mac 下面的方案&lt;/h2&gt;
&lt;p&gt;呜呼，感谢伟大的 &lt;a href="https://github.com/jasonm23/"&gt;Jason Milkins&lt;/a&gt; 做了一堆尝试，
创造了一堆乱七八糟的桌面管理器。然后感谢 &lt;a href="https://github.com/kasper"&gt;Kasper Hirvikoski&lt;/a&gt;
在 Jason 拍拍屁股走人之后，接过了 Jason 的棒子，将 Phoenix 这个项目快速推进，解决了一堆导致不可用的 bug，
并新增了很多特性。&lt;/p&gt;
&lt;p&gt;回到要介绍的主角身上，&lt;a href="https://github.com/kasper/phoenix"&gt;Phoenix&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A lightweight OS X window and app manager scriptable with JavaScript&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本特性是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Javascript 作为配置文件，定制性超级强&lt;/li&gt;
&lt;li&gt;支持 App / Window / Space / Screen 等对象的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 Phoenix，我达成了我的窗口管理模式的目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速启动&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Option&lt;/code&gt; + ` / 1 / 2 / 3 / 4 / 8 / 9 / e / a / s / z /, / . / / 启动&lt;/li&gt;
&lt;li&gt;iTerm / Chrome / Safari / QQ / Bearychat / Wechat / Neteasy Music / MacVim / IntelliJ IDEA / Macdown / Mail / Evernote / Finder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;窗口操作&lt;ul&gt;
&lt;li&gt;Option + - / =&lt;ul&gt;
&lt;li&gt;大小控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option + m&lt;ul&gt;
&lt;li&gt;窗口移动到屏幕中央&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option + Space&lt;ul&gt;
&lt;li&gt;鼠标找回到窗口中央&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;屏幕内操作&lt;ul&gt;
&lt;li&gt;Option + J / K&lt;ul&gt;
&lt;li&gt;焦点在同屏幕窗口切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ctrl + Option + J / K / H / L&lt;ul&gt;
&lt;li&gt;窗口移动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;屏幕间操作&lt;ul&gt;
&lt;li&gt;Option + H / L&lt;ul&gt;
&lt;li&gt;焦点左右屏幕切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Space 操作&lt;ul&gt;
&lt;li&gt;Option + I / O&lt;ul&gt;
&lt;li&gt;Space 左右切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option + Ctrl + I / O&lt;ul&gt;
&lt;li&gt;将当前窗口移动到相邻 Space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option + Enter&lt;ul&gt;
&lt;li&gt;将当前窗口移动到 Work Space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option + Delete&lt;ul&gt;
&lt;li&gt;将当前窗口移动到 Park Space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Work / Park Space 就是用来帮助我集中精力的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的配置文件在 &lt;a href="https://github.com/alswl/.oOo./blob/master/.phoenix.js"&gt;https://github.com/alswl/.oOo./blob/master/.phoenix.js&lt;/a&gt;
我的配置文件可以开箱即用，但这是我自己的工作模式，想要获得自己最舒适的效果，需要自己进行一些研究和定制。&lt;/p&gt;
&lt;h2 id="qi-ta-yi-xie-ti-dai-fang-an"&gt;其他一些替代方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mac&lt;ul&gt;
&lt;li&gt;SizeUp  # 简单的桌面平铺工具，不支持一键切换&lt;/li&gt;
&lt;li&gt;Spectacle  # 类 SizeUp&lt;/li&gt;
&lt;li&gt;Divvy  # 类 SizeUp，收费&lt;/li&gt;
&lt;li&gt;Slate  # 支持配置，支持一键切换（推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;Awesome&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hahack.com/tools/awesome/"&gt;平铺式窗口管理器-Awesome | HaHack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alswl/awesome"&gt;我的 Awesome 配置文件（停止位置）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xmonad&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fuhsjr00/bug.n"&gt;fuhsjr00/bug.n: Tiling Window Manager for Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;我曾经写过一篇 &lt;a href="http://blog.alswl.com/2013/12/mac/"&gt;Linux 程序员的 Mac 安装记录&lt;/a&gt;，
告诉大家我在 Mac 上面常用的工具、包管理器。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/04/windows-management-for-hacker/"&gt;https://blog.alswl.com/2016/04/windows-management-for-hacker/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sun, 24 Apr 2016 16:36:16 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-04-24:2016/04/windows-management-for-hacker/</guid><category>Mac</category></item><item><title>技术之外</title><link>https://blog.alswl.com/2016/02/team-geek/</link><description>&lt;p&gt;这是一天一本书的第二次执行，这次选了一本比较薄的书，上周的书看了一天，脑仁疼。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;在我组织团队新兵训练营（入职之后一段时间内容集中的培训）时候，
经常和新同事聊到一个词：软实力。
我将其描述为专业技能之外的能力。每个人都这种能力的解读可能会不一样，
我将其拆解为：「对工作的热情；观察力和反思能力；做计划和决策是否周全」。&lt;/p&gt;
&lt;p&gt;这种拆解是不全面的，「多年」以后，我意识到，硬实力考衡的是专业的能力，
而软实力则是考衡人的因素。这种晚来的意识让我在一段时间里面，
将自己的工作陷入困境，并且得不到解药。&lt;/p&gt;
&lt;p&gt;Google 的两位工程师 Brian W. Fitzpatrick 和 Ben Collins-Sussman
写了一本书&lt;a href="http://book.douban.com/subject/21372237/"&gt;极客与团队&lt;/a&gt;，通过他们的视角，
告诉大家想要在团队中获得成功的另一面。不要被书名误解，我觉得「开发者和团队」是更好的名字，
虽然没那么酷。&lt;/p&gt;
&lt;p&gt;&lt;img alt="s26354473.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201602/s26354473.jpg"/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;要在团队中获得成功，你必须以&lt;strong&gt;谦虚&lt;/strong&gt;、&lt;strong&gt;尊重&lt;/strong&gt;和&lt;strong&gt;信任&lt;/strong&gt;为核心原则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要做的第一件事情，应该就是沟通了。让自己成为一个玻璃玲珑人，
其他人可以看到你的方向、目标和里程碑，同时可以看到你的进展和问题点。
这样不但可以获得工作中的肯定，当个人的目标设定和团队出现偏差，
又或是开发过程中在一个点停顿了太久，可以有其他人参与进来或直接伸出援手。&lt;/p&gt;
&lt;p&gt;这种透明度对上对下都应该如此。团队的领导，
应当在开发周期内的早期就明确告知团队愿景、目标和设定的里程碑。
产生共鸣的愿景可以让人对目标有渴望，对自己工作有认同。
各位还记得中国中小学开学第一周里，大多都有一个开学典礼讲话。讲的好的领导，
会阐述自己的教学理念，去年取得的成绩，今年的教学着重点。
讲的差的领导就是泛泛而谈，每年都是一套话术，完全看不到长进。&lt;/p&gt;
&lt;p&gt;缺失沟通，还会将个人陷于单打独斗的境地，一个篮球队需要 5 个人大，
一个人牛逼没屁用。&lt;/p&gt;
&lt;p&gt;提高工程质量的一个有效手段就是 CI（持续集成），将开发过程中一点点的小进展都以一种机械的方式呈现出来，
并进行测试。另一个有效手段是 Code Review，不但推荐要 CR，更是要尽早、快速的 CR。
避免屎积压多了拉，太臭。&lt;/p&gt;
&lt;p&gt;我突然想到一条实践：即便是做一个人的项目，在精简程度上也保持最小的一个阈值，
想象明天就要长假，工作要交给别人维护，如何在交付物里面有足够的信息让其他人知晓细节。
而不是丢给后继维护者一句冰冷的话：「看代码」。&lt;/p&gt;
&lt;p&gt;沟通必须是有效的，我想任何人都不想听一个嘴碎的人在那边逼逼一下午。
有很多结构化、一部的沟通可以显著提高沟通效率：
项目看板、设计文档、Code Review、代码注释、数据字典等。&lt;/p&gt;
&lt;p&gt;第二个重要的观点是，接受失败，承认自己不是无能的。你可能很聪明，但所做的事情不一定完全都是正确的，
连上帝都会犯错，何况是普通人。犯错不可怕，但是犯错还认识不到可怕。犯错并且认识到了，
但是拒绝承认错误的人，不是可怕，而是应该要被淘汰，这类人会极其难以合作。
如何你周围都是这样的人，或者你上司是这样的人，也许你可以考虑换一个地方，在拉钩搜索「堆糖」试试吧。&lt;/p&gt;
&lt;p&gt;关于接受失败的另外一个隐含后续发展就是「成长」。意识到这个世界是动态发展的，
「要以发展的眼光看待事物」是一个非常非常有用的认知。
能自己意识到失败，并且会主动复盘，重新认知自己的人，往往会成长的极为迅速。
关于成长的话题可以讨论很深，以后可以单独拎出来讨论。&lt;/p&gt;
&lt;p&gt;书中提到一个失败后回顾的清单：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;简要&lt;/li&gt;
&lt;li&gt;时间的时间线，从发现到调查，再到最终见过&lt;/li&gt;
&lt;li&gt;事件发生的主因&lt;/li&gt;
&lt;li&gt;影响和损失评估&lt;/li&gt;
&lt;li&gt;立即修正问题的步骤&lt;/li&gt;
&lt;li&gt;防止事件再次发生的步骤&lt;/li&gt;
&lt;li&gt;得到的教训&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;我就哈哈哈了，这不就是我大堆糖的故障报告模板么？&lt;/p&gt;
&lt;p&gt;第三点，如何成长？简单来说，去冒险，去承担自己能力之外的任务，
去挑战没有经历过的任务。有一条&lt;a href="https://zh.wikipedia.org/wiki/%E5%BD%BC%E5%BE%97%E5%8E%9F%E7%90%86"&gt;彼得定律&lt;/a&gt;：「在组织或企业的等级制度中，
人会因其某种特质或特殊技能，令他在被擢升到不能胜任的职位，相反变成组织的障碍物（冗员）及负资产。」。
前半段含义是，大部分情况下面，并不是具有了相应能力才去承担，而是试着去承担任务。
无论成功与否，对当前去挑战的人来说，都能够得到历练，从而能力得到提升。&lt;/p&gt;
&lt;p&gt;第四点是：成为 Leader，而不是 Manager。
一个团队是一艘危机四伏的海面上一只船，如果没有一个船长，那么就前途叵测。
在职业生涯的某些阶段，你可能自然成为船长，也许是一个项目的船长，也许是一个小 Team 的船长。
那么切记，船长是 Leader，而不是 Manager，是能力综合，可守可攻，顺风时候会把舵，
缺人时候可以顶任何岗位的船长。而不是手持大鞭的 Manager。
我觉得新闻联播里面描述的人民公仆，就是一个很好的 Leader。&lt;/p&gt;
&lt;p&gt;一年多前之前和铁柱聊过，一个 Leader 是否需要要以能力服众。
我仍然保持当初的观点：「是的」。在目标管理、方向把握上面，
强大的技术背景可以有魄力的开展工作，挖掘新技术，推动变化。
在遇到困难时候，可以决策、解决问题。
这是由这个行业特质决定的，互联网是依赖创造力的脑力劳动，而不是根据人数线性增加产出的体力劳动。&lt;/p&gt;
&lt;p&gt;但毕竟不是每个人都一定拥有 Leader 特质，难道就要一辈子做技术得不到上升？
Google 的一种做法，可以很好解决这个问题。分离 TL（techlead）和 TLM（techleadmanager），
前者更着重技术，后者不但关心技术，还关心手下工程师的成长。
用国内互联网的职责分工描述，大概就是有技术专家和团队负责人的区别。&lt;/p&gt;
&lt;p&gt;关于这条，书中的几点最佳实践非常棒：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;放下自负&lt;/li&gt;
&lt;li&gt;做一个禅师（保持冷静和理性）&lt;/li&gt;
&lt;li&gt;成为催化剂&lt;/li&gt;
&lt;li&gt;当一个导师&lt;/li&gt;
&lt;li&gt;设置明确的目标&lt;/li&gt;
&lt;li&gt;坦诚（三明治赞美法）&lt;/li&gt;
&lt;li&gt;记录快乐程度&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后聊一下对书本身的评价。黄易山在 Quora 写过一段非常有名的
&lt;a href="https://www.quora.com/What-makes-engineering-management-hard"&gt;为什么工程师管理这么难？&lt;/a&gt;。
这本书讨论的内容要比黄易山那篇回答范围更大，讲述的也更详细（废话，这是书）。
作者是典型的工程师，书目结构易读，第五章从反模式来思考问题非常赞。&lt;/p&gt;
&lt;p&gt;我读过几本技术管理相关的书籍，印象深刻的有两本，一本是温伯格的&lt;a href="http://book.douban.com/subject/1132623/"&gt;成为技术领导者&lt;/a&gt;，另外一本是此书。温伯格的行文比较跳跃、比较抽象，不容易读。
而这本书不但通俗异动，也添加了非常具有可操作性的最佳实践。
从创造力驱动的角度出发，技术开发者都是管理者。因为他们需要设计方案，创造价值，而不是重复劳动，
所以我推荐每个开发者阅读。&lt;/p&gt;
&lt;p&gt;好了，学习够了充分的理论，下面就是做起来了，「知行合一」。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;开给自己的处方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上面提到的最佳实践&lt;/li&gt;
&lt;li&gt;谦逊：谦逊一些，低调一些，向他人学习&lt;/li&gt;
&lt;li&gt;坚毅：认准目标，稳步前行，不放弃&lt;/li&gt;
&lt;li&gt;信心：信念也许可以重建，但是对自己始终保有信心，也许会错，但是要相信自己的判断&lt;/li&gt;
&lt;li&gt;开会技巧：超过 5 人的会用单向宣讲更有效&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/02/team-geek/"&gt;https://blog.alswl.com/2016/02/team-geek/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Sun, 28 Feb 2016 18:16:01 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-02-28:2016/02/team-geek/</guid><category>读书笔记</category></item><item><title>一例 Timeout 故障</title><link>https://blog.alswl.com/2016/02/a-timeout-fault/</link><description>&lt;p&gt;&lt;img alt="i_love_timeouts_digital_design_mugs.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201602/i_love_timeouts_digital_design_mugs.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;早晨刚到公司， HAProxy 报警，Trtornis（第三方云存储网关，用来统一管理阿里云和七牛云的对象存储） 全飘红。&lt;/p&gt;

&lt;p&gt;检查日志，并没有 ERROR 信息，但是大量 WARN 报错。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;WARN&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;730&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dw&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;STARTED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;rejected&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractConne&lt;/span&gt;
&lt;span class="n"&gt;ction&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="n"&gt;c021c6&lt;/span&gt;
&lt;span class="n"&gt;WARN&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;731&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Could&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SocketChannel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;connected&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="mf"&gt;10.&lt;/span&gt;
&lt;span class="mf"&gt;1.1.78&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8350&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="mf"&gt;10.1.1.74&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;63290&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RejectedExecutionException&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="n"&gt;c021c6&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;362&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;FillingState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onEnter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;379&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;273&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ReadCallback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;succeeded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;563&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FillInterest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FillInterest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectChannelEndPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onSelected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SelectChannelEndPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;109&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ManagedSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;636&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ManagedSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;607&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ManagedSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;545&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NonBlockingThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NonBlockingThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runJob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;635&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;555&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;745&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;na&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1.8.0&lt;/span&gt;&lt;span class="n"&gt;_51&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是七牛 API 调用出现问题，通过应用 Metrics API 检查 Threads：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http http://A-DOMAIN:8351/threads | sort | uniq -c | sort -gr G qiniu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;正常的实例：&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2015-12-9_1.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201602/image2015-12-9_1.png"/&gt;&lt;/p&gt;
&lt;p&gt;异常的实例：&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2015-12-9_2.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201602/image2015-12-9_2.png"/&gt;&lt;/p&gt;
&lt;p&gt;确认是七牛服务慢导致现成爆掉，但是 46 这个值来自于哪里？&lt;/p&gt;
&lt;p&gt;检查了 App 的配置文件，的确配置了 &lt;code&gt;maxThreads&lt;/code&gt; 为 50:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;requestLog&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;appenders&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;maxThreads&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
  &lt;span class="n"&gt;applicationConnectors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
      &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8350&lt;/span&gt;
      &lt;span class="n"&gt;acceptorThreads&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="n"&gt;selectorThreads&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;adminConnectors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
      &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8351&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般对应服务不稳定，有个简单策略，超时，那么七牛服务超时是多少？找了一下相关代码，下巴都没合上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# com.qiniu.http.Client&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setConnectTimeout&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CONNECT_TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECONDS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setReadTimeout&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RESPONSE_TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECONDS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;# com.qiniu.common.Config&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;CONNECT_TIMEOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;RESPONSE_TIMEOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;超时时间 8h，吓得我赶紧关掉了显示器。
赶紧将这个 Connection 改成了 2 分钟，Connect 改成了 5s。 &lt;/p&gt;
&lt;p&gt;咨询了七牛的工程师故障当天的状况：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sorry 忘了回复，问题已经定位，早上因为有个别用户list请求数量过大，导致了整个list接口出现大量满请求，影响返回是list接口的调用 和 portal上内容管理界面列取文件key的速度，目前已经恢复&lt;/p&gt;
&lt;p&gt;大量慢请求，这个已经内部有告警和恢复机制，11点25恢复的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;国内一线的云服务供应商也会出这样不可用故障，即便是有服务放在云上，还是要自己留一个心眼，多关注可用性啊。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/02/a-timeout-fault/"&gt;https://blog.alswl.com/2016/02/a-timeout-fault/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Tue, 02 Feb 2016 23:34:44 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-02-02:2016/02/a-timeout-fault/</guid><category>Qiniu</category><category>TCP</category></item><item><title>一次艰难的 Wiki 升级</title><link>https://blog.alswl.com/2016/01/confluence-upgrade/</link><description>&lt;p&gt;公司使用 &lt;a href="https://www.atlassian.com/software/confluence"&gt;Confluence&lt;/a&gt;
管理自己的知识库，
现在使用的版本还是 3.0.1，而最新的 Confluence 版本已经是 5.4+。
新版本加入的一些现代化 Web 系统的新特性很吸引人（拖拽上传，可见即所得编辑），
在群众的强烈呼声下，我着手开始升级。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201601/confluence_river.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201601/confluence_river.jpg"/&gt;&lt;/p&gt;

&lt;p&gt;官方的升级路线很扯，3.0.1 的升级路线是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.0.1 -&amp;gt; 3.5.17&lt;/li&gt;
&lt;li&gt;5.0.3 -&amp;gt; 5.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中间两次大版本升级，第一次原因不明，第二次是更新了 markup 渲染引擎，
改为 HTML 格式类型的渲染模式。&lt;/p&gt;
&lt;p&gt;由于一些原因，我们系统还跑在 embedded 模式下（其实就是 HyperSQL），这种大版本升级，
需要先从内置库升级到外部数据库，比如 MySQL。&lt;/p&gt;
&lt;p&gt;苦逼旅程就开始了。&lt;/p&gt;
&lt;h2 id="from-embedded-to-mysql"&gt;From embedded to MySQL&lt;/h2&gt;
&lt;p&gt;更新内置库到外部库的操作流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导出当前的数据备份，包括附件，我导出后 1G+&lt;/li&gt;
&lt;li&gt;使用当前同版本（3.0.1）安装一个全新的 wiki，注意下载 JDBC-connector&lt;/li&gt;
&lt;li&gt;安装之后，配置好 MySQL，开始导入之前准备好的备份&lt;/li&gt;
&lt;li&gt;悲剧上演&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遇到了错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Import failed. Hibernate operation: could not insert: [com.atlassian.confluence.core.BodyContent#12028015]; SQL []; Duplicate entry '12028015' for key 'PRIMARY'; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '12028015' for key 'PRIMARY'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方文档 &lt;a href="https://confluence.atlassian.com/doc/troubleshooting-xml-backups-that-fail-on-restore-199034.html"&gt;https://confluence.atlassian.com/doc/troubleshooting-xml-backups-that-fail-on-restore-199034.html&lt;/a&gt;
让修改重复键数据，好吧，我改，搜索一把重复主键，将备份里面的 &lt;code&gt;entities.xml&lt;/code&gt; 弄出来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;格式化&lt;/span&gt;
&lt;span class="nx"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{s=s $0}END{gsub(/&amp;gt;&amp;lt;/,"&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;",s);s=gensub(/&amp;gt;([^ &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;]*)&amp;lt;/,"&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n\\&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;","g",s);print s}'&lt;/span&gt; &lt;span class="nx"&gt;entities.xml&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;entities.xml.format&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;找重复主键&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="nx"&gt;entities.xml.format&lt;/span&gt; &lt;span class="nx"&gt;G&lt;/span&gt; &lt;span class="s1"&gt;'content" class="Page'&lt;/span&gt; &lt;span class="na"&gt;-A&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;G&lt;/span&gt; &lt;span class="na"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'[0-9]+'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;uniq&lt;/span&gt; &lt;span class="na"&gt;-c&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="na"&gt;-gr&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="nx"&gt;entities.xml.format&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'name="id"'&lt;/span&gt; &lt;span class="na"&gt;-A&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="na"&gt;-B&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;grep&lt;/span&gt; &lt;span class="na"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'[0-9]+'&lt;/span&gt; &lt;span class="na"&gt;-B&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;操作过程中，发现有数据就一条数据（grep entities.xml），还是插入重复（13238835）。
官方文档解释是，内置数据库的锁有时候会不灵，插入重复键。
于是决定再试试去掉主键约束方案，大不了那个数据我就不要了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ALTER&lt;/span&gt; &lt;span class="n"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;BODYCONTENT&lt;/span&gt; &lt;span class="n"&gt;DROP&lt;/span&gt; &lt;span class="n"&gt;PRIMARY&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果还有其他 PK 约束，我于是一条一条解开，然后&amp;hellip;&amp;hellip;还是不行，真是作了一手的好死。&lt;/p&gt;
&lt;p&gt;结论是，这数据错误了太多，已经无法手工修复。&lt;/p&gt;
&lt;h2 id="heng-cha-yi-dao-de-emoji"&gt;横插一刀的 Emoji 😊😢💗&lt;/h2&gt;
&lt;p&gt;导入时候报了这么一个错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caused by: java.sql.SQLException: Incorrect string value: '\xF0\x9F\x8C\x8D\xE5\x9B...' for column 'BODY' at row 1 org.xml.sax.SAXException: Error while parsing 2015-10-19 23:14:13,108 ERROR [Importing data task] [confluence.importexport.impl.ReverseDatabinder] fromXML Error processing backup: -- referer: http://10.1.2.155:8087/setup/setup-restore-start.action | url: /setup/setup-restore-local.action | userName: anonymous | action: setup-restore-local org.xml.sax.SAXException: Error while parsing net.sf.hibernate.exception.GenericJDBCException: could not insert: [com.atlassian.confluence.core.BodyContent#12028161]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是 Emoji 编码的问题，理论上 MySQL 换到 5.6+，更新 encoding 就可以了。&lt;/p&gt;
&lt;p&gt;但是&amp;hellip;&amp;hellip;Confluence 的建表 SQL 爆出了 255 varchar 超过 1000 限制的错误
，我尝试使用&amp;nbsp;&lt;a href="https://github.com/rails/rails/issues/9855"&gt;innodb_large_prefix&lt;/a&gt;
似乎可以解决（因为重复键的问题，导致导入已经行不通）。&lt;/p&gt;
&lt;p&gt;另外&amp;nbsp;innodb_large_prefix&amp;nbsp;是 5.6.3 才有的，只能升级 MySQL，
并且需要创建表时候使用&amp;nbsp;DYNAMIC&amp;nbsp;参数。&lt;/p&gt;
&lt;p&gt;弄个 Emoji 这么绕，这导致我直接弃用了 MySQL。&lt;/p&gt;
&lt;p&gt;如果是正常迁移，不遇到重复键，Emoji 的问题，可以参考官方的文档，完成平滑迁移：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://confluence.atlassian.com/doc/migrating-to-another-database-148867.html&lt;/li&gt;
&lt;li&gt;https://confluence.atlassian.com/doc/database-setup-for-mysql-128747.html&lt;/li&gt;
&lt;li&gt;https://confluence.atlassian.com/doc/upgrading-confluence-4578.html&lt;/li&gt;
&lt;li&gt;https://confluence.atlassian.com/doc/upgrading-confluence-manually-255363437.html&lt;/li&gt;
&lt;li&gt;https://confluence.atlassian.com/conf56/confluence-user-s-guide/creating-content/using-the-editor/using-symbols-emoticons-and-special-characters&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ma-dan-zi-ji-gan"&gt;妈蛋，自己干&lt;/h2&gt;
&lt;p&gt;上面这么点东西，陆陆续续花了我两周的时间（晚上）。已经确认走不通平滑迁移，那就别怪我手段糙了。&lt;/p&gt;
&lt;p&gt;使用 API 导出后直接导入，这种做法最大问题是不平滑，会丢掉 Wiki 修改的历史记录，
在和各个业务方沟通之后，最后达成了一致：可以暴力升级。&lt;/p&gt;
&lt;p&gt;升级流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备最新 Confluence 新站点&lt;/li&gt;
&lt;li&gt;关停站点&lt;/li&gt;
&lt;li&gt;导出数据，包括 Page、评论、附件&lt;/li&gt;
&lt;li&gt;导入 Page，评论，附件&lt;/li&gt;
&lt;li&gt;启动旧站点，开启只读模式&lt;/li&gt;
&lt;li&gt;启用新站点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方有一个 &lt;a href="https://migrations.atlassian.net/wiki"&gt;Universal Wiki Converter&lt;/a&gt;，
我在 Bitbucket 上面找到了源码，但是已经不可工作了。
虽然宣称「The UWC will however save you 1-2+ weeks of scripting development time, compared with starting from scratch, for many of the most common conversion cases.」
但并没有卵用。&lt;/p&gt;
&lt;p&gt;不行就自己随便搞搞好了，看了一下开发需要的 &lt;a href="https://confluence.atlassian.com/display/CONF30/Remote+API+Specification+2.4#RemoteAPISpecification2.4-Page"&gt;Conflunce API&lt;/a&gt;，
和尤其贴心的新版本 &lt;a href="https://developer.atlassian.com/confdev/confluence-rest-api?continue=https%3A%2F%2Fdeveloper.atlassian.com%2Fconfdev%2Fconfluence-rest-api&amp;amp;application=dac"&gt;RESTful API&lt;/a&gt;，就开始搞了。&lt;/p&gt;
&lt;p&gt;写迁移代码，在这里 &lt;a href="https://github.com/duitang/atlassian-confluence-xxoo"&gt;atlassian-confluence-xxoo&lt;/a&gt;，已经开源了，只使用过一次，成功的从 3.0.1 迁移到 5.4.4，
理论上，支持任意版本的 3.x/4.x Confluence 迁移到最新。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;python app.py -h&lt;/code&gt; 查看帮助，不行就看看代码。&lt;/p&gt;
&lt;p&gt;希望有迁移需求的同学，搜索到这里能够获得一些帮助。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/01/confluence-upgrade/"&gt;https://blog.alswl.com/2016/01/confluence-upgrade/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Tue, 12 Jan 2016 22:53:55 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2016-01-12:2016/01/confluence-upgrade/</guid><category>confluence</category></item><item><title>SS with Haproxy</title><link>https://blog.alswl.com/2015/11/ss-with-haproxy/</link><description>&lt;p&gt;&lt;img alt="shadowsocks.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201512/shadowsocks.png"/&gt;&lt;/p&gt;
&lt;p&gt;以前用自己的 SS，Linode 美国，后来 Linode 日本，但是始终拼不过上海电信的国际带宽。
经常不稳定，丢一半的包。&lt;/p&gt;
&lt;p&gt;于是买了 &lt;a href="https://portal.shadowsocks.com.hk/aff.php?aff=4215"&gt;SS&lt;/a&gt; 服务，
9 台服务器，自己挑觉得速度快的服务器。&lt;/p&gt;
&lt;p&gt;但一直固定某台服务器也会偶尔出问题，导致邮件出不来，网页打不开。
需要手动切换一下服务器。
于是用 HA 做了一个本地代理，调整了一些参数，让 SS 总是有快速的服务器供选择。&lt;/p&gt;
&lt;p&gt;结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;+-----------------+&lt;/span&gt;                                                  &lt;span class="o"&gt;+----------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;                                                  &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="o"&gt;|&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;                                           &lt;span class="o"&gt;&amp;gt;&amp;gt;|&lt;/span&gt;   &lt;span class="n"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;v&lt;/span&gt;                                           &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-----------------+&lt;/span&gt;    &lt;span class="n"&gt;v&lt;/span&gt;                                           &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;+----------------+&lt;/span&gt;
                       &lt;span class="n"&gt;v&lt;/span&gt;                                           &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="o"&gt;+-----------------+&lt;/span&gt;    &lt;span class="n"&gt;v&lt;/span&gt;    &lt;span class="o"&gt;|----------------+&lt;/span&gt;      &lt;span class="o"&gt;+------------+&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;+----------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;v&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="o"&gt;|&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;|&lt;/span&gt;    &lt;span class="n"&gt;HAProxy&lt;/span&gt;     &lt;span class="o"&gt;|&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;|&lt;/span&gt; &lt;span class="n"&gt;SS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;  &lt;span class="o"&gt;|&amp;gt;&amp;gt;&amp;gt;|&lt;/span&gt;   &lt;span class="n"&gt;Browser&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="o"&gt;^&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-----------------+&lt;/span&gt;    &lt;span class="o"&gt;^&lt;/span&gt;    &lt;span class="o"&gt;+----------------+&lt;/span&gt;      &lt;span class="o"&gt;+------------+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+----------------+&lt;/span&gt;
                       &lt;span class="o"&gt;^&lt;/span&gt;                                           &lt;span class="n"&gt;v&lt;/span&gt;   
&lt;span class="o"&gt;+-----------------+&lt;/span&gt;    &lt;span class="o"&gt;^&lt;/span&gt;                                           &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+----------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="o"&gt;^&lt;/span&gt;                                           &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="o"&gt;|&amp;gt;&amp;gt;&amp;gt;&amp;gt;^&lt;/span&gt;                                           &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;|&lt;/span&gt;   &lt;span class="n"&gt;Evernote&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;                                                  &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-----------------+&lt;/span&gt;                                                  &lt;span class="o"&gt;+----------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;global&lt;/span&gt;
    &lt;span class="n"&gt;ulimit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;  &lt;span class="mi"&gt;4096&lt;/span&gt;


&lt;span class="n"&gt;defaults&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt;    &lt;span class="n"&gt;tcp&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;


&lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;
    &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12222&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
    &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;
    &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;


&lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;
    &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1081&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;tcp&lt;/span&gt;
    &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;tcpka&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;
    &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="n"&gt;roundrobin&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;
    &lt;span class="n"&gt;maxconn&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;

    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;office&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;starbucks&lt;/span&gt;
    &lt;span class="n"&gt;retries&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;redispatch&lt;/span&gt;
    &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="n"&gt;host1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;maxconn&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;rise&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="n"&gt;fall&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;backup&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="n"&gt;host2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;maxconn&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;rise&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="n"&gt;fall&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="n"&gt;host2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;maxconn&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;rise&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="n"&gt;fall&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;挺稳定，很快速。&lt;/p&gt;
&lt;p&gt;update: 2015-12-15，添加 &lt;code&gt;backup&lt;/code&gt; 项，选一台最稳定的做 backup，避免所有连接都超时。
update: 2015-12-13，添加 &lt;code&gt;redispatch&lt;/code&gt;  / &lt;code&gt;retries&lt;/code&gt; 项，换机器重试，
大幅提高可用性，注意，可能在非幂等状态下面产生未知错误。&lt;/p&gt;
&lt;p&gt;&lt;img alt="haproxy.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201512/haproxy.png"/&gt;&lt;/p&gt;
&lt;p&gt;在跑的 node，有些延迟高，被干掉了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="youtube.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201512/youtube.png"/&gt;&lt;/p&gt;
&lt;p&gt;看 1080P 也挺顺畅。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2015/11/ss-with-haproxy/"&gt;https://blog.alswl.com/2015/11/ss-with-haproxy/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Fri, 27 Nov 2015 20:23:24 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2015-11-27:2015/11/ss-with-haproxy/</guid><category>SS</category><category>HAProxy</category></item><item><title>几步拥有一个安全密码</title><link>https://blog.alswl.com/2015/10/a-security-password/</link><description>&lt;p&gt;&lt;img alt="password.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201512/password.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;给团队非开发同学写的邮件，对其他人也有些意义，遂贴出来。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这个互联网越来越不安全 &lt;a href="https://www.baidu.com/s?wd=%E5%AF%86%E7%A0%81%E6%B3%84%E9%9C%B2%E4%BA%8B%E4%BB%B6&amp;amp;rsp=3&amp;amp;f=1&amp;amp;oq=%E5%AF%86%E7%A0%81%E6%B3%84%E9%9C%B2&amp;amp;ie=utf-8&amp;amp;usm=2&amp;amp;rsv_idx=1&amp;amp;rsv_pq=f9362ac90000f994&amp;amp;rsv_t=31d7A5Zyu36Hn4omAU5F9llRh3WBGl5tInDRywq%2FbPEwdPnyjCCcfGLdnNA&amp;amp;rsv_ers=xn0&amp;amp;rs_src=0"&gt;https://www.baidu.com/s?wd=%E5%AF%86%E7%A0%81%E6%B3%84%E9%9C%B2%E4%BA%8B%E4%BB%B6&lt;/a&gt;。密码数据库泄露，黑客暴库攻击，社会工程学攻击层出不穷。我给大家介绍几个小方法，轻松提高自己各类密码的安全等级。&lt;/p&gt;
&lt;p&gt;先给个地址，大家可以测试一下自己常用密码的复杂度：&lt;a href="https://howsecureismypassword.net/"&gt;https://howsecureismypassword.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;认为自己电脑水平还可以的，请直接翻到文章最后。&lt;/p&gt;
&lt;h2 id="ru-he-guan-li-mi-ma"&gt;如何管理密码&lt;/h2&gt;
&lt;p&gt;给普通用户的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密码设置复杂一些，不要使用生日、日期、姓名等有意义的信息&lt;/li&gt;
&lt;li&gt;使用一套合理的密码生成策略&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重点来了，密码生成策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择自己喜欢的诗词或者某句话，比如「床前明月光，疑是地上霜」，取其拼音的第一个字母 cqmygysdss&lt;/li&gt;
&lt;li&gt;将每个句子第一个单词大写，cqmygysdss -&amp;gt; CqmygYsdss&lt;/li&gt;
&lt;li&gt;加上对应网站的信息，比如 163：CqmygYsdss163，qq： CqmygYsdssqq&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大功告成，你的密码安全级别提升了。&lt;/p&gt;
&lt;p&gt;----------------------------- 高手的分界线 -----------------------&lt;/p&gt;
&lt;p&gt;给高水平选手推荐的方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心思想：密码分级，分离普通密码、重要密码（财务相关等）。&lt;/li&gt;
&lt;li&gt;普通密码使用大小写英文和数字混合&lt;/li&gt;
&lt;li&gt;重要密码和财务相关密码，独立生成密码，保存到 1Password / KeePass 等工具中，每个应用软件独立开来。&lt;/li&gt;
&lt;li&gt;推荐 KeePass，免费，参考 &lt;a href="http://www.iplaysoft.com/keepass.html"&gt;http://www.iplaysoft.com/keepass.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chang-jian-ruo-mi-ma-he-bao-li-po-jie-xu-yao-shi-jian"&gt;常见弱密码和暴力破解需要时间&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;123456 / 不需要&lt;/li&gt;
&lt;li&gt;duitang / 2s&lt;/li&gt;
&lt;li&gt;huhela1993 / 10天&lt;/li&gt;
&lt;li&gt;huhela_1993 / 48年&lt;/li&gt;
&lt;li&gt;CqmygYsdssqq / 3千年&lt;/li&gt;
&lt;li&gt;]W?852HCMHFUYzrz,F / 10000^5 年（Keepass 生成的密码）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="zui-hou"&gt;最后&lt;/h2&gt;
&lt;p&gt;针对任何在邮箱中向大家索取：&lt;/p&gt;
&lt;p&gt;密码、员工信息、通讯录、组织架构等的邮件，请大家注意确认对方的真实身份，不要轻易透露重要信息。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2015/10/a-security-password/"&gt;https://blog.alswl.com/2015/10/a-security-password/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">alswl</dc:creator><pubDate>Wed, 28 Oct 2015 00:17:44 +0800</pubDate><guid isPermaLink="false">tag:blog.alswl.com,2015-10-28:2015/10/a-security-password/</guid><category>Security</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Log4D</title><link href="https://blog.alswl.com/" rel="alternate"></link><link href="https://blog.alswl.com/feeds/alswl.atom.xml" rel="self"></link><id>https://blog.alswl.com/</id><updated>2018-01-21T22:57:26+08:00</updated><entry><title>从 2017 到 2018</title><link href="https://blog.alswl.com/2018/01/2017-2018/" rel="alternate"></link><published>2018-01-21T22:57:26+08:00</published><updated>2018-01-21T22:57:26+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2018-01-21:2018/01/2017-2018/</id><summary type="html">&lt;p&gt;&lt;img alt="2017 年 2 月摄于瑞虹月亮湾" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201801/moon.png"/&gt;&lt;/p&gt;
&lt;p&gt;我有两年年没公开年终总结了，原因很简单：年终结果无法让自己满意，
生活持续呈线性发展。那今年为什么又要将总结发出来呢？
并非是我的 2017 过得如何充实、有成就感，而是出于两个目的。
第一是我认识到 OKR 需要平和对待，我目前对自己的生活是缺乏完全掌控力的，
我无法既渴求爆炸性的增长，又期望在这一过程中低风险，我需要接受这种现状。
第二是曝光自己的目标，让回顾和计划透明化。
从社会心理学的角度上来看，公开的承诺有助于个体更努力地驱动目标的完成。&lt;/p&gt;

&lt;h2 id="2017"&gt;2017&lt;/h2&gt;
&lt;p&gt;2017 年我将个人生活纳入了 OKR 管理的范围，在这之前是琐碎的 Checklist 管理方法。
OKR 管理的优势在于年初可以关注大方向，保持全年的路线连贯性。
同时 OKR 可以量化的追踪每事项的进展，促进执行。&lt;/p&gt;
&lt;p&gt;我在 2017 年的 OKR 大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读  &lt;ul&gt;
&lt;li&gt;精读书籍&lt;/li&gt;
&lt;li&gt;粗读书籍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写作  &lt;ul&gt;
&lt;li&gt;写博客&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;健康  &lt;ul&gt;
&lt;li&gt;游泳&lt;/li&gt;
&lt;li&gt;跑步&lt;/li&gt;
&lt;li&gt;素食&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;习惯  &lt;ul&gt;
&lt;li&gt;冥想&lt;/li&gt;
&lt;li&gt;英语&lt;/li&gt;
&lt;li&gt;计划性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;技术  &lt;ul&gt;
&lt;li&gt;操作系统理论&lt;/li&gt;
&lt;li&gt;新语言学习&lt;/li&gt;
&lt;li&gt;分布式系统&lt;/li&gt;
&lt;li&gt;大数据和人工智能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;创业准备    &lt;ul&gt;
&lt;li&gt;行业思考&lt;/li&gt;
&lt;li&gt;思维模型&lt;/li&gt;
&lt;li&gt;人脉认识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工作  &lt;ul&gt;
&lt;li&gt;普通任务的完成&lt;/li&gt;
&lt;li&gt;突破型任务的完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;家庭生活    &lt;ul&gt;
&lt;li&gt;家庭旅行（国内/国外）&lt;/li&gt;
&lt;li&gt;下一代&lt;/li&gt;
&lt;li&gt;上海话&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;财务  &lt;ul&gt;
&lt;li&gt;投资入门&lt;/li&gt;
&lt;li&gt;投资学习学习&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我就不将 Key Result 一一罗列出来了，加权平均之后，年度最终的得分是 0.40895。
我不觉得自己的目标设置得过高，过低的分数的原因是执行力不够。&lt;/p&gt;
&lt;p&gt;人的一身充满许多轻易就能够改变自己人生轨迹的事件，比如高考、恋爱，工作变动。
在 2017 年，我面临最重大事情就是我离开堆糖，在沪江开始了一段新的职业生涯。
不像那些足够理性的人，离开堆糖我非常不舍，过程中充满挣扎，最后还是做了决定。
到沪江之后，整个环境发生了变化，我从一百人不到的精英团队进入一个几千人、
具有许多历史包袱的大团队，一度压力很大。
在经历了冲突、沟通、推动这些状态之后，我也逐渐适应了。
此时又出现了新的焦虑：如何在一个相对迟缓的环境推动有效的变化。
这是一个大课题，也是我 2018 年想尝试解决的问题。&lt;/p&gt;
&lt;p&gt;17 年工作内容，主要围绕这么几块内容：将这个集团的 SQL Server 迁移到 MySQL 上。
核心需要解决的是将大规模异构数据进行离线/在线迁移，目标是缩短停机时间。
在迁移过程中还要提供一些数据重构功能，以便数据结构进行调整。
这个问题和当年阿里巴巴的去 IOE 有些相似，他们是 Oracle 到 MySQL，而我是从
SQL Server 到 MySQL。
我投入不少时间，好在结果挺不错，项目前后持续了半年时间，没有发生一例问题。
现在已经可以脱离我独立运作了。
除此之外我还在集团引入了 Metrics 系统；在集团开展一个每周的技术分享活动：沪江技术之夜。&lt;/p&gt;
&lt;p&gt;2017 全年看书有 48 本，是我近年来读书较多的一年。读书速度加快的主要原因是：
我主动追求更快的读书速度，提升索引归纳能力。
为此反复学习了「如何阅读一本书」/「如何高效学习」等方法。&lt;/p&gt;
&lt;p&gt;今年推荐阅读的几本书是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「讲理 : 作文四书之一」 - 王鼎钧&lt;ul&gt;
&lt;li&gt;教你如何写论说文，让每个作者能挥洒自如表达自己思想和态度。
    作者有一套「作文四书」，感谢余晟老师赠书。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「人类简史」 - 尤瓦尔&amp;middot;赫拉利&lt;ul&gt;
&lt;li&gt;开脑洞的人类历史学研究，作者妙笔生花，将复杂事情以形象和有趣的方法呈现给大家。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「腾讯传 : 中国互联网公司进化论」- 吴晓波&lt;ul&gt;
&lt;li&gt;中国互联网企业发家史，虽然大环境在不断变化，但当时决策的逻辑还有相当参考价值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「解读中国经济 - 林毅夫」&lt;ul&gt;
&lt;li&gt;作为高参，林毅夫对中国当代经济环境理解深刻。
    书中讲述了从 78 年改革开放到现在的制度变迁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;17 写了 7 篇文章，低于预期。虽然在我的 inbox 里面存了不少草稿，
但觉得自己的逻辑还不流畅，修辞也不够优雅，还不好意思拿出来给大家看。
文字驾驭能力差这个问题我也意识到了，恰好边上有位写作高手，推荐了一些相关书籍。
期望接下来通过学习写作得到改善。&lt;/p&gt;
&lt;p&gt;2017 年去了一趟香港，不幸的是遭遇身体不适，在中环地铁晕厥，导致澳门行也取消。
患难见真情，我老婆对我也是真感情。除此之外，还和夫人去了一趟九华山。&lt;/p&gt;
&lt;p&gt;17 年还有一件幸运的事情，上海牌照拍了 17 个月之后终于中了，具备了买车的资格。
唯一遗憾的是，同时中了两张牌照，但是没有这么大的需求，无奈放弃一张，
还被罚款 1000 元。&lt;/p&gt;
&lt;p&gt;17 年让我产生幸福感的几个物件推荐：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ErgoDox 键盘：可编程的分体键盘，用了一遍，手腕再也不疼了。&lt;ul&gt;
&lt;li&gt;我的 ErgoDox 驱动配置：
    &lt;a href="https://github.com/alswl/ergodox-firmware"&gt;alswl/ergodox-firmware: firmware for the ergoDOX keyboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我在知乎回答的感受帖：
    &lt;a href="https://www.zhihu.com/question/52088337/answer/141073759"&gt;使用Ergodox人体工学键盘是什么样的体验？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;洁成背心式垃圾袋&lt;ul&gt;
&lt;li&gt;解决了要丢垃圾的中年男人担心垃圾袋脏的问题&lt;/li&gt;
&lt;li&gt;&lt;a href="https://item.jd.com/1529913.html"&gt;洁成背心式垃圾袋三卷装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Toodledo&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.toodledo.com/index.php?ref=td4d1aebdd0f59e"&gt;Toodledo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我认为最好的 GTD 管理软件，这一年我面临的工作频度非常高，
    全就靠 Toodledo 帮我管理任务，基于复杂的 Searches，
    大大提高我上下文切换速度，老工具焕发新春。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proxifier&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.proxifier.com/"&gt;Proxifier - Bypass firewall and proxy, tunnel connections through an HTTPS and SOCKS proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mac 下能够将任何 App 设置代理的工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「得到」的「硅谷来信」- 吴军&lt;ul&gt;
&lt;li&gt;吴军作为成功的工程师、科学家、技术领袖、科技作家、历史作家，
    有太多的思想可以被学习和直接使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2018"&gt;2018&lt;/h2&gt;
&lt;p&gt;2018 年我将迎来自己的三十而立。&lt;/p&gt;
&lt;p&gt;人这种动物，总是在周期性的时间点上比平时更容易思考。
我花了几个周末，加上好几个洗澡的时间思考我接下来的目标是什么。
1 年的目标？5 年的目标？&lt;/p&gt;
&lt;p&gt;我一度没有答案，尤其是在被罗胖等内容创业者贩卖焦虑之后。
我倒是不担心自己像中兴那位 35 岁的同行，在各种压力之下逼得跳楼。
我的压力和焦虑主要是来自我自己未来想象空间太小。
剩下的时间越少，可以调整的变量范围就越小，随着时间巨轮碾过，
不管未来发展是线性还是非线性，都在忙忙碌碌中逐步变成现实。&lt;/p&gt;
&lt;p&gt;有时候也挺恨自己不具备天马行空的想象力和愿景。
我思考的结果是，技术发展速度虽然快，但是核心改变是有限的。
我目前没有足够的想法来做上层的事，那就切入基础领域，花时间补足短板。
在这个思路指导下，新年的 OKR 对基础领域的投入提高了比例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Direction&lt;/th&gt;
&lt;th&gt;Objective&lt;/th&gt;
&lt;th&gt;Key Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;掌握面向未来的技能&lt;/td&gt;
&lt;td&gt;初步掌握机器学习的基本技能&lt;/td&gt;
&lt;td&gt;学完 Coursera Machine Learning&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;学完「集体编程智慧」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;掌握区块链知识&lt;/td&gt;
&lt;td&gt;读一本区块链的书&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;掌握基础的技能&lt;/td&gt;
&lt;td&gt;数学&lt;/td&gt;
&lt;td&gt;看完「数学之美」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看完「什么是数学」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看完「如何解题」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;写一篇关于数学的文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;弄清楚概率论的研究对象、范畴、方法论&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;提升英文水平&lt;/td&gt;
&lt;td&gt;扇贝背完 TOFEL 词汇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;扇贝背完 GAE 词汇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;写 2 篇英文博客&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;经济管理&lt;/td&gt;
&lt;td&gt;读完「经济学原理」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;读完吴晓波的一系列书&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;读 3 本关于投资的书&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;通过投资获得 X 元收益&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;提升系统化思考能力&lt;/td&gt;
&lt;td&gt;读 5 本相关书籍&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;学完 Coursera Model Thinking 课程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;团队管理&lt;/td&gt;
&lt;td&gt;阅读团队管理相关 5 本书籍&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;产出 3 篇相关文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;XXX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;提升专业技能&lt;/td&gt;
&lt;td&gt;Scala 语言深入&lt;/td&gt;
&lt;td&gt;学完 Coursera Scala 课程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;读完「Akka Cookbook」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;读完「深入理解 Scala」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;分布式系统深入&lt;/td&gt;
&lt;td&gt;学习 MIT 课程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;研究 TiDB，产出文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;写一篇 CAP 文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;计算机语言和基础&lt;/td&gt;
&lt;td&gt;读完「Java Concurrency in Practice」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;读完「Go 语言编程」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;读完「算法新解」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;读完「SICP」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;提升家庭生活质量&lt;/td&gt;
&lt;td&gt;旅行&lt;/td&gt;
&lt;td&gt;出国旅行 1 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;出江浙沪旅行 2 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;父母&lt;/td&gt;
&lt;td&gt;回父母家 10 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;小孩&lt;/td&gt;
&lt;td&gt;生 1 个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;车&lt;/td&gt;
&lt;td&gt;买 1 辆车&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;养成习惯&lt;/td&gt;
&lt;td&gt;运动&lt;/td&gt;
&lt;td&gt;全年跑步或游泳 36 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;计划和复盘&lt;/td&gt;
&lt;td&gt;全年做早晨计划 264 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;全年做习惯追踪 365 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;每周做 Review&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;提升个人 PR&lt;/td&gt;
&lt;td&gt;结实外部朋友&lt;/td&gt;
&lt;td&gt;参会 4 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;面向 100+ 人的外部做 1 次分享&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;外部代码贡献&lt;/td&gt;
&lt;td&gt;参与 1 个开源项目，提交核心作用代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;提升写作能力&lt;/td&gt;
&lt;td&gt;全年写作 12 篇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;参加开智的课程&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;从目标执行的可行性上来说，年度 OKR 往往是允许甚至是推荐在执行过程中修改的。
季度的 OKR 在确定之后不允许进行修改。毕竟计划赶不上变化，但是又不能朝令夕改。
希望我今年在大方向保持稳定，每个季度能够执行贯彻到位，将时间价值最大化。&lt;/p&gt;
&lt;p&gt;2017，混乱和秩序相交。2018，进入冰山之下。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2018/01/2017-2018/"&gt;https://blog.alswl.com/2018/01/2017-2018/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term=""></category></entry><entry><title>工作和热情</title><link href="https://blog.alswl.com/2017/12/enthusiasm/" rel="alternate"></link><published>2017-12-21T23:46:59+08:00</published><updated>2017-12-21T23:46:59+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2017-12-21:2017/12/enthusiasm/</id><summary type="html">&lt;p&gt;&lt;img alt="201712/work.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201712/work.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;最近和一位老朋友吃饭，他说他最近比较苦恼：
「开始有职业危机了，担心自己失去对工作的热情，似乎离油腻的中年人又进了一步」。
作为一名互联网工程师，我深知这个行业技术日新月异，
如果对工作都失去了兴趣，会将自己置于跟不上时代发展、自身得不到提升的危险境地；
从个人生活质量来看，工作占据了一天 1/3 ~ 2/3 的时间，
失去热情的工作会成为人生的桎梏，不是驾驭工作，而是被工作所奴役，
这会进而影响一个人的身心健康，得个抑郁症稀疏平常。&lt;/p&gt;
&lt;p&gt;如何保持对工作的热情，当自己陷入困境时候如何重新调动工作热情？
这是职场人需要深思的问题。&lt;/p&gt;

&lt;h2 id="gong-zuo-dai-lai-shi-yao"&gt;工作带来什么？&lt;/h2&gt;
&lt;p&gt;从因到果，让我们先聊聊工作给我们带来什么？&lt;/p&gt;
&lt;p&gt;对于不是含着金钥匙出生的群众来说，物质上的回报是重要并且第一位的。
如果温饱的需求都没有被满足，就没必要讨论精神世界的热情了。
大部分刚出校园的职场新人可能处于这个状态，一人吃饱全家不愁。
从马斯洛需求层次理论说起：
当「生理需求」、「安全需求」被满足之后，就需要「社交需求」、「尊重需求」
和「自我实现的需求」。
将这些需求映射到工作中，那就是成了「有志同道合的人一起工作」，
「工作能干出成绩，获得认可」，
「有挑战，干出成就感」。&lt;/p&gt;
&lt;p&gt;我有过一段经历：一个优秀工程师突然申请离职，和他沟通离职原因时，
他的反馈是「乏了，觉得工作没劲，甚至怀疑开发工程师是否是自己想要的工作，
想要回家休息一段时间」。
这个小伙子其实很优秀很优秀，FullStack，好奇心强烈，休息了一段时间，去了豆瓣厂。
我们后来分析，可能有这么几个原因导致他对这份工作失去了兴趣：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;他被分配到的工作内容不够有挑战，业务开发在一定程度上面有重复性&lt;/li&gt;
&lt;li&gt;他所做的几个项目，没有被充分发挥价值，没有获得足够的认同感&lt;/li&gt;
&lt;li&gt;公司的业务没有出现迅猛爆发，缺乏业务上的成就感&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这个案例的存在，后期我们也做了一些调整，避免再次发生这样的优秀人才流失悲剧。
当然，这些调整都是从组织的视角出发。但并非所有组织都有这样自省能力。
那么作为个体，有哪些方法可以挽回逝去的热情呢？&lt;/p&gt;
&lt;h2 id="fang-da-yi-you-cheng-ji-de-ying-xiang-li"&gt;放大已有成绩的影响力&lt;/h2&gt;
&lt;p&gt;将已有的工作成绩影响力放大，这是最不耗力气的一种办法。&lt;/p&gt;
&lt;p&gt;我们工作中，应当是取得了一些成绩的，这些成绩是否已经最大化发挥作用了？
还有没有价值可以深挖？&lt;/p&gt;
&lt;p&gt;扩大作用的一种做法就是写作。
将工作内容中有创新、创意的地方，落实为文章进行发表。
不少公司会有和技术相关的宣传平台，比如沪江就有一个「沪江技术学院」公众号。
就比较适合发布公司内的一些技术创新、工程实践。
如果公司没有提供这样的平台，也可以使用自己的公众号或者博客，
唯一要注意的就是敏感信息不要泄露。&lt;/p&gt;
&lt;p&gt;除了使用写文章的方式，还有其他一些思路可以参考：做内部/外部分享；
将成果开源出来。做分享可以给自己带来不少成就感，
内部的分享可以更快速的对自己的成果进行宣传，也能通过这种形式培养信任感。
做开源是一个更大的话题，不少团队有这样的成功经验。比如饿了么的 Element，
我司也开源了 Guice 这样的系统。
这都是在日常工作中的工程实施总结形成的开源项目。&lt;/p&gt;
&lt;p&gt;有同学会问：自己觉得自己的工作亮点太少，缺乏对外部分享的价值。
其实这种担忧大可不必，只要是有价值的输出，总是能找到适合的输出对象，
如果对行业老司机没有帮助，那么对新人是否有帮助呢？
对上下游的 parterner 是否有帮助么？
前两天还看到一个阿里的开源项目 &lt;a href="https://github.com/alibaba/java-dns-cache-manipulator"&gt;alibaba/java-dns-cache-manipulator&lt;/a&gt;，
你能说这个很复杂么？但仍然可以给特定场景的人带来帮助。&lt;/p&gt;
&lt;h2 id="jia-da-shen-du-yan-du-zhui-qiu-ji-zhi"&gt;加大深度广度，追求极致&lt;/h2&gt;
&lt;p&gt;假如工作内容是千篇一律，相信不管是谁都无法长期容忍。
这时候就要考虑一下突破自己固有的职责边界。&lt;/p&gt;
&lt;p&gt;第一种路径是突破工作内容所需要的深度，
将工作关注的问题能够刨根问底。在平凡的工作机会上面做出彩。
牛顿在发现力学三大定律，发明微积分后，还去英国皇家铸币厂工作。
我相信作为物理学家、数学家，他对主持铸币这个工作和他过往的工作无关，
但他仍然投入了极大精力和热情去处理事务，并且变革了从银本位到金本位。&lt;/p&gt;
&lt;p&gt;第二种方式是扩大自己的涉猎面，尝试探索新鲜事务。
在日常工作中，思考一下自己的上游、下游是否有遇到一些瓶颈，可否给予他们帮助？
支撑自己日常工作的基础设施是否足够高效、健壮，能否在上面出一些力量？
更有甚者，一些技术同学可以向前台走，去从技术的视角推动业务的变化。
也有一些同学可以往后走，往 BI 或者 AI 发展。
改变自己的职能变动太大，但是适当扩展自己涉猎面可以增强自己综合素质，
为未来提供更多可能性。&lt;/p&gt;
&lt;p&gt;最后一个路径是以更极致的标准来要求自己。
有些朋友可能会说道：在工程实践中，我们不是不推崇过度设计么？
的确，我们要避免矫枉过正，但如果现在要求达到 60 分，我们做 120 分可能是过度设计，
我并不觉得追求 80 分有什么过分。
以超出需求者期望的姿态做事，技术上面追求极致，业务上追求卓越，
过程可能比较艰辛，但是获得的成就感也会更大。&lt;/p&gt;
&lt;p&gt;积极主动去摸索自己的瓶颈，不要被自己的现状所禁锢。
掌握自己固有知识，挖掘上下游知识，这是保持热情的重要方式。&lt;/p&gt;
&lt;h2 id="xun-zhao-zhi-tong-dao-he-de-peng-you"&gt;寻找志同道合的朋友&lt;/h2&gt;
&lt;p&gt;一个人是孤独的，鲁滨逊尚且需要星期五相伴，
何况我们这些生活在高度复杂社会里的人。
当一个人对方向产生迷茫，对处境有困惑，对问题感到棘手时候，
陪伴在周围的朋友是极其重要的。&lt;/p&gt;
&lt;p&gt;我在前东家曾经有过迷茫的时间段，但是遇到了相当多可以学习的朋友。
我们交流对现状的看法，探索解决问题的思路，畅谈未来发展的可能性。
这个过程中，发挥出了 1+1&amp;gt;2 的效应，互相激励，互相促进。&lt;/p&gt;
&lt;p&gt;如果在团队内找不到合适的伙伴，
那么参加外部活动，加入本地社区就是另外一种寻找朋友的方式。
在豆瓣同城、Meetup 等网络社区中，都可以找到大量同行业的朋友。
我自己曾经深度参与的组织有 CPyUG（Python 社区） / GDG（Google 开发者社区）
/ LUG（Linux 用户组）。&lt;/p&gt;
&lt;p&gt;写作也是一种高效的社交，建立自己的知识输出平台，有利于结实更多同行业人才。
输出自己的经验的同时，还能进行二次思考，并且形成自己的个人品牌。&lt;/p&gt;
&lt;h2 id="yong-jiao-tou-piao"&gt;用脚投票&lt;/h2&gt;
&lt;p&gt;如果经过各种尝试，发现的确无法恢复自己对工作的热情，那么也可能是环境的问题。
给自己一些时间思考，思考清楚原因。
离开对个体和团队来说未必是一件好事。
长期消沉没有战斗力的人，对于团队其实是团队毒药，会将气氛带差。
在一个没有热情的环境中工作，也是浪费个人的时间。「逝者如斯，不舍昼夜」，
一个人的生命何其短暂，不要浪费在没热情的事情上。&lt;/p&gt;
&lt;p&gt;如果离开当前的团队，那么在下次选择时候，一定要慎重考虑之前遇到的问题，
避免悲剧重复发生。&lt;/p&gt;
&lt;h2 id="zui-hou"&gt;最后&lt;/h2&gt;
&lt;p&gt;一个人很难持续保持极高热情，原因是你的工作内容始终会变得熟悉和重复。
这时候即进入一个舒适区，选择适应环境还是挣扎走出来，
这取决于个人的追求。
努力调整自己，通过学习、体验、Review 的方式，来帮助自己成长。
当到达瓶颈期的时候，想办法从自身、外部寻找帮助，重新进入非舒适区，才能让自己持续成长。&lt;/p&gt;
&lt;p&gt;祝你有热情地工作。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/12/enthusiasm/"&gt;https://blog.alswl.com/2017/12/enthusiasm/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term=""></category></entry><entry><title>一个关于 nolock 的故事</title><link href="https://blog.alswl.com/2017/09/sql-server-nolock/" rel="alternate"></link><published>2017-09-19T16:43:45+08:00</published><updated>2017-09-19T16:43:45+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2017-09-19:2017/09/sql-server-nolock/</id><summary type="html">&lt;p&gt;&lt;img alt="sql-server.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/sql-server.png"/&gt;&lt;/p&gt;
&lt;p&gt;加入沪江不久，我就被扔到一个将集团 SQL Sever 的数据库迁移到 MySQL 的项目里，
同时伴随进行的还有 .net 系统迁移到 Java 系统。
在这个过程中我发现了一个很有趣的现象：历史遗留的 .net 项目中，
几乎所有的 SQL 中都会使用一个关键字：&lt;code&gt;nolock&lt;/code&gt;。
这让我很困惑，&lt;code&gt;nolock&lt;/code&gt; 的字面意思是对当前技术不使用锁技术，为什么要这样用呢？&lt;/p&gt;

&lt;p&gt;我找了一个范例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dbo&lt;/span&gt;&lt;span class="p"&gt;].[&lt;/span&gt;&lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nolock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt;  &lt;span class="n"&gt;aField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; 
       &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;bField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作为横向支持工程师，开发工程师会问我：「数据库即将从 SQL Server
迁移到 MySQL，我们编码中还需要使用 &lt;code&gt;nolock&lt;/code&gt; 么？
MySQL 里面对应的写法是什么？」。
我并没有 SQL Server 的生产环境使用经验，一时间无法回答。
于是课后做相关知识学习，这里就是这次学习的一点成果。&lt;/p&gt;
&lt;p&gt;这个问题将被拆解成三个小问题进行回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nolock&lt;/code&gt; 是什么？&lt;/li&gt;
&lt;li&gt;为什么会需要在每个 Query 语句使用 &lt;code&gt;nolock&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;MySQL 的对应写法是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们一个一个来看。&lt;/p&gt;
&lt;h2 id="di-yi-ge-wen-ti-nolock-shi-shi-yao"&gt;第一个问题：nolock 是什么？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nolock&lt;/code&gt; 是 SQL Server 的一个关键字，这类关键字官方将其称之为 Hints。
Hints 的设计目的是为了能够让 SQL 语句在运行时，动态修改查询优化器的行为。
在语法上，Hints 以 &lt;code&gt;WITH&lt;/code&gt; 开头。除了 &lt;code&gt;WITH(nolock)&lt;/code&gt;，
还有 &lt;code&gt;TABLOCK&lt;/code&gt; / &lt;code&gt;INDEX&lt;/code&gt; / &lt;code&gt;ROWLOCK&lt;/code&gt; 等常见的 Hints。&lt;/p&gt;
&lt;p&gt;让我们仔细看看 MSDN 文档上的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;nolock&lt;/code&gt; 的作用等同于 &lt;code&gt;READUNCOMMITTED&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;READUNCOMMITTED&lt;/code&gt; 这是一种 RDBMS 隔离级别。
使用 &lt;code&gt;nolock&lt;/code&gt; 这个关键词，可以将当前查询语句隔离级别调整为 &lt;code&gt;READ UNCOMMITTED&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;计算机基础好的同学，应该对 &lt;code&gt;READUNCOMMITTED&lt;/code&gt; 这个关键词还有印象。
而基础不扎实的同学，也许只是觉得这个关键词眼熟，但是讲不清楚这是什么。
如果阅读这句话完全没有理解困难，那恭喜你，你可以直接跳到下一节了。
其他朋友就跟随我继续探索一下 RDMBS 的世界，复习一下隔离级别相关的知识。&lt;/p&gt;
&lt;h3 id="ge-chi-ji-bie"&gt;隔离级别&lt;/h3&gt;
&lt;p&gt;SQL 92 定义了四个隔离级别
（&lt;a href="https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels"&gt;Isolation (database systems) - Wikipedia&lt;/a&gt;），
其隔离程度由高到低是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可序列化（Serializable）&lt;/li&gt;
&lt;li&gt;可重复读（Repeatable reads）&lt;/li&gt;
&lt;li&gt;提交读（Read committed）&lt;/li&gt;
&lt;li&gt;未提交读（Read uncommitted）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单单将这几个技术名词简单地罗列出来并没有什么意义，还有这几个问题需要搞清楚：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隔离级别解决什么问题？&lt;/li&gt;
&lt;li&gt;为什么存在多种隔离级别？&lt;/li&gt;
&lt;li&gt;我们所谓的隔离级别从高到低，是什么含义，如何逐层降低的？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先是「隔离级别解决什么问题？」，
用通俗的语言描述就是：加一个针对数据资源的锁，从而保证数据操作过程中的一致性。&lt;/p&gt;
&lt;p&gt;这是最简单的实现方式，过于粗暴的隔离性将大幅降低性能，
多种隔离级别就是是为了取得两者的平衡。&lt;/p&gt;
&lt;p&gt;接下来我们来回答第二个问题「为什么存在多种粒度的隔离级别？」
这其实是一个需求和性能逐步平衡的过程，&lt;/p&gt;
&lt;p&gt;我们逐层递进，将隔离级别由低到高逐层面临进行分析。&lt;/p&gt;
&lt;h4 id="read-uncommitted"&gt;Read Uncommitted&lt;/h4&gt;
&lt;p&gt;Read Uncommitted 这个隔离级别是最低粒度的隔离级别，
如同它的名字一般，它允许在操作过程中不会锁，从而让当前事务读取到其他事务的数据。&lt;/p&gt;
&lt;p&gt;&lt;img alt="read-uncommitted.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/read-uncommitted.png"/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，在 Transaction 2 查询时候，Transaction 1 未提交的数据就已经对外暴露。
如果 Transaction 1 最后 Rollback 了，那么 Transaction 读取的数据就是错误的。&lt;/p&gt;
&lt;p&gt;「读到了其他事务修改了但是未提交的数据」即是&lt;strong&gt;脏读&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id="read-committed_1"&gt;Read Committed&lt;/h3&gt;
&lt;p&gt;想要避免脏读，最简单的方式就是在事务更新操作上加一把写锁，
其他事务需要读取数据时候，需要等待这把写锁释放。&lt;/p&gt;
&lt;p&gt;&lt;img alt="read-committed-1.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/read-committed-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，Transaction 1 在写操作时候，对数据 A 加了写锁，
那么 Transaction 2 想要读取 A，就必须等待这把锁释放。
这样就避免当前事务读取其他事务的未提交数据。&lt;/p&gt;
&lt;p&gt;但是除了脏读，一致性的要求还需要「可重复读」，即
「在一个事务内，多次读取的特定数据都必须是一致的
（即便在这过程中该数据被其他事务修改）」。&lt;/p&gt;
&lt;p&gt;&lt;img alt="read-committed-2.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/read-committed-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;上图就是没能保证「可重复度」，Transaction 2 第一次读取到了数据 A，
然后 Transaction 1 对数据 A 更新到 A'，那么当 Tranction 2 再次读取 A 时候，
它本来期望读到 A，但是却读到了 A'，这和它的预期不相符了。
解决这个问题，就需要提升隔离级别到「Repeatable Read」。&lt;/p&gt;
&lt;h3 id="repeatable-read"&gt;Repeatable Read&lt;/h3&gt;
&lt;p&gt;这个名字非常容易理解，即保障在一个事务内重复读取时，
始终能够读取到相同的内容。来看图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="repeatable-read.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/repeatable-read.png"/&gt;&lt;/p&gt;
&lt;p&gt;如上所示，当 Transation 2 读取 A 时候，会同时加上一把 Read Lock，
这把锁会阻止 Transaction 1 将 A 更新为 A'，Transaction 1 要么选择等待，
要么就选择结束。&lt;/p&gt;
&lt;p&gt;当我们将隔离级别升到这里是，似乎已经完美无缺了。
不管是写入还是读取，我们都可以保证数据的一致性不被破坏。
但是其实还有漏洞：新增数据的一致性！&lt;/p&gt;
&lt;p&gt;上述的三个隔离级别，都是对特定的一行数据进行加锁，
那假如将要更新的数据还没有写入数据库，如何进行加锁呢？
比如自增表的新键，或者现有数据内的空缺 Key？&lt;/p&gt;
&lt;p&gt;&lt;img alt="repeatable-read-2.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/repeatable-read-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;如图所示，在上述操作中，Transaction 2 查询了一个范围 Range 之后，Transaction 1
在这个范围内插入了一条新的数据。此时 Transaction 2 再次进行范围查询时候，
会发现查询到的 Range 和上次已经不一样了，多了一个 newA。&lt;/p&gt;
&lt;p&gt;这就是最高隔离级别才能解决的「幻影读」：
当两个完全相同的查询语句执行得到不同的结果集，
这常常在范围查询中出现。&lt;/p&gt;
&lt;h3 id="serializable"&gt;Serializable&lt;/h3&gt;
&lt;p&gt;从字面意思看，该隔离级别需要将被操作的数据加锁加一把锁。
任何读写操作都需要先获得这把锁才能进行。如果操作中带 WHERE 条件，
还需要将 WHERE 条件相关的范围全部加锁。&lt;/p&gt;
&lt;p&gt;&lt;img alt="serializable.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201709/serializable.png"/&gt;&lt;/p&gt;
&lt;p&gt;如图所示，在 Transaction 2 操作过程中，会对 Range 进行加锁，
此时其他事务无法操作其中的数据，只能等待或者放弃。&lt;/p&gt;
&lt;h3 id="db-de-mo-ren-ge-chi-ji-bie"&gt;DB 的默认隔离级别&lt;/h3&gt;
&lt;p&gt;现在我们已经理解了隔离级别，那么「SQL Server 默认使用的隔离级别是什么呢？」
根据 &lt;a href="https://msdn.microsoft.com/en-us/library/ms175909.aspx"&gt;Customizing Transaction Isolation Level&lt;/a&gt;
这个文档描述，SQL Server 默认隔离级别是 READ COMMITTED。&lt;/p&gt;
&lt;p&gt;MySQL InnoDB 的默认隔离级别可以在 &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html"&gt;MySQL :: MySQL 5.7 Reference Manual :: 14.5.2.1 Transaction Isolation Levels&lt;/a&gt;
查询到，是 Read-Repeatable。&lt;/p&gt;
&lt;p&gt;隔离级别并没有最好之说，越高隔离级别会导致性能降低。
隔离级别的设定需要考虑业务场景。&lt;/p&gt;
&lt;h2 id="di-er-ge-wen-ti-wei-shi-yao-yao-shi-yong-nolock_1"&gt;第二个问题：为什么要使用 nolock？&lt;/h2&gt;
&lt;p&gt;我们已经知道 &lt;code&gt;nolock&lt;/code&gt; 的作用是动态调整隔离级别。
那为什么在 SQL Server 的 Query 操作中，需要启用 &lt;code&gt;nolock&lt;/code&gt; 呢？
我问了几个工程师，他们都语焉不详，或者是很泛泛地说：禁用读写锁，可以提升查询性能。&lt;/p&gt;
&lt;p&gt;此时我产生了困惑：「那么此时的数据一致性就不需要考虑了么？
我们的数据库，已经到了需要禁用锁的程度来进行优化了么？」
我于是自己去探索，想知道为何广泛使用 &lt;code&gt;nolock&lt;/code&gt; 会成为一个「最佳实践」？&lt;/p&gt;
&lt;p&gt;由于时代久远，我只能追述到一些相关信息，比如
&lt;a href="https://blogs.msdn.microsoft.com/sqlcat/2013/09/16/top-10-sql-server-integration-services-best-practices/"&gt;Top 10 SQL Server Integration Services Best Practices | SQL Server Customer Advisory Team&lt;/a&gt;
中提到 「Use the NOLOCK or TABLOCK hints to remove locking overhead.」
但这个是针对于 SSIS 查询器，并不是针对业务内部使用。
反而能找到一大堆的文档，在反对使用 &lt;code&gt;nolock&lt;/code&gt; 这个关键字。&lt;/p&gt;
&lt;p&gt;继续追查下去，还从蛛丝马迹中寻找到一个使用 &lt;code&gt;nolock&lt;/code&gt; 的理由，
SQL Server 默认是 Read Committed，
更新操作会产生排它锁，会 block 这个资源的查询操作，
已插入但未提交的数据主键也会产生一个共享锁，
而此时则会 block 这张表的全表查询和 Insert 操作。
为了避免 Insert 被 Block，就会推荐使用 &lt;code&gt;nolock&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了验证这是原因，我做一些 &lt;code&gt;nolock&lt;/code&gt; 测试。&lt;/p&gt;
&lt;h3 id="nolock-ce-shi"&gt;nolock 测试&lt;/h3&gt;
&lt;p&gt;检查当前 SQL Server 隔离级别，确认隔离级别是默认的 Read Committed：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;transaction_isolation_level&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'Unspecified'&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'ReadUncommitted'&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'ReadCommitted'&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'Repeatable'&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'Serializable'&lt;/span&gt;
       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
         &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;'Snapshot'&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION_ISOLATION_LEVEL&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dm_exec_sessions&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;session_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt;&lt;span class="n"&gt;SPID&lt;/span&gt;

&lt;span class="c1"&gt;-- ReadCommitted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建表，初始化数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;id&lt;/span&gt;    &lt;span class="nb"&gt;BIGINT&lt;/span&gt;    &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;NCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;clustered&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Transaction 1 中发起 Update 操作（INSERT / DELETE 同理），但是并不做 Commit 提交：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;开启一个新的 Session，发起全表查询和新增 PK 查询操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不出所料，此时查询果然会被 Block 住。&lt;/p&gt;
&lt;h3 id="mvcc"&gt;MVCC&lt;/h3&gt;
&lt;p&gt;并发控制的手段有这些：封锁、时间戳、乐观并发控制、悲观并发控制。
SQL Server 在 2015 后，引入了 MVCC（多版本控制）。
如果最终数据是一致，会允许数据写入，否则其他事务会被阻止写入。
那么 MVCC 引入是否可以解决 Insert 数据的锁问题？
同样，我做了以下测试：&lt;/p&gt;
&lt;p&gt;查询 SQL Server 使用启用 MVCC ALLOW_SNAPSHOT_ISOLATION：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snapshot_isolation_state&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;databases&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 T-SQL 启用测试表的 SNAPSHOT_ISOLATION：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;HJ_Test3D&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;ALLOW_SNAPSHOT_ISOLATION&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着重复上面里面的 Insert 试验，依然被 Block 住。
看来 MVCC 并不能解决 Insert 锁的问题。&lt;/p&gt;
&lt;h3 id="sql-server-2005-zhi-hou-huan-xu-yao-shi-yong-nolock-yao"&gt;SQL Server 2005 之后还需要使用 nolock 么？&lt;/h3&gt;
&lt;p&gt;从官方文档和上文测试可以看到，在 Insert 时候，由于排它锁的存在，
会导致 &lt;code&gt;SELECT ALL&lt;/code&gt; 以及 &lt;code&gt;SELECT&lt;/code&gt; 新插入数据的相关信息被锁住。
在这两种情景下面是需要使用 &lt;code&gt;nolock&lt;/code&gt; 的。&lt;/p&gt;
&lt;p&gt;除此之外，有这么几类场景可以使用 &lt;code&gt;nolock&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 SSIS 查询器中进行数据分析，不需要精准数据&lt;/li&gt;
&lt;li&gt;历史数据进行查询，没有数据更新操作，也不会产生脏数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要思考一下，性能和数据一致性上的权衡上，
我们是否愿意放弃数据一致性而为了提高一丝丝性能？
以及我们有多少场景，会频繁使用 &lt;code&gt;SELECT ALL&lt;/code&gt; 操作而没有查询条件？&lt;/p&gt;
&lt;p&gt;微软官方在 2015 的特性列表里面，明确地指出 &lt;code&gt;nolock&lt;/code&gt; 特性未来会在某个版本被废除：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Specifying NOLOCK or READUNCOMMITTED in the FROM clause of an UPDATE or DELETE statement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而改为推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove the NOLOCK or READUNCOMMITTED table hints from the FROM clause.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事实上，我听过不少团队会禁止在生产环境使用不带 WHERE 条件的 SQL。
那在这种模式下，产生相关的问题的几率也就更小了。
如果有很高的并发需求，那需要考虑一下是否需要其他优化策略：比如使用主从分离、
Snapshot 导出、流式分析等技术。&lt;/p&gt;
&lt;h2 id="di-san-ge-wen-ti-mysql-de-dui-ying-xie-fa-shi-shi-yao_1"&gt;第三个问题：MySQL 的对应写法是什么？&lt;/h2&gt;
&lt;p&gt;终于轮到 MySQL 的讨论了。MySQL，InnoDB 天生支持 MVCC，
并且支持 &lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt; &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-auto-increment-handling.html"&gt;AUTO_INCREMENT Handling in InnoDB&lt;/a&gt;。
这样可以避免 Insert 操作锁住全局 Select 操作。
只有在同时 Insert 时候，才会被 Block 住。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt; 支持几种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;innodb_autoinc_lock_mode = 0 (&amp;ldquo;traditional&amp;rdquo; lock mode)&lt;ul&gt;
&lt;li&gt;涉及auto-increment列的插入语句加的表级AUTO-INC锁，只有插入执行结束后才会释放锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;innodb_autoinc_lock_mode = 1 (&amp;ldquo;consecutive&amp;rdquo; lock mode)&lt;ul&gt;
&lt;li&gt;可以事先确定插入行数的语句，分配连续的确定的 auto-increment 值&lt;/li&gt;
&lt;li&gt;对于插入行数不确定的插入语句，仍加表锁&lt;/li&gt;
&lt;li&gt;这种模式下，事务回滚，auto-increment 值不会回滚，换句话说，自增列内容会不连续&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;innodb_autoinc_lock_mode = 2 (&amp;ldquo;interleaved&amp;rdquo; lock mode)&lt;ul&gt;
&lt;li&gt;同一时刻多条 SQL 语句产生交错的 auto-increment 值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里也做了相应的测试。首先检查数据库隔离级别和 &lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt; 模式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt;&lt;span class="k"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tx_isolation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt;&lt;span class="k"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tx_isolation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt;&lt;span class="n"&gt;tx_isolation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'innodb_autoinc_lock_mode'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检查后发现都是 Repeatable Read，&lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt; 模式是 1。
然后创建测试表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;InnoDB&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="n"&gt;CHARSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Transaction 1 中 Insert 数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Transaction 2 中 Select 数据，可以正常查询：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt;   &lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Transaction 2 中 Insert 数据，会被 Block 住：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个测试可以证明 MySQL 可以在 &lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt;=1 下，
Insert 同时 Query 不会被 Block，
但是在另外一个事务中 Insert 会被 Block。
结论是，由于 &lt;code&gt;innodb_autoinc_lock_mode&lt;/code&gt; 的存在，MySQL 中可以不需要使用 &lt;code&gt;nolock&lt;/code&gt;
关键词进行查询。&lt;/p&gt;
&lt;h2 id="hui-gu-yi-xia"&gt;回顾一下&lt;/h2&gt;
&lt;p&gt;本文着重去回答这么几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要用 &lt;code&gt;noloc&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;为什么要改变隔离级别？&lt;/li&gt;
&lt;li&gt;为什么 MySQL 不需要做类似的事情？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然只凑足了三个 「为什么」 的排比，
但是聪明的读者仍然会发现，我是使用了著名的
&lt;a href="https://zh.wikipedia.org/wiki/%E4%BA%94%E4%B8%AA%E4%B8%BA%E4%BB%80%E4%B9%88"&gt;五个为什么&lt;/a&gt;
方法思考问题。
通过使用这个方法，我们最后不但打破了老旧的最佳实践，还了解了本质原理，
并找到了新的最佳实践。&lt;/p&gt;
&lt;p&gt;希望读者朋友在遇到困难时候，多问几个为什么，多抱着打破砂锅问到底的精神，
这样才能让每个困难成为我们成长的垫脚石。&lt;/p&gt;
&lt;h2 id="xiang-guan-zi-liao"&gt;相关资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/%E4%BA%8B%E5%8B%99%E9%9A%94%E9%9B%A2"&gt;事务隔离 - 维基百科，自由的百科全书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/hints-transact-sql-table"&gt;Table Hints (Transact-SQL) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/snapshot-isolation-in-sql-server"&gt;Snapshot Isolation in SQL Server | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-databases-transact-sql"&gt;sys.databases (Transact-SQL) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.html"&gt;MySQL :: MySQL 5.7 Reference Manual :: 15.3 InnoDB Multi-Versioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/09/sql-server-nolock/"&gt;https://blog.alswl.com/2017/09/sql-server-nolock/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="SQL Server"></category><category term="MySQL"></category></entry><entry><title>当我们在聊监控，我们在聊什么？</title><link href="https://blog.alswl.com/2017/06/monitoring-introducing/" rel="alternate"></link><published>2017-06-08T15:40:41+08:00</published><updated>2017-06-08T15:40:41+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2017-06-08:2017/06/monitoring-introducing/</id><summary type="html">&lt;p&gt;最近在团队中给大家做了一个分享，泛泛地聊了一些有关「监控」的话题。
其实做分享对分享者的作用往往大于参与者。
这是一次将自己知识的梳理的过程，于是我将这次分享整理成这篇文章。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201706/stock-exchange.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201706/stock-exchange.png"/&gt;&lt;/p&gt;

&lt;h2 id="mu-de"&gt;目的 🎯&lt;/h2&gt;
&lt;p&gt;我们先来聊聊，什么是「监控」，以及我们期望通过「监控」完成哪些目的？&lt;/p&gt;
&lt;p&gt;传统意义上的监控，是指：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过一些手段和工具，关注运行中的&lt;strong&gt;硬件、软件、用户体验&lt;/strong&gt;的关键数据，将其暴露出来。
  当关键数据出现异常时候发出警告，进行人工或者自动的响应。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们平时看到的最常见的监控系统，比如 Zabbix，提供了丰富的模板，
可以监控服务器的 Load / CPU Usage / Alive 这些常规指标。
并在出现问题时候，对其进行报警通知。
随后运维工程师们会上线进行应急操作，case by case 的处理故障。&lt;/p&gt;
&lt;p&gt;我将上面的使用目的归纳为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;故障发生时提供数据报警&lt;/li&gt;
&lt;li&gt;提供历史数据以供分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;故事到这里似乎可以结束了，可监控真的是这么简单的么？
当然没，随着时代的进步，用户对服务提出了更为严苛的要求，
同时我们也有能力进一步控制平均故障修复时间
（&lt;a href="https://en.wikipedia.org/wiki/Mean_time_between_failures"&gt;MTBF&lt;/a&gt;），
上述描述的做法已经不能满足我们了。&lt;/p&gt;
&lt;p&gt;现在让我们切换一下视角，从传统的 OPS 的视角切换到 SRE
（&lt;a href="https://en.wikipedia.org/wiki/Site_reliability_engineering"&gt;Site Reliability Engineering&lt;/a&gt;）的视角。
当我们在关注网站整体的可用性时，我们会发现：
故障警报处理当然很重要，但是我们根本上想减少甚至避免 MTBF。
我们有两种手段：
一种是去除单点故障，让问题自然发生，但是不对线上造成影响；
另一种是在问题出现的早期就发现并进行及时修复。
前者是高可用范畴，后者就是我们今天关注的「监控」了。&lt;/p&gt;
&lt;p&gt;监控的目的是要&lt;strong&gt;将灾难消灭在襁褓里；在灾难即将出现或者发生问题时， 给大家展示直接的原因&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那为了达成这两个目标，我们需要回到问题的本质，重新思考两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监控哪些对象？&lt;/li&gt;
&lt;li&gt;如何识别故障？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="dui-xiang"&gt;对象 🐘🐘&lt;/h2&gt;
&lt;p&gt;我们说的监控对象，一般指的都是某个资源，
资源即持有某种其他方需要的某些属性的载体，包括硬件、软件。
除了资源这种类型，还有一种常见的监控对象是「体验」，即终端用户的访问感受，
这块内容我们暂时略去。&lt;/p&gt;
&lt;p&gt;让我们来先看一下常见的资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件&lt;ul&gt;
&lt;li&gt;服务器&lt;/li&gt;
&lt;li&gt;网络设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件&lt;ul&gt;
&lt;li&gt;Application&lt;/li&gt;
&lt;li&gt;Infrastructure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个分类是粗粒度的描述，为了落地地描述监控对象对象的健康状况，
我们还要进一步细化。以「服务器」为例，我们可以将其监控的内容细化为以下监控项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Network interface&lt;/li&gt;
&lt;li&gt;Storage devices&lt;/li&gt;
&lt;li&gt;Controllers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何评估这些监控项的健康状况？我们使用
&lt;a href="https://en.wikipedia.org/wiki/Service_level_indicator"&gt;SLI（Service Level Indicator）&lt;/a&gt;。
比如&lt;strong&gt;可用性&lt;/strong&gt;就是一个最容易理解的 SLI。
这里我将资源归为两类，面向用户提供服务的资源和面向存储的资源，
以下是针对这两类资源的常见 SLI：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User-facing Service&lt;ul&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;Latency&lt;/li&gt;
&lt;li&gt;Throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Storage System&lt;ul&gt;
&lt;li&gt;Latency&lt;/li&gt;
&lt;li&gt;Throughput&lt;/li&gt;
&lt;li&gt;durability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 SLI 建立的数字关键指标，称之为
&lt;a href="https://en.wikipedia.org/wiki/Service_level_objective"&gt;Service Level Objective&lt;/a&gt;。
SLO 往往是一组数字范围，比如 CPU 负载的 SLO 可以设置为 0.0-6.0（针对 8 核 CPU）。
不同的资源、不同的业务场景，会有不一样的 SLO 设计。&lt;/p&gt;
&lt;p&gt;看到这里，我们已经聊了要监控哪些指标，那么接下来我们聊聊如何用量化的思想，
帮助指标更易于识别、分析和决策。&lt;/p&gt;
&lt;h2 id="liang-hua-de-si-xiang"&gt;量化的思想 🔢&lt;/h2&gt;
&lt;p&gt;刚开始担任线上救火队成员时候，当有个系统出现问题时候，我经常听到这样的描述：
网站挂了、页面打不开了，CPU 出问题了，内存爆了，线程池炸了等等。
这样的表述虽然没错，但带来的可用价值太少，信息熵太低。
这样的说辞多了，就给人产生一种不靠谱，不科学的感觉。&lt;/p&gt;
&lt;p&gt;那怎样才能成为科学的描述？
古希腊哲学家在思考宇宙的时候，提出了一种心智能力，
从而打开了科学的窗子，这就是 Reasonable，中文名叫理智，这成为了自然科学的基石。
使用 Reasonable 探讨意味着探讨要深入问题的本质，不停留在表象，挖掘出真正有价值的内容。&lt;/p&gt;
&lt;p&gt;但是光有 Reasonable 还不够，B站粉丝建了一个微博，每天会检查
&lt;a href="http://weibo.com/yamanasion?refer_flag=1001030201_&amp;amp;is_hot=1"&gt;今天B站炸了吗&lt;/a&gt;，
他只能告诉我们炸没炸，不能给工程师带来实际的用处。
在科学的发展历史上，我们可以发现在亚里士多德的著作里没有任何数据公式。
他对现象只有描述，只是定性分析，通过描述性状来阐述定理。
这个定性的研究方式到了伽利略那里才出现了突破。
这里我们可以引入第二个关键词是  Quantifier，量化。
伽利略率先使用定量分析的方法，并将其运用到动力学和天文学，从而开创了近代科学。&lt;/p&gt;
&lt;p&gt;如果我们以定量的方式来描述网站挂没挂，就会变成：网站的响应耗时在 30s，基本无法使用。
描述线程池出问题，就会变成：active 线程数量是 200，已经到达 maxCount 数量，无法进行分配。
你看，通过这样的描述，我们一下子就能发现问题出在哪里。&lt;/p&gt;
&lt;h2 id="use"&gt;USE 💡&lt;/h2&gt;
&lt;p&gt;现在我们已经了解了「监控哪些对象？」，以及尝试用「量化」这个法宝来「识别故障」。
那有没有一些最佳实践帮助大家高效的识别故障呢？这里我推荐 Brend Gregg 大神的 &lt;a href="http://www.brendangregg.com/usemethod.html"&gt;USE 方法&lt;/a&gt;。
Brend Gregg 是 Netflix 的首席 SRE，著有 &lt;a href="http://www.brendangregg.com/sysperfbook.html"&gt;Systems Performance Book&lt;/a&gt;，
目前已经出版中文版 &lt;a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B0140I5WPK"&gt;性能之巅:洞悉系统、企业与云计算&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;USE 分别是三个单词的首字母缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utilization：使用率，CPU running percent，硬盘的 IO &lt;/li&gt;
&lt;li&gt;Saturation：饱和度，一般偏存储型资源，内存使用，硬盘使用&lt;/li&gt;
&lt;li&gt;Error：错误数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以为每个资源找到各自的 USE 度量指标，具体的 Check List 清单可以参考
&lt;a href="http://www.brendangregg.com/USEmethod/use-rosetta.html"&gt;USE Method: Rosetta Stone of Performance Checklists&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里举个例子，前段时间在设计 MySQL HA 方案时候，同时关注了 MySQL 的监控方案，
那么针对 MySQL，我们要做哪些监控呢？下面是使用 USE 方法设计出来的 SLI：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Business&lt;ul&gt;
&lt;li&gt;Questions：语句计总，Throughput&lt;/li&gt;
&lt;li&gt;Slow_queries：慢查询计总，Error&lt;/li&gt;
&lt;li&gt;Com_select：查询语句计总，Throughput&lt;/li&gt;
&lt;li&gt;Com_insert：插入语句计总，Throughput&lt;/li&gt;
&lt;li&gt;Com_update：更新语句计总，Throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Threads &amp;amp; Connections&lt;ul&gt;
&lt;li&gt;Threads_connected：当前连接数，Utilization&lt;/li&gt;
&lt;li&gt;Threads_running：当前使用中连接数，Utilization&lt;/li&gt;
&lt;li&gt;Aborted_connects：尝试连接失败数，Error&lt;/li&gt;
&lt;li&gt;Connection_errors_max_connections：由于连接数超标从而失败的连接数，Error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Buffer&lt;ul&gt;
&lt;li&gt;Innodb_buffer_pool_pages_total：内存使用页数，Utilization&lt;/li&gt;
&lt;li&gt;Innodb_buffer_pool_read_requests：读请求数计总，Utilization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wan"&gt;完 🏁&lt;/h2&gt;
&lt;p&gt;如果你对我上面描述的还意犹未尽，建议你可以看 &lt;a href="https://book.douban.com/subject/19992841/"&gt;Effective Monitoring and Alerting&lt;/a&gt;。
虽然本书没有中文版，但是关于监控、报警的原理解析很到位，值得一看。
另外还有一本 &lt;a href="https://book.douban.com/subject/26875239/"&gt;SRE: Google运维解密&lt;/a&gt;，
里面有不少篇幅在讲「SLA」，也是和监控、报警息息相关的。&lt;/p&gt;
&lt;p&gt;这次讲了一些概念性的内容，期望对大家有帮助，下一次我再分享一篇文章，聊聊 Metrics。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/06/monitoring-introducing/"&gt;https://blog.alswl.com/2017/06/monitoring-introducing/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Monitoring"></category></entry><entry><title>XSS 攻击的处理</title><link href="https://blog.alswl.com/2017/05/xss/" rel="alternate"></link><published>2017-05-31T22:04:00+08:00</published><updated>2017-05-31T22:04:00+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2017-05-31:2017/05/xss/</id><summary type="html">&lt;p&gt;这是一年前写的项目笔记，一直在我的待办事项里等待做总结，今天偶然翻到，就整理成文章发出来。
谨以此文怀念 &lt;a href="http://wooyun.org/"&gt;乌云&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201705/wooyun.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201705/wooyun.jpg"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="shi-qing-yuan-you"&gt;事情缘由&lt;/h2&gt;
&lt;p&gt;春节前的某一天，收到一封来自乌云（国内知名白帽子团队）的邮件，
告知我厂网站上出现一例 XSS 漏洞。
因为以前对 XSS 输入做过防御，还以为是某个前端 DOM 上的 XSS 漏洞，
后来仔细一看，不妙，是个影响甚大的存储型 XSS 漏洞。&lt;/p&gt;
&lt;p&gt;这里简单科普一下 XSS
&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC"&gt;跨网站脚本 -维基百科，自由的百科全书&lt;/a&gt;
中介绍到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;跨网站脚本（Cross-site  scripting，通常简称为XSS或跨站脚本或跨站脚本攻击）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。
  它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;XSS 攻击可以分成两种，反射性 XSS / 存储型 XSS。前者是需要用户触发的 XSS，
针对当前用户的攻击行为。而后者存储型 XSS 则更为严重，一旦攻击代码被保存，
所有访问被攻击的页面，都会触发用户被攻击行为。&lt;/p&gt;
&lt;p&gt;这次爆出的问题就是最严重的存储型 XSS，意味着每个访问到有问题页面的用户都会中招。
时间紧迫，问题必须被解决。&lt;/p&gt;
&lt;h2 id="xss-shi-xian-shou-duan"&gt;XSS 实现手段&lt;/h2&gt;
&lt;p&gt;在解决问题之前，需要对这个问题有必要的基础认识。
我们先看看 XSS 攻击是如何工作的，以及攻击者的目的是什么。&lt;/p&gt;
&lt;p&gt;XSS 的原理是通过构造特殊的数据，并通过传递参数或者保存表单数据的方式，
让这些构建的数据破坏 DOM 结构，从而让自己预先构造数据中的 JS 脚本被执行。&lt;/p&gt;
&lt;p&gt;检查存储型 XSS 漏洞的方法，可以在对应的 input field 里放入一些构造的数据，如果保存后可以被执行，就说明存在 XSS 漏洞。&lt;/p&gt;
&lt;p&gt;常见的检测方法（来自&amp;nbsp;&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC#.E6.A3.80.E6.B5.8B.E6.96.B9.E6.B3.95"&gt;跨网站脚本 - 维基百科，自由的百科全书&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;document.cookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&amp;gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;"&amp;gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;script&amp;gt;alert (vulnerable)&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;%3Cscript%3Ealert('&lt;/span&gt;&lt;span class="nx"&gt;XSS&lt;/span&gt;&lt;span class="s1"&gt;')%3C/script%3E&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;script&amp;gt;alert('&lt;/span&gt;&lt;span class="nx"&gt;XSS&lt;/span&gt;&lt;span class="s1"&gt;')&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;img src="javascript:alert('&lt;/span&gt;&lt;span class="nx"&gt;XSS&lt;/span&gt;&lt;span class="s1"&gt;')"&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;img src="http://xxx.com/yyy.png" onerror="alert('&lt;/span&gt;&lt;span class="nx"&gt;XSS&lt;/span&gt;&lt;span class="s1"&gt;')"&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;（这个仅限IE有效）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;攻击者通过 XSS 可以窃取用户的相关信息，如果用户是管理员，那么影响更大。
通过这些身份信息，攻击者可以进一步篡改信息或者进行诈骗，后果不堪设想。
PS：一个有效粗暴的方式，是将对公、对内系统的域名分离，对内部系统进行物理级别隔离。&lt;/p&gt;
&lt;h2 id="wo-han-li-shi-shang-de-chu-li-fang-an"&gt;我厂历史上的处理方案&lt;/h2&gt;
&lt;p&gt;XSS 问题又来已久，咱厂子开了这么久，历史上如何防御的呢？
答案是用了两个策略：第一个是使用&amp;nbsp;&lt;a href="https://www.owasp.org/index.php/Main_Page"&gt;OWASP&lt;/a&gt;
提供的库进行内容过滤，第二个是在存储数据时，存储了转义后的数据。&lt;/p&gt;
&lt;p&gt;在技术上处理 XSS，有两种态度可以选择：第一种是前置过滤，即将用户所有数据都进行转义，
在输出时候在前端（模板渲染）层面直接输出。
第二种是用户输入的数据不经过转义就直接存储起来，前端在使用时候保证对数据进行转义。&lt;/p&gt;
&lt;p&gt;我厂历史上使用的方案的前者，优点是在于前端不需要在每个地方转义，
避免某个地方忘记了转义，从而导致漏洞。缺点则是在输出内容到非 Web 客户端时候，比如
APP，需要进行额外的数据处理过程， 否则 HTMLEncode 的内容，在 APP
上面无法正确输出。&lt;/p&gt;
&lt;p&gt;这个处理方案是稳妥的，那么为什么最近又暴露出问题了？
排查之后发现，原来最近有若干个服务迁移到了一个新系统，
而新系统在安全上面没有全局处理，所以爆出了漏洞。&lt;/p&gt;
&lt;h2 id="ben-ci-chu-li-fang-an"&gt;本次处理方案&lt;/h2&gt;
&lt;p&gt;知道了原因，那么可以快速解决问题了。在这次处理过程中，我们讨论了在当前移动平台增长迅速，Web 平台增长缓慢的大势下，能否直接存储用户原始数据？
而且由于规范制定不严格，目前系统内有些地方存储转码后数据，有些地方存储转码前数据。
导致在一些特殊的字符（颜文字）处理上不一致，从而导致在处理 &lt;code&gt;br&lt;/code&gt; / &lt;code&gt;&amp;lt;&lt;/code&gt; 这类特殊字符时，表现不同。&lt;/p&gt;
&lt;p&gt;由于 DB 中有部分数据转义处理，部分数据原文存储，所以先处理输出后敏感信息，在模板层面启用全局
encode。 将有危险的数据转移为在 HTML 文本。&lt;/p&gt;
&lt;p&gt;PS：现代 Web 框架的模板渲染引擎，一般会默认开启 HTMLEncode，而
Freemarker 居然在 2.3.24-rc01 才支持，现在都没有发布，唉&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;处理方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开启全局 HTML 输出 Encode，有一个&amp;nbsp;&lt;a href="http://watchitlater.com/blog/2011/10/default-html-escape-using-freemarker/"&gt;Default HTML-escape using Freemarker&lt;/a&gt;&amp;nbsp;方案，可以默认开启 Html Encode，在这个处理方案中，需要注意有些地方真的需要输出原始 html，需要&amp;nbsp;&lt;code&gt;noescape&lt;/code&gt;&amp;nbsp;特殊处理&lt;/li&gt;
&lt;li&gt;检查所有前端操作，禁止字符串拼接，使用框架支持的模板进行渲染，拖小菊的福，新系统在这块工作完成度一直比较好&lt;/li&gt;
&lt;li&gt;将&amp;nbsp;&lt;a href="https://www.owasp.org/index.php/Main_Page"&gt;OWASP&lt;/a&gt;&amp;nbsp;方案强制开启&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qi-ta-tips"&gt;其他 Tips&lt;/h2&gt;
&lt;p&gt;OWASP 有一个很长的 &lt;a href="https://www.owasp.org/index.php/SS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"&gt;列表&lt;/a&gt;，教导如何避免 XSS，里面提到了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为何以及如何进行「积极防御」，对立面是仅仅输出时候转义内容本身&lt;/li&gt;
&lt;li&gt;几条对抗 XSS 的规则&lt;ul&gt;
&lt;li&gt;尽量不在特定地方输出不可信变量：script / comment / attribute / tag / style， 因为逃脱 HTMl 规则的字符串太多了。&lt;/li&gt;
&lt;li&gt;将不可信变量输出到 div / body / attribute / javascript tag / style 之前，对&amp;nbsp;&lt;code&gt;&amp;amp; &amp;lt; &amp;gt; " ' /&lt;/code&gt;&amp;nbsp;进行转义&lt;/li&gt;
&lt;li&gt;将不可信变量输出 URL 参数之前，进行 URLEncode&lt;/li&gt;
&lt;li&gt;使用合适的 HTML 过滤库进行过滤&lt;/li&gt;
&lt;li&gt;预防 DOM-based XSS，见&amp;nbsp;&lt;a href="https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet"&gt;DOM based XSS Prevention Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开启 HTTPOnly cookie，让浏览器接触不到 cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;最后送上一个 XSS 攻击工具&amp;nbsp;&lt;a href="http://webxss.net/"&gt;http://webxss.net/&lt;/a&gt;，知己知彼，百战不殆。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/05/xss/"&gt;https://blog.alswl.com/2017/05/xss/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="security"></category></entry><entry><title>👁️ 预测未来？</title><link href="https://blog.alswl.com/2017/01/prophecy/" rel="alternate"></link><published>2017-01-31T11:12:43+08:00</published><updated>2017-01-31T11:12:43+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2017-01-31:2017/01/prophecy/</id><summary type="html">&lt;p&gt;&lt;img alt="201702/clock.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201702/clock.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="la-pu-la-si-zhi-yao"&gt;拉普拉斯之妖&lt;/h2&gt;
&lt;p&gt;未来是可以被预测的么？&lt;/p&gt;
&lt;p&gt;专家在预测股票趋势变化，天气预报员可以预测未来一周甚至更长时间的天气。
如果给他们更多的信息和参数，是否可以将未来预测的更准确？
如果精确的粒度可以达到基本粒子级别，同时给一个计算力超群的计算器，能否精确的推衍未来变化？&lt;/p&gt;

&lt;p&gt;这些想法在我刚接触经典力学时浮现，学习了牛顿三定律之后，异常激动。
感觉人类可以凭借技术的进步，逐步对未来精确预测。彼时可以解决人类即将遇到的任何问题了，化问题于无形。&lt;/p&gt;
&lt;p&gt;这想法其实在 200 年前就出现了。法国伟大的数学家拉普拉斯（Laplace）在他的著作「概率论」里面，
提出了这样的观点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们可以把宇宙现在的状态视为其过去的果以及未来的因。假若一位智者会知道在某一时刻所有促使自然运动的力和所有组构自然的物体的位置，假若他也能够对这些数据进行分析，则在宇宙里，从最大的物体到最小的粒子，它们的运动都包含在一条简单公式里。对于这位智者来说，没有任何事物会是含糊的，并且未来只会像过去般出现在他眼前。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;「根据当前已知即可预测未来」，这种决定论，就是拉普拉斯之妖。&lt;/p&gt;
&lt;h2 id="da-po"&gt;打破&lt;/h2&gt;
&lt;p&gt;除了拉普拉斯的决定论，这个世纪末还发生了另外一件事情。
开尔文男爵在 19 世纪的最后一天，发表了「物理大厦已经落成，所剩只是一些装饰性工作」的言论。
然而，在随后的岁月里，经典物理大厦却开始被量子力学逐步击破，轰然倒地。&lt;/p&gt;
&lt;p&gt;在决定论这个方面，根据海森堡的不确定性理论，粒子的位置与动量不可同时被确定。
这个结论说明目前技术下面，无法精准测量粒子的状态。
既然无法准确测量粒子的状态，就失去了演算未来可能性的基础，更无法预测未来了。&lt;/p&gt;
&lt;p&gt;那既然是无法预测，是否表示，预测未来这件事情是无稽之谈，未来是不成规律的？&lt;/p&gt;
&lt;h2 id="hun-dun-bei-li-jie-cuo-wu-de-hu-die-xiao-ying"&gt;混沌：被理解错误的「蝴蝶效应」&lt;/h2&gt;
&lt;p&gt;针对未来的预测，动力系统中，有相当多的研究和思考，其中比较注明的一项是：蝴蝶效应。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201702/chaos-butterfly.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201702/chaos-butterfly_400.png"/&gt;&lt;/p&gt;
&lt;p&gt;关于「蝴蝶效应」，不用过多解释。命名的来源据说是发现者 Edward Lorenz 觉得图形像是蝴蝶。
而有另一种另一说法是，Edward 的一个比喻「巴西蝴蝶煽动，引起德克萨斯的龙卷风」。&lt;/p&gt;
&lt;p&gt;事实上这种说法是不精准的。Edward 在预测天气模型中，发现起始数据的微小差异，
会导致数日之后计算结果的巨大差异。
从点在于在预测模型上，忽略了一个蝴蝶煽动引起的力量，即起始条件的设定，会导致结果的巨大差异。
而不是表名龙卷风是蝴蝶煽动产生的。&lt;/p&gt;
&lt;p&gt;如果蝴蝶煽动能够产生龙卷风。那么一个普通人的呼吸，也可以造成同样的效果。😂&lt;/p&gt;
&lt;h2 id="fen-xing-he-hun-dun"&gt;分形和混沌&lt;/h2&gt;
&lt;p&gt;和混沌相关的，还有一个重要概念「分形」：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个粗糙或零碎的几何形状，可以分成数个部分，且每一部分都（至少近似地）是整体缩小后的形状&amp;rdquo;[2]，即具有自相似的性质。分形的核心是自相似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随机从这种自相似的图形中提取样本，样本集表现出不可预测的特性。&lt;/p&gt;
&lt;p&gt;混沌的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;非线性系统在一定参数条件下展现分岔（bifurcation）、周期运动与非周期运动相互纠缠，以至于通向某种非周期有序运动。这种运动是不可预测，呈现出失序的状态。三体问题，即是一例混沌的场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么混沌和分形是具有相关性的呢？这里有一个重要概念 IFS。
IFS（Iterated Function System）是迭代函数系统，即在数学上被认为一个完全向量空间上收缩映射的有限集。
分形的图案，部分可以抽象出 IFS 公式。&lt;/p&gt;
&lt;p&gt;这个公式的奇妙之处是在于，在公式渐进推算过程之中，初始看到的结果是混沌无序的，而在逐步运算之后，可以看出分形的特征。&lt;/p&gt;
&lt;p&gt;下图是根据一个 IFS 公式，逐步构造出一个分形图片的过程：&lt;/p&gt;
&lt;p&gt;&lt;img alt="201702/chaosgame.gif" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201702/chaosgame.gif"/&gt;&lt;/p&gt;
&lt;p&gt;图片来自 Wikipedia &lt;a href="https://en.wikipedia.org/wiki/Iterated_function_system"&gt;https://en.wikipedia.org/wiki/Iterated_function_system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这种由初期混沌，逐渐表现为分形的情况，被学者总结为：「混沌在（生成）时间上是分形的；而分形的在空间（展示）上是混沌的。」
混沌中可以找到有序，在非线性中找到理性，混沌中可以演化出非规则，也可以演化出在规则中混沌。&lt;/p&gt;
&lt;h2 id="zhe-xue-shang-de-xiang-zheng"&gt;哲学上的象征&lt;/h2&gt;
&lt;p&gt;感谢你迷迷糊糊的读到这里，混沌不仅仅在数学和物理上面，吸引着一代代人的探索。
在哲学生活指导方面，也有重大的意义。早在古人说「分久必合，合久必分」，
就是一种稳定线性的表现，具有预测性的表现。
而「一生二、二生三，三生万物」则体现了古人对分形的理解。
经典的「马蹄毁了一场战争」故事，讲的是混沌理论。&lt;/p&gt;
&lt;p&gt;这些对未来预测能力的渴望，表现了对生活的掌控欲望，对未来可行性的探索，
在低谷期可以带来希望，大跃进时期可以带来警醒。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;对于我个人而言，虽然失去了能够预测未来的理论基础而略感遗憾。
但是反过来想想，如果真的发明了一台机器，能够精确预言到未来，
那么在发明实现的当天，就能够推衍出未来所有出现的科学理论、文学、艺术创作，
那给后人创造了一个多么再无新事物的未来，这该是一个多么无趣的世界啊。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/01/prophecy/"&gt;https://blog.alswl.com/2017/01/prophecy/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Math"></category></entry><entry><title>👷如何做年前大扫除</title><link href="https://blog.alswl.com/2017/01/spring-cleaning/" rel="alternate"></link><published>2017-01-03T23:20:50+08:00</published><updated>2017-01-03T23:20:50+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2017-01-03:2017/01/spring-cleaning/</id><summary type="html">&lt;p&gt;今年过年特别早，离春节只剩下二十多天了。
为期 7 天的春节里，工程师们不上班，那万一线上业务出现了故障怎么办？
大公司的朋友们会安排专门的人进行值班（此处心疼一下那些需要大年三十还要值班保证高峰的工程师们），
而作为创业团队人少，难做到在线值守，就需要对线上进行一些整理盘点，找出潜在问题，为春节长假做一些准备。&lt;/p&gt;
&lt;p&gt;我们称之为年前大扫除。&lt;/p&gt;
&lt;p&gt;大扫除需要做些什么呢，且听我一一道来。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201701/saber.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201701/saber.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;PS: 冷知识，大扫除英文是 spring cleaning，所以春节大扫除是 Spring Festival spring cleaning。&lt;/p&gt;
&lt;h2 id="da-sao-chu-de-nei-rong"&gt;大扫除的内容&lt;/h2&gt;
&lt;p&gt;大扫除其实是一个查漏补缺+囤积粮草的事情。&lt;/p&gt;
&lt;p&gt;查漏补缺，即找出潜在的问题。这些问题平时可能不会特意去查看，
借助大扫除这个运动，恰好进行盘点。
计算机的世界里，有一个方法论非常好使，在极多场景可以见到其身影：分层。
TCP 的七层模型，架构设计的 N 层 模型，都是对分层思想的使用。
查漏补缺也不例外，我们可以按照业务访问流程，将需要排查的问题拆分为：业务、应用、中间件、网络、物理、存储 etc。&lt;/p&gt;
&lt;p&gt;通过分层，不仅仅完成了自上而下地遍历整个技术栈，也同时将不同模块的内容交给不同的责任方，
确保任务的分割。&lt;/p&gt;
&lt;p&gt;分完模块，还要告知大家如何具体查找问题。
这里我介绍一个通用的方法：USE&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For every resource, check Utilization, Saturation, and Errors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;USE 方法是从 Brend Gregg 那里学来的。
在技术设施的领域里，Resource 即是指各种类型的资源，比如 CPU、磁盘、网络、内存，
Utilization 指的是使用率，可以简单分为百分制和非百分制。
Saturation 是指饱和率，支持 queue 的资源，就会有这个指标。
Error 即错误，可以从错误统计和日志得知。&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;业务领域里面，USE 也有相对应的含义。以审核系统举例，
对应的 USE 可以理解为「审核应用实例跑的 CPU 占用如何，任务队列是否塞满，业务日志是否有异常」。&lt;/p&gt;
&lt;p&gt;除了 USE 里面提到的指标，还有几个指标特别重要：
TPS 、Latency 和 Capacity。
这几个指标对性能敏感的尤为重要。
检查 USE 的同时，我们必须关注一下这三个指标，
确保 TPS / Latency 是否满足我们预期的 SLA。
哦？压根没有制定 SLA，不要慌，和历史数据对比，先制定一个粗糙的 SLA。
哦？连历史数据都没有？那只能找你 Leader 让他考量一下了。&lt;/p&gt;
&lt;p&gt;负责每个子系统的同学，记得检查时候将这些收集到的数据列下来。
在 Metric 做的还不够完善时候，这些数据也是很宝贵的。&lt;/p&gt;
&lt;p&gt;在我看来，检查 USE / TPS / Latency ，&lt;strong&gt;&lt;strong&gt;最大的作用是将抽象的可用性指标描述为几个易于理解的数值进行量化。
一旦能够量化，就可以对比、观测、监控，并且 Review 起来也异常轻松&lt;/strong&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="ying-dui-fang-an"&gt;应对方案&lt;/h2&gt;
&lt;p&gt;检查出问题之后，就要考虑应对了。时间急任务多，我们的应对方案是是囤积粮草 / 写救命笔记。&lt;/p&gt;
&lt;p&gt;囤积粮草比较好理解，&lt;strong&gt;&lt;strong&gt;基于已有的容量预估，为容易出问题的系统提供一份冗余&lt;/strong&gt;&lt;/strong&gt;。
有些团队平时做基础设施就比较，做 Scale 就是小轻松。
那平时 Scalable 做的不好的朋友，就只能将应用实例多开一些，以避免临时出现的流量波动。&lt;/p&gt;
&lt;p&gt;无状态的服务好搞，有状态的 DB 就很难在短时间内做 Scale。
检查这些服务的容量，如果重点资源临近阈值，比如 DB 的硬盘资源，缓存的内存容量。
核心服务的余量在检查中真的发现问题的话，那也只能短期内做扩容了。&lt;/p&gt;
&lt;p&gt;对于小团队来说，春节长假的特殊性在于响应会变慢甚至是联系不上。
一旦线上有异常，可能找不到合适的人员来进行处理。
所以第二条写救命笔记则更为重要。
「Google SRE」里面有个小段子，一个绝对不能被按的按钮，
这个按钮会清空内存数据，在飞行过程中被宇航员按了。幸亏美女工程师（下图）写了相关的救命手册，
专门写了针对这种情况的操作，救了这些宇航员的命。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201701/sre.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201701/sre.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;图片来自 「Google SRE」&lt;/p&gt;
&lt;p&gt;从这个故事里面可以看到，一个紧急操作手册是多么重要。
&lt;strong&gt;&lt;strong&gt;所以在大扫除期间，我们还要补一补平时的文档，将一些常见问题 / 常规操作记录下来。&lt;/strong&gt;&lt;/strong&gt;
步骤需要细致到能让让每个远程值班的同学做到 step by step 操作。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;啰嗦了这么多，相信大家对大扫除要做些什么已经有所印象了，祝大家过个好年，流量涨涨涨，还能平平安安的。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;[The USE Method] &lt;a href="http://www.brendangregg.com/usemethod.html"&gt;http://www.brendangregg.com/usemethod.html&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;[USE Method: Linux Performance Checklist] &lt;a href="http://www.brendangregg.com/USEmethod/use-linux.html"&gt;http://www.brendangregg.com/USEmethod/use-linux.html&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2017/01/spring-cleaning/"&gt;https://blog.alswl.com/2017/01/spring-cleaning/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Infrastructure"></category><category term="DevOps"></category></entry><entry><title>🔑 也谈 HTTPS - 如何内测</title><link href="https://blog.alswl.com/2016/12/https-2/" rel="alternate"></link><published>2016-12-08T20:16:26+08:00</published><updated>2016-12-08T20:16:26+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-12-08:2016/12/https-2/</id><summary type="html">&lt;p&gt;&lt;img alt="201612/mouse.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201612/mouse.jpeg"/&gt;
(图片来自 &lt;a href="https://www.duitang.com/blog/?id=48013745"&gt;茶杯中的可爱小白鼠 壁纸 - 2560x1920－堆糖，美好生活研究所&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;在上篇文章 &lt;a href="https://blog.alswl.com/2016/11/https-1/"&gt;🔒 也谈 HTTPS - HTTPDNS + HTTPS&lt;/a&gt; 中，
我们谈了如何基于 HTTPDNS 来部署无坚不摧的 HTTPS 通信环境，
这次我们讨论另外一个比较头疼的问题：部署。&lt;/p&gt;

&lt;p&gt;小站点部署 HTTPS 相对成本低，改改前端代码，就可以上线了。
但作为业务有一定复杂度的大网站，就没办法这么暴力上线了。&lt;/p&gt;
&lt;p&gt;前端在基础库中调整 Scheme 之后，仍然可能存在很多边边角角没有覆盖到。
比如 JS 里面写死了 HTTP，那在 HTTPS 下请求 HTTP XHR 的话，
浏览器会将请求拦截掉。
一旦出现这种故障，用户就无法正常使用业务，小白用户往往也不懂得自己将 &lt;code&gt;https://&lt;/code&gt; 换成 &lt;code&gt;http://&lt;/code&gt; 使用。&lt;/p&gt;
&lt;p&gt;解决的思路是足够的内测，找一群人帮我在 HTTPS 环境下使用足够长时间。
让他们当小白鼠，提前发现问题并解决。
于是，我把目光转向了身边的一大大群小白鼠，整个办公室的同事~😄&lt;/p&gt;
&lt;p&gt;没错，&lt;strong&gt;&lt;strong&gt;我要强制所有同事使用 HTTPS 的公司网站&lt;/strong&gt;&lt;/strong&gt;，从而靠他们帮我发现问题。&lt;/p&gt;
&lt;p&gt;靠发邮件、QQ 广播呼吁大家使用 HTTPS 站点的方法，估计是不行的。
没有利益驱动，推动力是不足的，我必须想点强制的手段让他们使用 HTTPS。&lt;/p&gt;
&lt;p&gt;有三种方法来达到这个效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;业务系统内入口判断用户身份，是雇员的话，切换到 HTTPS&lt;/li&gt;
&lt;li&gt;Nginx 入口系统判断 IP 来源，办公室 IP 则切换到 HTTPS&lt;/li&gt;
&lt;li&gt;改造办公室网络，访问站点时候，自动切换到 HTTPS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了避免对线上业务系统、基础设施造成影响，我采用了第三条方案。&lt;/p&gt;
&lt;p&gt;说干就干，直接对公司网络出口设备是 ROS&lt;a href="http://wiki.mikrotik.com/wiki/Main_Page"&gt;via&lt;/a&gt; 动起刀子。&lt;/p&gt;
&lt;p&gt;实现的原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A：办公室网络的 🐁 们请求站点 http://www.duitang.com&lt;/li&gt;
&lt;li&gt;B：操作 RouterOS 的防火墙，将 dst 为 www.duitang.com IP 的 TCP 请求都 dst-nat 到新的一台 Nginx 服务器 proxy.duitang.com&lt;/li&gt;
&lt;li&gt;C：这台 proxy.duitang.com 做过特别定制，将所有针对 *.duitang.com 请做一次 302 请求，将 http://www.duitang.com 请求都转发到 https://www.duitang.com&lt;/li&gt;
&lt;li&gt;D：Client 收到 302 请求，重新请求 https://www.duitang.com&lt;/li&gt;
&lt;li&gt;E：同 B&lt;/li&gt;
&lt;li&gt;F：proxy.duitang.com 将请求转发到真正的 www.duitang.com 服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS：这里要小心的是，需要配置 proxy.duitang.com 的 &lt;code&gt;resolver&lt;/code&gt; 避免 Nginx 内部请求。&lt;/p&gt;
&lt;p&gt;流程图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="201612/https_ros_process.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201612/https_ros_process.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;这样操作之后，在办公室网络下，所有访问公司网站的 HTTP 流量都会跳转到 HTTPS。&lt;/p&gt;
&lt;p&gt;PS：我原始方案想使用 ROS 的 L7 防火墙 直接抓 HTTP 包，match HTTP 头数据，
再修改返回的 TCP 包。
但测试下来发现 ROS L7 Firewall 不支持写 TCP 数据。
所以我最后只能使用中间跳转的方案。&lt;/p&gt;
&lt;p&gt;如果不是使用 ROS 的朋友也不用担心，原理和流程已经讲清楚了，
无非是使用 Cisco / Huawei 网络设备的防火墙命令实现需要的功能。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上篇文章发完之后，好几个朋友问我 IP 证书供应商的事情。我就简单说一下我了解的情况。&lt;/p&gt;
&lt;p&gt;国内 SSL 证书供应商们会给他们兜售的产品起各种各样花里胡哨的名字，
什么超真、超强、超安、超快，国外有些企业也会搞什么 Pro / Super / Premium / Essential，
其实 SSL 证书的区分，笼统来说就三种类型：DV / OV / EV，
Domain Validation / Orgnization Validation / Extented Validation。
他们区别除了字面意思，就是所有权审核流程一个比一个麻烦。&lt;/p&gt;
&lt;p&gt;想基于 IP 直接搞所有权审核，要看对应供应商的证书是否支持。
去年年底我做了一个调查，支持 IP 证书的厂家如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rapid SSL 不支持 ip&lt;/li&gt;
&lt;li&gt;wosign OV 级别支持&lt;ul&gt;
&lt;li&gt;OV 需要验证 需要验证申请单位的营业执照、等其他证明文件&lt;/li&gt;
&lt;li&gt;浏览器支持情况&lt;ul&gt;
&lt;li&gt;Firefox 32 &lt;a href="https://mozillacaprogram.secure.force.com/CA/IncludedCACertificateReport"&gt;https://mozillacaprogram.secure.force.com/CA/IncludedCACertificateReport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;交叉认证了 Startcom 的证书，可以支持老版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GlobalSign OV 支持&lt;ul&gt;
&lt;li&gt;$349 * 6 * 8 = 16752&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.globalsign.com/customer/portal/articles/1216536-securing-a-public-ip-address---ssl-certificates"&gt;https://support.globalsign.com/customer/portal/articles/1216536-securing-a-public-ip-address---ssl-certificates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;需要认证 RIPE ip， &lt;a href="https://apps.db.ripe.net/search/query.html?searchtext=221.228.82.178#resultsAnchor"&gt;https://apps.db.ripe.net/search/query.html?searchtext=221.228.82.178#resultsAnchor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Geotrust 明确表示不支持 https://www.geocerts.com/faq#Q47&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在 Wosign 爆了丑闻，于是支持 IP SSL 又少了一家。
只剩下 GlobalSign 了，但是 GlobalSign OV 又贵审核又麻烦，
不知道看到此文的大神们有没有更好的推荐。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/193775/ssl-certificate-for-a-public-ip-address"&gt;domain name - SSL certificate for a public IP address? - Server Fault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.mikrotik.com/wiki/Manual:IP/Firewall/Filter"&gt;ROS Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.mikrotik.com/wiki/Manual:IP/Firewall/NAT"&gt;ROS NAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.mikrotik.com/wiki/Manual:IP/Firewall/L7"&gt;ROS Firewall L7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.mikrotik.com/viewtopic.php?f=13&amp;amp;t=62152"&gt;How to block and redirect website - MikroTik RouterOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.mikrotik.com/viewtopic.php?t=39837"&gt;Mikrotik IP REDIRECT using firewall - MikroTik RouterOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.mikrotik.com/viewtopic.php?t=88049"&gt;Redirect all traffic from a spesific ip number to a web page - MikroTik RouterOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/12/https-2/"&gt;https://blog.alswl.com/2016/12/https-2/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="HTTPS"></category><category term="HTTPDNS"></category><category term="MikroTik"></category></entry><entry><title>教你在上海挑房子</title><link href="https://blog.alswl.com/2016/12/house/" rel="alternate"></link><published>2016-12-05T21:29:37+08:00</published><updated>2016-12-05T21:29:37+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-12-05:2016/12/house/</id><summary type="html">&lt;p&gt;&lt;img alt="201612/shanghai.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201612/shanghai.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;点开的同学别失望，这并不是教你如何快速致富的 😂 &amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上海政府在 11-28 出了房屋新政 &lt;a href="http://sh.xinhuanet.com/2016-11/28/c_135864791.htm"&gt;via&lt;/a&gt;，对房价进行进一步调控。
其核心思想是「认房又认贷」。3 月份的政策 &lt;a href="http://www.shanghai.gov.cn/nw2/nw2314/nw2319/nw10800/nw11408/nw39426/u26aw46965.html"&gt;via&lt;/a&gt; 是限制购房资格。
这次 11 月份调整则是提高二套房首付比例。
双管齐下，进一步给上海房市进行降温。&lt;/p&gt;
&lt;p&gt;在这种严苛的政策下面，如何挑选一套自己满意，家人住得安心的房子就尤为关键了。
我对房市一直比较关注，也曾有几位朋友咨询我的一些经验。之前我是将 Evernote
笔记链接贴给别人，这次我就详细讲讲，如何在上海挑房子。&lt;/p&gt;
&lt;p&gt;第一步，&lt;strong&gt;&lt;strong&gt;是建立有价值的 Indicator，并对具体房源进行计算&lt;/strong&gt;&lt;/strong&gt;。
Indicator 的含义是建立一系列评价指标，比如价格、户型、位置，
再根据这些 Indicator 给房源进行打分。
如果我是一个购房者，我挺希望我的置业顾问告诉我这套房有哪些优点、缺点，综合评价得几份。
（当然实际情况下这些置业顾问都是吹得天花乱坠，尽睁眼说瞎话。）
看房的过程可能长达数月，而人的记忆会随着时间逐步失真，只对最近看到的事物有深刻印象。
使用客观的数字评价房源，则可以进行精准的评价，避免产生主观臆断。&lt;/p&gt;

&lt;p&gt;我使用的 Indicator 和评价细项罗列如下，供参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;价格&lt;/li&gt;
&lt;li&gt;面积&lt;/li&gt;
&lt;li&gt;地理位置：内环、中环、外环&lt;/li&gt;
&lt;li&gt;交通：离地铁距离，换乘便利性；多地铁线换乘；&lt;/li&gt;
&lt;li&gt;户型：南北通透；客厅朝南；全明；户型方正；无暗室&lt;/li&gt;
&lt;li&gt;装修：毛胚；简装；普通；精装；豪装&lt;/li&gt;
&lt;li&gt;商圈：购物中心；超市；菜场&lt;/li&gt;
&lt;li&gt;学区房&lt;/li&gt;
&lt;li&gt;产权：满五唯一&lt;/li&gt;
&lt;li&gt;楼层&lt;/li&gt;
&lt;li&gt;房龄：5 / 10 / 15 / 20&lt;/li&gt;
&lt;li&gt;政策发展前景&lt;/li&gt;
&lt;li&gt;停车&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二步，&lt;strong&gt;&lt;strong&gt;就是和家人达成一致的期望&lt;/strong&gt;&lt;/strong&gt;，避免潜在的纠纷。
每个人对未来的住房有自己的期望，即便是一家人，
各自看中的点也不会太一样。不管平时家庭决策是什么流程，我都建议坐下来一起讨论讨论。
将 Indicator 依次列出，大家讨论各自心中的优先级。&lt;/p&gt;
&lt;p&gt;除了优先级的讨论，还要考虑一下各自对 Indicator 划分等级的理解。
比如对房型、装修这两项，评价标准就会很模糊，这一切都需要讨论清楚。&lt;/p&gt;
&lt;p&gt;我个人最为看中价格、位置、交通，可以放弃的有学区房、停车、户型。&lt;/p&gt;
&lt;p&gt;第三步，&lt;strong&gt;&lt;strong&gt;划定圈子，判断趋势&lt;/strong&gt;&lt;/strong&gt;。
众多 Indicator 里面，价格是固定的，户型、楼层等是和具体房源相关的，
我们能够撬动的最重要因素，其实就是位置。&lt;/p&gt;
&lt;p&gt;作为上海这个拥有 2500w 人口的超大型城市，是不可能把各个位置的房源都扫一遍的，
所以必须重点规划自己准备实地考察的区域。
那么我们就在上海地图上面划几个圈了，数据可以通过链家、中原地产等多网站收集。
安居客有一个大颗粒度的圈子，展示了社区集中点 &lt;a href="http://shanghai.anjuke.com/"&gt;via&lt;/a&gt;，
下图是我筛选条件之后形成的几个簇：&lt;/p&gt;
&lt;p&gt;&lt;img alt="201612/map_thumb.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201612/map_thumb.png"/&gt;&lt;/p&gt;
&lt;p&gt;（数据爬取分析这一块，我只服一个人，他专门写了一堆爬虫捞数据然后分析，
如果对杭州的房地产投资感兴趣，可以私信我，我可以帮忙问问。）&lt;/p&gt;
&lt;p&gt;从城市级别来看，其实不同区域的变化趋势基本是一致的，但是局部地区可能受外部因素而出现较大波动。
比如上海闸北并入静安，价格就大涨；大宁板块产生一个地王，也会让这片区域价格大幅波动；
甚至新开业一个 Mall，都会让周边价格波动。
这些外部因素，必须提前关注政府市政规划方案、房产网站、公众号、房产微博。
政策相关推荐阅读：「上海市城市总体规划（2015-2040）纲要概要」 
&lt;a href="http://2040.shgtj.net/web/"&gt;via&lt;/a&gt; 规划了整体发展格调。
「上海市商业网点布局规划（2013-2020）」&lt;a href="http://www.scofcom.gov.cn/zxxxgk/235081.htm"&gt;via&lt;/a&gt; 规划了 14 个市级商圈，之前只有 10 个，还有若干区级商圈。 &lt;/p&gt;
&lt;p&gt;第四步，&lt;strong&gt;&lt;strong&gt;快速行动，快速决策&lt;/strong&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;还记得捡西瓜的故事么，小猴子一直想找个大西瓜，但一路看过去最后什么都没捡到。
看房不仅仅是一个体力活，而且非常讲究时效性的，必须能够快速响应，快速决策。
在上海这中刚需强需求旺盛的城市，一套评价都不错的房源，半天内就会被别人拿下。
所以前期观察一段时间之后，必须摸清楚自己的需求和承受能力，遇到合适的房源，
就速战速决。&lt;/p&gt;
&lt;p&gt;速战速决还依赖实地看房源的效率。
从我的经验来看，一天至多可以看 10 套左右的房源。
出发前一天约好中介、房东，列一个清单，时间、地点、联系方式全部罗列下来，第二天依照清单行动。
另外为了提高速度，全程应该打车，对于上海这样的一线城市，出租车费用和房产价格相比，真的是小钱。&lt;/p&gt;
&lt;p&gt;在看中合适的房源之后，有些人可能面对这笔巨额交易摇摆不定，而错失了良机。
收益于 Indicator + 前期数据准备，我们在看房时候应该具有了客观的评价能力。
一旦各方面满意，不要犹豫，快速决策。
但也不要因为几次擦肩而过就冲动决策，要相信客观的 Indicator 数据。&lt;/p&gt;
&lt;p&gt;我推荐上班族看房时间安排是，频繁看房两个月，每周末两天出动。
前期一个月看房，不管看中多中意的，都不做决策，
但要计算出一个自己心理预期。一个月后，看到合适的立刻上手。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;OK 写完了。回顾其实这四个步骤，其实就是选一个开源软件的流程嘛。
设定特性需求 -&amp;gt; 设定期望 -&amp;gt; 调研候选者 -&amp;gt; 快速测试上线。
嚯嚯嚯。&lt;/p&gt;
&lt;p&gt;最后，如果你恰好在看房，希望你看完本文有些收获，收获自己中意的住房。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/12/house/"&gt;https://blog.alswl.com/2016/12/house/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Shanghai"></category></entry><entry><title>🔒 也谈 HTTPS - HTTPDNS + HTTPS</title><link href="https://blog.alswl.com/2016/11/https-1/" rel="alternate"></link><published>2016-11-30T22:02:23+08:00</published><updated>2016-11-30T22:02:23+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-11-30:2016/11/https-1/</id><summary type="html">&lt;p&gt;最近谈论 HTTPS 的文章很多，其原因之一是运营商作恶底线越来越低，动不动就插播广告，
前两天小米还联合几家公司发文 &lt;a href="http://weibo.com/1771925961/Da1aopxLQ?refer_flag=1001030103_&amp;amp;type=comment#_rnd1480392491936"&gt;关于抵制流量劫持等违法行为的联合声明&lt;/a&gt; 痛斥某些运营商。
另一方面也是苹果 &lt;a href="https://techcrunch.com/2016/06/14/apple-will-require-https-connections-for-ios-apps-by-the-end-of-2016/"&gt;ATS&lt;/a&gt; 政策的大力推动，逼迫大家在 APP 中全部使用 HTTPS 通信。
上 HTTPS 的好处很多：保护用户的数据不外泄，避免中间人篡改数据，
对企业信息进行鉴权。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201611/https.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201611/https.png"/&gt;&lt;/p&gt;
&lt;p&gt;关于 HTTPS 如何购买证书，如何部署，网上的教程已经太多了，实践起来没有太大的难处。
我们在部署 HTTPS 的时候，遇到了一些新问题，首当其冲的就是 HTTPS 部分网络不可访问的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管使用了 HTTPS 技术，部分邪恶的运营商，仍然使用 DNS 污染技术，让域名指向的他们自己服务器
  而这些服务器并没有部署 SSL 服务（就算部署了，也会触发 SSL 证书 Common name 不一致报警），
  导致 443 端口直接被拒绝。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个问题不解决，强行上 HTTPS 的话，会导致一部分用户出现无法访问网站
一旦用户不爽了，轻则对产品不信任，重则直接导致用户流失。&lt;/p&gt;
&lt;p&gt;运营商为了赚广告钱、省网间结算是不择手段的。
他们普遍使用的劫持手段是通过 ISP提供的 DNS 伪造域名。
那有没有什么方法可以解决 DNS 劫持呢？
业界有一套解决这类场景的方案，即 HTTPDNS。&lt;/p&gt;
&lt;p&gt;HTTPDNS 的原理很简单，将 DNS 这种容易被劫持的协议，转为使用 HTTP 协议请求 Domain &amp;lt;-&amp;gt; IP 映射。
获得正确 IP 之后，Client 自己组装 HTTP 协议，从而避免 ISP 篡改数据。&lt;/p&gt;
&lt;p&gt;有两篇文章很清晰的讲解了 HTTPDNS 的细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA3ODgyNzcwMw==&amp;amp;mid=201837080&amp;amp;idx=1&amp;amp;sn=b2a152b84df1c7dbd294ea66037cf262&amp;amp;scene=2&amp;amp;from=timeline&amp;amp;isappinstalled=0#rd"&gt;【鹅厂网事】全局精确流量调度新思路-HttpDNS服务详解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;腾讯这篇文章时间点是 2014 年，说明这个方案上线更早，也较为成熟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/speed/public-dns/docs/dns-over-https"&gt;DNS-over-HTTPS &amp;nbsp;|&amp;nbsp; Public DNS &amp;nbsp;|&amp;nbsp; Google Developers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;该方案更为先进，使用 HTTP 替换为 HTTPS，减少一个隐患点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="201611/httpdnsjbyl.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201611/httpdnsjbyl.png"/&gt;&lt;/p&gt;
&lt;p&gt;点击 &lt;a href="https://dns.google.com/resolve?name=www.duitang.com"&gt;https://dns.google.com/resolve?name=www.duitang.com&lt;/a&gt; /
&lt;a href="http://119.29.29.29/d?dn=www.duitang.com"&gt;http://119.29.29.29/d?dn=www.duitang.com&lt;/a&gt; 感受一下 DNS-over-HTTPS / HTTPDNS。&lt;/p&gt;
&lt;h2 id="dan-ip-duo-yu-ming-zhi-chi"&gt;单 IP 多域名支持&lt;/h2&gt;
&lt;p&gt;这个方案看似完美，但是在实际生产中，会遇到一个问题。&lt;/p&gt;
&lt;p&gt;Android / iOS 在操作系统级别对 HTTPS 通信是提供了封装。
APP 无法在发起连接时候，也没有权限直接操作 socket。
所以尽管 APP 拿到了域名对应的 IP，却没有办法让这个 IP 在 HTTPS 里生效。&lt;/p&gt;
&lt;p&gt;解决的思路很暴力：&lt;strong&gt;彻底放弃域名系统，完全使用基于 IP 系统的通讯。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原本请求 &lt;code&gt;https://www.duitang.com&lt;/code&gt; 的 request，
调整为请求 &lt;code&gt;https://221.228.82.181&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;OK，做到这一步，我们就可以跟运营商劫持说拜拜了。&lt;/p&gt;
&lt;p&gt;不，还没结束。&lt;/p&gt;
&lt;p&gt;完全搞定运营商之后，这 IP 方案给我们自己带来一个困扰：
&lt;strong&gt;Nginx 服务器无法通过 Host 来识别不同域名下面的请求了！！！&lt;/strong&gt;
在由于使用一个独立 IP，会导致所有域名请求混在一起，无法分别。
大公司可以 dedicated IP，小公司就玩不起了。&lt;/p&gt;
&lt;p&gt;为了解决同一个 IP 下面多个域名的问题，我们引入了一个URL参数： &lt;code&gt;__domain&lt;/code&gt;。
当请求 IP 域名时候，必须带着这个参数，服务器会将请求域名解析出来，再分发到对应的域名。&lt;/p&gt;
&lt;p&gt;实现这个逻辑的 Nginx 核心代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;query_domain&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;arg___domain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;query_domain&lt;/span&gt; &lt;span class="o"&gt;!~&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.example.com/404/ redirect;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;my_host&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;query_domain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;Host&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;my_host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;REAL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后一个注意事项是，记得调整 Nginx 配置的 remote_addr，否则都变成了 127.0.0.1，
也许会导致其他一些策略失效。&lt;/p&gt;
&lt;p&gt;完美收工，效果如下：&lt;a href="https://221.228.82.181/?__domain=www.duitang.com"&gt;https://221.228.82.181/?__domain=www.duitang.com&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;恭喜你，已经掌握核心科技了，再也不怕运营商瞎折腾了，从此走上了业务蓬勃发展的金光大道&amp;hellip;&amp;hellip;☀️&lt;/p&gt;
&lt;p&gt;下一篇文章，我会再谈谈如何做 HTTPS 的「内测」，避免将线上业务一次性切到 HTTPS 导致不少边边角角业务无法正常使用。&lt;/p&gt;
&lt;hr/&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/11/https-1/"&gt;https://blog.alswl.com/2016/11/https-1/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="HTTPS"></category><category term="HTTPDNS"></category></entry><entry><title>API 集成测试实践</title><link href="https://blog.alswl.com/2016/08/api-integration-test/" rel="alternate"></link><published>2016-08-14T19:08:20+08:00</published><updated>2016-08-14T19:08:20+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-08-14:2016/08/api-integration-test/</id><summary type="html">&lt;p&gt;&lt;img alt="abao.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201608/abao_thumbnail.png"/&gt;&lt;/p&gt;
&lt;p&gt;为了提高测试，工程师需要对自己提交的产物进行测试，一般是单元测试、集成测试。
之后提交物流转到 QA 团队，QA 团队根据需求描述对提交物进行测试，
这个测试过程非常耗费人力。
尤其是当开发交付的质量不高时候，很可能自身没有经过测试，会遇到主干流程都无法进行的状况。&lt;/p&gt;
&lt;p&gt;如果在 QA 人工介入测试之前，就进行一轮黑盒自动化集成测试，可以大大地提高 QA 团队的工作效率。
基于这样的判断，我们团队花了一些时间，将基于 API 的自动化测试系统搭建起来。
现在将这个系统的选型和运行状况拎出来，和大家分享。&lt;/p&gt;
&lt;h2 id="que-ren-ce-shi-fan-wei-mu-biao-he-yi-yi"&gt;确认测试范围、目标和意义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;范围&lt;ul&gt;
&lt;li&gt;后台输出的 API 级别 URL&lt;/li&gt;
&lt;li&gt;使用场景&lt;ul&gt;
&lt;li&gt;打包时候的冒烟&lt;/li&gt;
&lt;li&gt;Dev / QA 手工添加添加新特性用例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目标&lt;ul&gt;
&lt;li&gt;覆盖大部分的 URL，当期设计为 top 10 URL，仅包含 GET 接口&lt;/li&gt;
&lt;li&gt;选型时，需要考虑非幂等（POST / DELETE / PUT）等接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;意义&lt;ul&gt;
&lt;li&gt;提高开发效率，一种自动化的 IT 测试方案&lt;/li&gt;
&lt;li&gt;提高测试效率，减少人工集成测试成本&lt;/li&gt;
&lt;li&gt;提高工程质量，通过覆盖率提升，保证工程质量逐步提升，放心开发新功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="te-xing-xu-qiu"&gt;特性需求&lt;/h2&gt;
&lt;p&gt;选型一个系统，不是看市面上有哪些可以供选择，而是看我需要什么样特性的一款产品。
如果自己的需求和市面上的现成产品差异过大，也可以考虑自己定制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Required&lt;ul&gt;
&lt;li&gt;开源&lt;/li&gt;
&lt;li&gt;免费&lt;/li&gt;
&lt;li&gt;使用 DSL 或者简单代码描述测试用例&lt;/li&gt;
&lt;li&gt;支持细粒度的单 API 测试和构建带过程的测试用例&lt;/li&gt;
&lt;li&gt;HTTP API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optional&lt;ul&gt;
&lt;li&gt;CI 集成&lt;/li&gt;
&lt;li&gt;UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tiao-xuan-chu-lai-de-xuan-xing-he-ping-jie"&gt;挑选出来的选型和评价&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.runscope.com/"&gt;API Monitoring and Testing &amp;middot; Runscope&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;收费&lt;/li&gt;
&lt;li&gt;非开源&lt;/li&gt;
&lt;li&gt;有监控特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/software/bamboo"&gt;Bamboo - Continuous integration, deployment &amp;amp; release management | Atlassian&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;收费&lt;/li&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://circleci.com/features/"&gt;Continuous Integration Product and Features - CircleCI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;li&gt;收费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sauce Labs&lt;ul&gt;
&lt;li&gt;客户端测试，收费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apiary&lt;ul&gt;
&lt;li&gt;API 设计工具 + API Test&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://frisbyjs.com/"&gt;http://frisbyjs.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;code&lt;/li&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;open source&lt;/li&gt;
&lt;li&gt;NO UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vowsjs/api-easy"&gt;https://github.com/vowsjs/api-easy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;同上&lt;/li&gt;
&lt;li&gt;真是热爱造轮子的 JS 生态圈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/visionmedia/supertest"&gt;https://github.com/visionmedia/supertest&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;同上&lt;/li&gt;
&lt;li&gt;从 Star 看，这个质量最高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dareid.github.io/chakram/"&gt;http://dareid.github.io/chakram/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;code&lt;/li&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;open source&lt;/li&gt;
&lt;li&gt;NO UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vrest.io/"&gt;https://vrest.io/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;收费&lt;/li&gt;
&lt;li&gt;不开源&lt;/li&gt;
&lt;li&gt;无插件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://swagger.io/open-source-integrations/"&gt;http://swagger.io/open-source-integrations/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;for API&lt;/li&gt;
&lt;li&gt;生态环境强大&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cachecontrol/hippie-swagger"&gt;https://github.com/cachecontrol/hippie-swagger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用户端似乎在尝试用 swagger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://robotframework.org/"&gt;http://robotframework.org/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;一个通用自动化测试工具&lt;/li&gt;
&lt;li&gt;DSL&lt;/li&gt;
&lt;li&gt;扩展性较强&lt;/li&gt;
&lt;li&gt;活跃度在降低&amp;nbsp;&lt;a href="https://github.com/robotframework/robotframework/graphs/contributors"&gt;https://github.com/robotframework/robotframework/graphs/contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cucumber.io/"&gt;https://cucumber.io/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cucumber.io/docs/reference"&gt;https://cucumber.io/docs/reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;和 Robotframework 相似，通用自动化测试工具&lt;/li&gt;
&lt;li&gt;DSL&lt;/li&gt;
&lt;li&gt;活跃度降低&amp;nbsp;&lt;a href="https://github.com/cucumber/cucumber-jvm/graphs/contributors"&gt;https://github.com/cucumber/cucumber-jvm/graphs/contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.solanolabs.com/"&gt;https://www.solanolabs.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Airbnb 在用&lt;/li&gt;
&lt;li&gt;收费&lt;/li&gt;
&lt;li&gt;云端的通用测试环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/christophd/citrus"&gt;https://github.com/christophd/citrus&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.citrusframework.org/"&gt;http://www.citrusframework.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;依赖 mvn / ant，离代码太近&lt;/li&gt;
&lt;li&gt;项目不够活跃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码内测试&lt;ul&gt;
&lt;li&gt;src/it/com/duitang/xxx&lt;/li&gt;
&lt;li&gt;eg. tritornis&lt;/li&gt;
&lt;li&gt;Spring&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html"&gt;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.spring.io/autorepo/docs/spring-framework/3.2.x/spring-framework-reference/html/testing.html"&gt;http://docs.spring.io/autorepo/docs/spring-framework/3.2.x/spring-framework-reference/html/testing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这部分工作，是和团队的其他成员一起去看的，大家各自分头寻找一些产品，然后进行评测，给出结论。&lt;/p&gt;
&lt;p&gt;经过讨论，我们将重点关注放在这么几款下面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;supertest&lt;/li&gt;
&lt;li&gt;robotframework&lt;/li&gt;
&lt;li&gt;swagger&lt;/li&gt;
&lt;li&gt;讨论时候的新发现&amp;nbsp;&lt;a href="https://github.com/svanoort/pyresttest"&gt;https://github.com/svanoort/pyresttest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="da-jian-demojin-xing-shi-yong"&gt;搭建 demo，进行试用&lt;/h2&gt;
&lt;p&gt;在确定选用那几款产品之后，就可以集中精力在几款候选者里面。搭建相应的环境，对他们进行实际测试。&lt;/p&gt;
&lt;p&gt;supertest：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能太简单了，简单到几乎可以自己写掉，不算一个 test framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pyresettest：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈哈哈，YAML based，dreamed feature&lt;/li&gt;
&lt;li&gt;支持 YAML / extractor / validator&lt;/li&gt;
&lt;li&gt;天生支持 host 为参数&lt;/li&gt;
&lt;li&gt;create for me!!!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hippie-swagger：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在使用上，和 supertest 差异不大&lt;/li&gt;
&lt;li&gt;仍然需要自己定义，在 swagger 描述文件不存在时候会抛错，描述文件不符合时会抛错&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;robotframework：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;较为复杂&lt;/li&gt;
&lt;li&gt;有 YAML 了，不用试了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="shi-yong-gan-jue"&gt;使用感觉&lt;/h2&gt;
&lt;p&gt;经过一个季度的试用，我们基于 pyresttest 的项目 abao 运行较稳定。
尽量在工程师提交代码之后，运行一次，从而可以在早期发现问题。&lt;/p&gt;
&lt;p&gt;由于是基于 Python 的源代码，我们还给 pyresttest 开发了几款插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie_extractor：用来解析特定的 cookie&lt;/li&gt;
&lt;li&gt;file_choice_generator：从文件随机选择预设数据&lt;/li&gt;
&lt;li&gt;file_seq_generator：从文件顺序选择预设数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在和 CI 的配合方面，我们在 Jinkins 搭建了 abao / abao-master 项目，
前者响应每次 Push 请求，都会自动构建一遍，后者每天凌晨会将 master 运行一遍。&lt;/p&gt;
&lt;p&gt;感谢项目贡献者：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abao&lt;/span&gt;
 &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;months&lt;/span&gt;
 &lt;span class="n"&gt;active&lt;/span&gt;   &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt;
 &lt;span class="n"&gt;commits&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;109&lt;/span&gt;
 &lt;span class="n"&gt;authors&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="mi"&gt;39&lt;/span&gt;  &lt;span class="n"&gt;Chery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Peng&lt;/span&gt;  &lt;span class="mf"&gt;35.8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
    &lt;span class="mi"&gt;33&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;          &lt;span class="mf"&gt;30.3&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
    &lt;span class="mi"&gt;17&lt;/span&gt;  &lt;span class="n"&gt;yanqi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;chen&lt;/span&gt;  &lt;span class="mf"&gt;15.6&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
    &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="err"&gt;橙子&lt;/span&gt;        &lt;span class="mf"&gt;10.1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
     &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="n"&gt;fiona66&lt;/span&gt;     &lt;span class="mf"&gt;6.4&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
     &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="err"&gt;雪糕&lt;/span&gt;        &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;参考文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/integrations"&gt;Integrations Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/search.action?queryString=%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95&amp;amp;page=1&amp;amp;searchOrder=&amp;amp;sst=guKeEhPzzhUs7xpS"&gt;http://www.infoq.com/cn/search.action?queryString=%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95&amp;amp;page=1&amp;amp;searchOrder=&amp;amp;sst=guKeEhPzzhUs7xpS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/news/2014/02/autotest-2013"&gt;http://www.infoq.com/cn/news/2014/02/autotest-2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/articles/cucumber-robotframework-comparison"&gt;http://www.infoq.com/cn/articles/cucumber-robotframework-comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform"&gt;http://www.infoq.com/cn/articles/http-api-automated-test-from-manual-to-platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nerds.airbnb.com/testing-at-airbnb/"&gt;http://nerds.airbnb.com/testing-at-airbnb/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google keywords&lt;ul&gt;
&lt;li&gt;integration api test framework&lt;/li&gt;
&lt;li&gt;github intergration test&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/08/api-integration-test/"&gt;https://blog.alswl.com/2016/08/api-integration-test/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Test"></category><category term="API"></category></entry><entry><title>搞定暴涨的流量</title><link href="https://blog.alswl.com/2016/06/capacity-planning/" rel="alternate"></link><published>2016-06-19T23:57:39+08:00</published><updated>2016-06-19T23:57:39+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-06-19:2016/06/capacity-planning/</id><summary type="html">&lt;p&gt;2013 年左右，我司业务发展迅速，每天晚上都会面临服务器濒临崩溃情况。
我相信每个高速发展的互联网企业在某个阶段都会面临这样的情形，比如去年爆红的「足迹」。
过程往往是：线上出现故障，手机会收到报警，然后登录到服务器上去解决问题。
处理这种问题工种现在有一个时髦的名称，叫做「SRE（Site Reliability Engineer）」系统可用性工程师。&lt;/p&gt;
&lt;p&gt;虽然我常常救火，但是我还是想尽可能避免线上发生故障。「最好的消息，就是没有消息。」
减少故障出现概率，增强系统可用性，降低故障处理时间是 SRE 的最大课题。
在这里有最常用的两个手段，一个是优化性能，一个是做好容量规划和扩展。
这里我着重讨论后者「容量规划」。&lt;/p&gt;
&lt;p&gt;&lt;img alt="看我的一堆报警消息" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201606/message.png"/&gt;&lt;/p&gt;
&lt;p&gt;^ 看我的一堆报警消息&lt;/p&gt;

&lt;h2 id="mian-lin-de-wen-ti"&gt;面临的问题&lt;/h2&gt;
&lt;p&gt;面对暴涨流量，一边是业务方的满心欢喜，一边就是工程师的烦恼和压力了。
也许是一个受欢迎的功能上线了，或者是某个社会活动导致流量爆发，系统开始出现高延迟，磁盘 IO 不够用了。
也许是 DB 第一个倒下，也许是 RPC 系统第一个倒下&amp;hellip;&amp;hellip;
呃，大神可能会说，我艹，RPC 系统第一个倒下还搞个屁啊，赶紧倒闭算了。&lt;/p&gt;
&lt;p&gt;核心的问题就是，在现有性能下面，在面临可能的大流量冲击时候，如何做到不慌不忙，能够 handle 住突如其来的流量？&lt;/p&gt;
&lt;h2 id="she-ding-rong-liang-mu-biao"&gt;设定容量目标&lt;/h2&gt;
&lt;p&gt;在解决这个问题之前，我们得先考虑清楚，我们到底要多强的流量处理能力。
如果今天我们只是一个两三台服务器的小团队，却企图设计一个能够抗住 1 亿 pv 访问的系统，
显然是不现实的，至少是不经济的。&lt;/p&gt;
&lt;p&gt;衡量系统容量的指标可以简化为在什么流量下面，提供什么样的可用性保证。
一个实际的样例是，在 1 亿 pv 下面，提供 99.99% 的可用性，
其可用性的评判标准是「服务器在 200ms 内返回正确的数据」。&lt;/p&gt;
&lt;p&gt;这里有一个重要的概念，可用性保证，术语是服务等级协议（SLA）。
这个指标可以从大部分标准云供应商的标准条款里看到，比如我司机房供应商提供的可用性保证是 99.9%。
阿里云 ECS 的 SLA 是「99.95%」，统计周期是 1 个月
（如果故障时间低于 5 min，不计入故障时间，云供应商都这样，特别霸权）。&lt;/p&gt;
&lt;p&gt;一个对 SLA 的直观认识是（具体数据来自 &lt;a href="https://en.wikipedia.org/wiki/High_availability#Percentage_calculation"&gt;High availability - Wikipedia, the free encyclopedia&lt;/a&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;99.0% 意味着一年有 87 天不可用&lt;/li&gt;
&lt;li&gt;99.5% 意味着一年 1.83 天不可用&lt;/li&gt;
&lt;li&gt;99.9% 意味着一年 8.76 小时不可用&lt;/li&gt;
&lt;li&gt;99.99% 意味着一年 52.56 分钟不可用&lt;/li&gt;
&lt;li&gt;99.999% 意味着一年 5 分 15 秒不可用，这是高可用的一般标准&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设定越高的 SLA 的成本越高，具体 SLA 的设定是成本、收益、期望的平衡。
不同的业务需要的 SLA 也不一样，一般认为 99.9% 基本可用，99.99% 可用性较高，
99.999% 为高可用。&lt;/p&gt;
&lt;p&gt;有些云供应商号称 8 个 9，9 个 9，那往往都是对于存储服务里面的数据不丢失这个指标。
除了忽悠忽悠人，这个 SLA 没什么用的。&lt;/p&gt;
&lt;h2 id="ce-liang"&gt;测量&lt;/h2&gt;
&lt;p&gt;做一件伟大事情时候，先有目标，下一步如果是迈出脚步出去闯荡，那么往往换来的是一个身心疲惫的自己。
更稳当的做法是，先摸摸清楚，自己有几把刷子，是不是还要再练练，有没有资格上战场。
没有 Profiling，就是瞎子，根本不用谈优化和容量规划。&lt;/p&gt;
&lt;p&gt;对于一般的业务场景而言，常见的测量指标分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器的硬件指标（CPU、内存、硬盘 IO、硬盘容量、网络）&lt;/li&gt;
&lt;li&gt;服务的软件指标（QPS / latency / pool）&lt;/li&gt;
&lt;li&gt;业务的数据指标（核心业务指标，比如注册数，核心动作次数）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我司的实践情况是这样的，我们使用 Zabbix 测量服务器，用自己设计的系统收集服务数据，使用 Grafana 呈现。
后者被设计到 RPC 系统内部，数据是全量收集。
我司在业务层面的数据监控做的还不足，这种不足不仅仅体现在数据的全面性上面，还体现在相关成员（比如产品汪）对数据的利用率上面。&lt;/p&gt;
&lt;p&gt;除了测量线上的实施数据，了解某个设施的性能极限也是很重要，目前常见的测量方式是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模拟流量进行测试&lt;/li&gt;
&lt;li&gt;在线上进行测试，并实时跟踪进展情况，出现异常时候，停止流量切入&lt;/li&gt;
&lt;li&gt;从线上引入流量到测试环境进行测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我发现，第一种方法往往不准，第三种方法对于小团队来说，成本太高。第二种方法是最粗暴和有效的。&lt;/p&gt;
&lt;h2 id="yu-jing-he-ti-xing"&gt;预警和提醒&lt;/h2&gt;
&lt;p&gt;仅仅知道当前系统的性能表现是不足的，重要的如何将这些数据利用起来，对未来系统增长进行预估。
流量增长 vs 资源消耗，这个曲线大部分情况是线性的，有些情况确实指数增长的。&lt;/p&gt;
&lt;p&gt;常见的做法是，给核心指标设置一个阈值（比如 80% 磁盘使用率，40% 磁盘 IO 利用率），当监控的数据到达这个阈值时候。
就必须进行容量扩充，进行负载均衡。&lt;/p&gt;
&lt;p&gt;一个从运维同学身上学到的是，提前采购一些设备放到机房里面，比如硬盘、内存，别到时候供应商来不及供货。
必要库存可以降低 MTBF。&lt;/p&gt;
&lt;p&gt;除了设定阈值报警，应当定期跑一些脚本获得数据。定期检查报警系统，避免报警系统失效。&lt;/p&gt;
&lt;h2 id="bi-xuan-xiang-scalable"&gt;必选项 - Scalable&lt;/h2&gt;
&lt;p&gt;上文写到，「必要时候进行容量扩充，进行负载均衡」。
这点的提出，意味这需要&lt;strong&gt;保证基础设施是可扩展的，支持负载均衡，支持硬件扩容&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Web 系统比较容易做到横向扩容，使用 Nginx / LVS 等负载均衡即可。
中间件服务一般也是在设计时候就考虑了扩展。（什么？你们家 RPC 系统设计调用不支持扩展？什么脑残设计？！）&lt;/p&gt;
&lt;p&gt;DB 级别的服务，往往就要花一些心思了，一些技术（比如 MySQL）想要做到横向扩展，
需要进行提前设计。而一些设施虽然容易进行扩展，比如 ES / Kafka 等现代化设施，
但在部署的时候仍然要进行一些提前准备。&lt;/p&gt;
&lt;p&gt;除了提前做好 Scalable，还有几个和部署相关的 tips 可以供参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用工具：自动化部署，现在有太多工具可以供选择，比如 ansible 就是一个很好的工具&lt;/li&gt;
&lt;li&gt;automatic everything：避免登录服务器操作才能保证未来自动化&lt;/li&gt;
&lt;li&gt;工程化：用最佳实践去维护部署系统，用工程化的态度去写部署代码&lt;/li&gt;
&lt;li&gt;保持同质，避免花样：避免使用 shell 级别的操作原语操作部署系统，使用预设的 module 去操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="end"&gt;End&lt;/h2&gt;
&lt;p&gt;好了，现在去预测一下当大流量来临之际，你的服务会在哪些环节失败。
想不出来的话，就一点点去测量各个环节性能，然后做一把容量规划吧。&lt;/p&gt;
&lt;p&gt;调优和增加容量，这是两个手段，这两个手段互相作用，互相影响。使用时候需要根据成本和收益进行选择。&lt;/p&gt;
&lt;p&gt;关于容量规划的更多细节，可以看看 &lt;a href="https://book.douban.com/subject/4200645/"&gt;Web容量规划的艺术 (豆瓣)&lt;/a&gt;
这里看看。只是这本书写在 2010 年，并且作者介绍的过于传统运维视角一些。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/06/capacity-planning/"&gt;https://blog.alswl.com/2016/06/capacity-planning/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term=""></category></entry><entry><title>一次「分答」记录</title><link href="https://blog.alswl.com/2016/06/q-and-a/" rel="alternate"></link><published>2016-06-15T09:59:16+08:00</published><updated>2016-06-15T09:59:16+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-06-15:2016/06/q-and-a/</id><summary type="html">&lt;p&gt;尝试在团队内部发起一次类似「分答」的沟通方式，一对一面聊。
回答其他工程师的问题，这种沟通的方式暨在提供一个特定的场合，帮助加强双方了解，
解决团队中其他工程师的一些实际的问题。&lt;/p&gt;
&lt;p&gt;在征得对方同意之后，我将他的问题和我的回答 PO 出来。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201606/questions-and-answers.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201606/questions-and-answers.jpg"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;喜欢什么游戏，玩游戏的问题&lt;ul&gt;
&lt;li&gt;喜欢和人玩游戏，不喜欢和不认识网友玩游戏&lt;/li&gt;
&lt;li&gt;小学从红月开始玩，传奇、CS、魔兽、真三、DOTA，大学时候和舍友玩游戏，毕业后不玩&lt;/li&gt;
&lt;li&gt;minecraft 尝试着玩过，没有玩下去，找不到人&lt;/li&gt;
&lt;li&gt;日活的桌面游戏，三国杀等蛮喜欢&lt;/li&gt;
&lt;li&gt;不喜欢浪费时间，怕没控制&lt;/li&gt;
&lt;li&gt;从玩游戏里面学习什么么？不，就是纯粹享受游戏，不会想这么多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;喜欢什么语言&lt;ul&gt;
&lt;li&gt;看场合，小东西，小场景用 Python，生产环境用 Java，生产环境又有时间，考虑 Scala&lt;/li&gt;
&lt;li&gt;只允许选一门语言，就用 Python&lt;/li&gt;
&lt;li&gt;最吸引的特点，熟悉程度高，生产效率高，第三方库丰富，粘合性强&lt;/li&gt;
&lt;li&gt;为 Python 做一些功能扩展？不同时期答案会不一样，目前来说，希望有一个开发效率更高的 framework；有时间的话，会考虑如何绕过底层 GIL 问题 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有什么事情投入精力，铩羽而归&lt;ul&gt;
&lt;li&gt;工具向重的人，推广 git 花了两年，推广 Restful 不利&lt;/li&gt;
&lt;li&gt;做业务开发 leader，和 tsu、小管一起做，项目管理、团队管理没做好，没做好，有挫败感。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;职业迷茫期&lt;ul&gt;
&lt;li&gt;我作为一个学渣，并且长期以来没有人给予职业生涯规划，一直对自己未来发展有困惑&lt;/li&gt;
&lt;li&gt;如何在无领导的情况之下，探索未来道路，规划自己工作内容？跟优秀的人聊，跟外部的人聊，看博客，看书&lt;/li&gt;
&lt;li&gt;迷茫是客观存在的，并且可能持续存在很久，正视它&lt;/li&gt;
&lt;li&gt;现实中一定会遇到各种挑战和困难的，用挑战和困难填充自己，丰富自己的生活&lt;/li&gt;
&lt;li&gt;迷茫是未知，有恐惧，有兴奋。对当前的我来说，恐惧可能更多，但是要面对&lt;/li&gt;
&lt;li&gt;职业生涯里面，前期的同质度更高，资深工程师可以会给初级工程师规划清晰一些，但是越往后期，越难规划，需要自己探索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推荐书&lt;ul&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/people/alswl/collect?sort=rating&amp;amp;start=0&amp;amp;filter=all&amp;amp;mode=list&amp;amp;tags_sort=count"&gt;https://book.douban.com/people/alswl/collect?sort=rating&amp;amp;start=0&amp;amp;filter=all&amp;amp;mode=list&amp;amp;tags_sort=count&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学习来源&lt;ul&gt;
&lt;li&gt;博客，infoq 等专业信息来源&lt;/li&gt;
&lt;li&gt;书籍&lt;/li&gt;
&lt;li&gt;周围的人&lt;/li&gt;
&lt;li&gt;尽可能从每天时间挤出时间阅读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生活和工作平衡点&lt;ul&gt;
&lt;li&gt;不同的人，同一个人的不同时期所需要的平衡不一样&lt;/li&gt;
&lt;li&gt;对自己人生期望不一样的人，平衡点不一样&lt;/li&gt;
&lt;li&gt;对我来说，目前阶段不存在明显边界，尽可能投入工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何保持激情&lt;ul&gt;
&lt;li&gt;人总是有低谷期的，不可能一直保持亢奋，除非是甲亢&lt;/li&gt;
&lt;li&gt;短期情绪会有起伏，长期来看，保持梦想和对自己高要求，可以帮助保持激情&lt;/li&gt;
&lt;li&gt;我有低谷期，低谷期适合反思&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何擦屁股&lt;ul&gt;
&lt;li&gt;现实是残酷的，总有屁股要擦，自己也有脏屁股，今天要给昨天的自己擦屁股&lt;/li&gt;
&lt;li&gt;现实中存在脏屁股，尽可能了解它，看代码、文档，设计方案，了解的人，让自己变舒服&lt;/li&gt;
&lt;li&gt;责任心的体现，做好当下的事情；解决这样的问题，解决当前的问题；避免留下脏屁股，设计好，规划好&lt;/li&gt;
&lt;li&gt;责任心的话很虚。一个人做擦屁股、低产值的事情，从长远来看，是错的；短期需要撑下来；并且帮助团队避免这样的事情发生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最有成就感的事情&lt;ul&gt;
&lt;li&gt;顶着家庭压力，到上海来&lt;/li&gt;
&lt;li&gt;在堆糖改造环境，提升自己心智水平，不害怕问题，自信，自省&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/06/q-and-a/"&gt;https://blog.alswl.com/2016/06/q-and-a/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term=""></category></entry><entry><title>海贼王和创业团队</title><link href="https://blog.alswl.com/2016/04/onepiece-startup/" rel="alternate"></link><published>2016-04-27T00:36:10+08:00</published><updated>2016-04-27T00:36:10+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-04-27:2016/04/onepiece-startup/</id><summary type="html">&lt;p&gt;一个同事在知乎提了一个问题 &lt;a href="https://www.zhihu.com/question/35037806"&gt;如果把草帽海贼团比作一个创业团队,这个Team的组织架构是怎样的?有哪些优势,又有哪些不足?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="201604/onepiece.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201604/onepiece.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;这个话题很有趣，作为追了多年的 fans ，又是身处互联网创业团队的我要来强答一记。&lt;/p&gt;
&lt;p&gt;海贼王的世界很大，富有个性的角色和团队也很多，恰好可以和显示世界中的互联网创业团队进行对比。
柳传志讲的好，做大事，要「建班子，定战略，带队伍」，我们就着金句来看看草帽这个团队怎么样。&lt;/p&gt;

&lt;h2 id="chan-pin-he-zhan-lue"&gt;产品和战略&lt;/h2&gt;
&lt;p&gt;我先讲产品和战略。&lt;/p&gt;
&lt;p&gt;由于海贼王世界的设定，以及作为一个全年段漫画动画的原因。
海贼王世界的整体战略是较为简单，海贼团的目标都较为单一，即「找到 哥尔 D 罗杰 留下的宝藏」。
海贼团们实现目标的路径也较为单一，打斗增强战斗力，不断寻找线索，去伟大航道寻找宝藏。&lt;/p&gt;
&lt;p&gt;所以故事的开展反而是围绕另外一条隐秘的线索「历史的真相」，尾田大神埋坑很深。
「历史的真相」并不是作为大部分人努力和前进的目标，所以「海贼王」世界的故事虽然曲折跌宕，
但是产品模型极为单一，不具备太多可以讨论的点。&lt;/p&gt;
&lt;h2 id="tuan-dui"&gt;团队&lt;/h2&gt;
&lt;p&gt;接着讲团队，一个团队第一重要的是创始人，这必须要是一位领袖人物。&lt;/p&gt;
&lt;p&gt;评价领袖优秀程度，从这么几个角度评价：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意志力：打不死的小强，不达目标誓不罢休&lt;/li&gt;
&lt;li&gt;专业技能：能打、脑子灵光、心灵手巧、一技之长&lt;/li&gt;
&lt;li&gt;规划能力：除了体力值和专业智慧，也要讲讲战略和谋略&lt;/li&gt;
&lt;li&gt;管理能力：沟通协调、团队管理促进能力，能够带领团队实现目标，促进他人成长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以这个标准来看几个具有领袖气质的角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路飞&lt;ul&gt;
&lt;li&gt;意志力：5&lt;/li&gt;
&lt;li&gt;专业技能：5&lt;/li&gt;
&lt;li&gt;规划能力：1（率性而为的大爷）&lt;/li&gt;
&lt;li&gt;管理能力：1（团队自由生长）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;白胡子&lt;ul&gt;
&lt;li&gt;意志力：5&lt;/li&gt;
&lt;li&gt;专业技能：5&lt;/li&gt;
&lt;li&gt;规划能力：4（顶上之战的过程证明）&lt;/li&gt;
&lt;li&gt;管理能力：5（队长们的成长和忠诚度证明）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多弗朗明哥&lt;ul&gt;
&lt;li&gt;意志力：5&lt;/li&gt;
&lt;li&gt;专业技能：5&lt;/li&gt;
&lt;li&gt;规划能力：5&lt;/li&gt;
&lt;li&gt;管理能力：5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;艾斯&lt;ul&gt;
&lt;li&gt;意志力：5&lt;/li&gt;
&lt;li&gt;专业技能：4（以牺牲的时间点战斗力打分）&lt;/li&gt;
&lt;li&gt;规划能力：2（追踪黑胡子，一个人冒进，被黑胡子摆了一道）&lt;/li&gt;
&lt;li&gt;管理能力：2（也就混到一个队长，能够鼓励其他人，但是没发现黑胡子成长的问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;唐僧（乱入一个对比）&lt;ul&gt;
&lt;li&gt;意志力：5+&lt;/li&gt;
&lt;li&gt;专业技能：4（熟读经书算不算专业能力？）&lt;/li&gt;
&lt;li&gt;规划能力：0&lt;/li&gt;
&lt;li&gt;管理能力：0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上面的判断可以看出，对于一个领袖而言，路飞仅仅是不错，但是谈不上多么优秀，
倒是白胡子，典范啊典范。&lt;/p&gt;
&lt;p&gt;根据上面提到的能力模型，草帽海贼团的其他角色大家也可以心里评估出来了：
大部分人都是意志力、专业技能强悍（即便是乌索普，射击能力也是可以评上 3），但是同时也在规划能力和管理能力上面较弱。&lt;/p&gt;
&lt;p&gt;唉，这么弱，很难继续支撑草帽海贼团继续走下去啊，怎么办呢？&lt;/p&gt;
&lt;h2 id="dai-dui-wu"&gt;带队伍&lt;/h2&gt;
&lt;p&gt;草帽海贼团，一个极为漂亮的「自组织团队」。&lt;/p&gt;
&lt;p&gt;什么是「自组织团队」？来自 InfoQ 的一篇文章 &lt;a href="http://www.infoq.com/cn/articles/what-are-self-organising-teams"&gt;什么是自组织团队？&lt;/a&gt; 里面讲到团队的特性：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;分散式的控制，也就是说与集中式的控制截然相反，&lt;/li&gt;
&lt;li&gt;不断适应改变的环境，&lt;/li&gt;
&lt;li&gt;在局部相互作用下自然浮现出来的结构,&lt;/li&gt;
&lt;li&gt;反馈，包括肯定的和否定的&lt;/li&gt;
&lt;li&gt;弹性，归结于系统修复和调整的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;用简单的关键词概括，其实是这么几个关键词：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自行决策&lt;/li&gt;
&lt;li&gt;自己成长&lt;/li&gt;
&lt;li&gt;适应环境变化&lt;/li&gt;
&lt;li&gt;团队内部信任并且沟通顺畅&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从这几个关键词来看，草帽海贼团和这种自组织模式极为匹配。路飞从来不会发号施令，统一调度，顶多喊几句口号振奋一下大家。
路飞自身的规划能力和帮助他人成长的能力也远不及格。团队里面其他的成员，索隆、香吉士等的成长，完全是靠自己，
甚至在「两年」跨度这么长的时间，尾田也是借外部力量帮助团队这些成员成长，而不是依靠领袖来培养成员。&lt;/p&gt;
&lt;p&gt;路飞选择这种自组织模式，不仅仅是一种巧合，更多的是一种逼不得已。尾田大神写的就是青春热血漫画，要是换成一个有勇有谋，
那就成主旋律电视剧了，大家可能也是因为路飞这种优点和缺点喜欢他。&lt;/p&gt;
&lt;h3 id="anti-zi-zu-zhi-mo-shi"&gt;Anti-自组织模式&lt;/h3&gt;
&lt;p&gt;和「自组织模式」相反的情况，可以参照一下多弗朗明哥的团队。我们可以看到，在多弗朗明哥团里里面，有严密的等级关系（四大干部，家族干部，普通小兵），
有帮助人才成长的流程（培训罗的一系列流程）。
这种设定也是多弗朗明哥的战略能力和管理能力的体现。&lt;/p&gt;
&lt;p&gt;还有一种更极致的组织模式「集权模式」，由核心层发号施令，协同作战。
海贼王的世界里，较少发现这样的模式，反派角色海军有一点点像。
倒是另外一部作品「星球大战」，其中的帝国、第一秩序，都是典型的 Manager 发号施令，底层士兵只要好好作战即可。
统一培养成行的克隆人，就可以支撑这样的团队发挥十足战力。&lt;/p&gt;
&lt;p&gt;这种集权模式，缺少向上反馈能力，缺少自发的创新能力。在业务发展顺利规模扩张阶段，也许可以发展不错，但是长久以往，
核心层必然会发觉创新力和驱动力不足，花费大量的精力在管理、制度建设、奖惩机制上面。&lt;/p&gt;
&lt;p&gt;路飞的缺点和优点一样鲜明，他很幸运的（可能也完全不知道）使用了「自组织团队」这种模式，完成了创业的起步阶段。
但是这种模式有也有自带的缺陷，需要目标一致性很高，团队成员自身有极高成长度。一旦遇到业务爆炸（顶上之战这种规模的战役），
这团队就完蛋了。期望路飞在未来的航道上，注意培养一下自己不善于的能力。好消息是，从最近的「庞克哈撒德篇」和「德雷斯罗撒篇」战况来看，
路飞已经开始学会制定「寻找友军结盟」、「树立竞争对手标杆」这样的初级战略方案了。&lt;/p&gt;
&lt;h2 id="mo_1"&gt;末&lt;/h2&gt;
&lt;p&gt;海贼王的世界，真的就是现实中「海盗」的正式写照吧。完成不可能的目标，成就团队，成就自己。&lt;/p&gt;
&lt;p&gt;「世代传承的意志，时代的变迁，人们的梦，只要人们继续追求自由的答案，这一切的一切都将永不停止.这世界&amp;hellip;&amp;hellip;没错！一个追求自由任凭选择的世界，就在我们的眼前无限地延伸，如果我们的梦想可以引导你的方向的话，就去追寻吧！在名为信念的旗帜下」&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/04/onepiece-startup/"&gt;https://blog.alswl.com/2016/04/onepiece-startup/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term=""></category></entry><entry><title>Windows management for hacker</title><link href="https://blog.alswl.com/2016/04/windows-management-for-hacker/" rel="alternate"></link><published>2016-04-24T16:36:16+08:00</published><updated>2016-04-24T16:36:16+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-04-24:2016/04/windows-management-for-hacker/</id><summary type="html">&lt;p&gt;团队里的同学有时看见我键指如飞，可以用快捷键将 Mac 的窗口玩转于手心。他们表示酷炫非常，
心生羡慕的同时，希望掌握这门技艺，我就把使用的 Phoenix 介绍给大家。结果过了一段时间，
发现普及率并不高，本着好为人师的精神，今天我就来八一八这款优秀的桌面管理工具。&lt;/p&gt;
&lt;p&gt;在介绍我使用的工具之前，我要先介绍一下我选择的原因和历史。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201604/ergodox_infinity.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201604/ergodox_infinity.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;ps：配图是我长草多年的 Ergodox Infinity。（@夫人，看到这里的时候，请留步思考 5s）。&lt;/p&gt;
&lt;h2 id="alttab-ku-nan-de-li-shi"&gt;Alt+Tab = 苦难的历史&lt;/h2&gt;
&lt;p&gt;当我还年轻的时候，曾经对 Alt+Tab 这个快捷键愤慨无比，觉得这种设计虽然简单但是很蠢。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;命中率低&lt;/strong&gt;。要在茫茫图标中查找自己需要的窗口，如果开了 20 个应用，切换到一个非常用窗口至多可能需要 20-1 次按键。
    不要跟我说有 Alt+Shift+Tab 的反向循环操作，估计大部分用户都不知道。而且 正向/反向 切换伤脑子。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交互方式耗时&lt;/strong&gt;。由于 Alt+Tab 的操作需要用户进行反馈才能进行，是 &lt;code&gt;眼-手-眼-手&lt;/code&gt; 的操作反馈方式，
    这种交互模式费时费脑子。跟这种需要实时反馈对立的交互模式应当是类似「一键呼出」的操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在大显示器、多显示器的环境下面，Alt-Tab 模式没有做任何优化&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;频繁切出窗口进行切换，容易让人分神，比如切换时候看到某个播放器的标题，在放一首喜欢的歌，很可能吸引过去。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有人会问，难道不优化都是缺陷么？
    我的答案是肯定的。Alt+Tab 是几乎除鼠标之外的唯一一种窗口操作方式。如果它不能跟上时代的步伐，
    对大显示器、多显示器做优化，那就是不作为，不努力，不上进。跟不上变化是要被淘汰的！&lt;/p&gt;
&lt;p&gt;&lt;img alt="201604/alt_tab_windows.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201604/alt_tab_windows.jpeg"/&gt;&lt;/p&gt;
&lt;h2 id="ping-pu-shi-chuang-kou-guan-li-qi"&gt;平铺式窗口管理器&lt;/h2&gt;
&lt;p&gt;在被 Windows Alt-Tab 虐了多年之后，我长大了，开始接触 Linux，但是这种痛苦仍然时刻包围着我。
当我分期购买一个外置显示器之后，这种痛苦到达到了顶端。
恰好彼时我是 &lt;a href="https://www.archlinux.org/"&gt;ArchLinux&lt;/a&gt; 的信徒，很快就发现了一片桃源：
自己安装 &lt;a href="https://wiki.archlinux.org/index.php/window_manager"&gt;Window manager&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我重新认识了桌面系统世界，除了介绍常规的 Gnome / KDE / xfce 之外，还有一类窗口管理系统，他们叫做「平铺式窗口管理器」。
（严格来说，Gnome / KDE / xfce 属于 Desktop environment，层级比「窗口管理系统」要高，我这里不做严格区分）。&lt;/p&gt;
&lt;p&gt;什么是平铺式窗口管理器？来一个直观的认识：&lt;/p&gt;
&lt;p&gt;&lt;img alt="201604/awesome_1.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201604/awesome_1.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="201604/awesome_2.jpeg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201604/awesome_2.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;官方的解释是&amp;hellip;&amp;hellip;呵呵，自己点进去看解释吧。平铺式桌面管理器（包括同时支持平铺式和堆叠式的混合式桌面管理器）给我带来了新的认知，
原来桌面系统是可以进行接口编程的，我不那么 care 到底是哪种风格，我 care 的是，
能否通过编程定制来解决我的 Alt-Tab 问题。&lt;/p&gt;
&lt;h2 id="wo-qi-wang-de-chuang-kou-guan-li-mo-shi"&gt;我期望的窗口管理模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;快速启动最常用的应用，同时也能将其快速呼出&lt;/li&gt;
&lt;li&gt;对大屏幕友好，现在显示器普遍是大屏幕，可以自由控制窗体的移动，方便多个窗口同时进行操作&lt;/li&gt;
&lt;li&gt;对多屏幕友好，多屏幕间的切换，要友好。可以快速屏幕间切换&lt;/li&gt;
&lt;li&gt;对键盘友好，对鼠标友好，全键盘操作模式，但同时要对鼠标友好，比如鼠标跟随焦点功能，毕竟一些操作还是鼠标方便&lt;/li&gt;
&lt;li&gt;帮助集中注意力，将操作界面隔离成多个目的区分的空间，比如写作时候，期望只有一个 Evernote + Chrome 在眼前&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wo-zai-mac-xia-mian-de-fang-an"&gt;我在 Mac 下面的方案&lt;/h2&gt;
&lt;p&gt;呜呼，感谢伟大的 &lt;a href="https://github.com/jasonm23/"&gt;Jason Milkins&lt;/a&gt; 做了一堆尝试，
创造了一堆乱七八糟的桌面管理器。然后感谢 &lt;a href="https://github.com/kasper"&gt;Kasper Hirvikoski&lt;/a&gt;
在 Jason 拍拍屁股走人之后，接过了 Jason 的棒子，将 Phoenix 这个项目快速推进，解决了一堆导致不可用的 bug，
并新增了很多特性。&lt;/p&gt;
&lt;p&gt;回到要介绍的主角身上，&lt;a href="https://github.com/kasper/phoenix"&gt;Phoenix&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A lightweight OS X window and app manager scriptable with JavaScript&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本特性是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Javascript 作为配置文件，定制性超级强&lt;/li&gt;
&lt;li&gt;支持 App / Window / Space / Screen 等对象的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 Phoenix，我达成了我的窗口管理模式的目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速启动&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Option&lt;/code&gt; + ` / 1 / 2 / 3 / 4 / 8 / 9 / e / a / s / z /, / . / / 启动&lt;/li&gt;
&lt;li&gt;iTerm / Chrome / Safari / QQ / Bearychat / Wechat / Neteasy Music / MacVim / IntelliJ IDEA / Macdown / Mail / Evernote / Finder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;窗口操作&lt;ul&gt;
&lt;li&gt;Option + - / =&lt;ul&gt;
&lt;li&gt;大小控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option + m&lt;ul&gt;
&lt;li&gt;窗口移动到屏幕中央&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option + Space&lt;ul&gt;
&lt;li&gt;鼠标找回到窗口中央&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;屏幕内操作&lt;ul&gt;
&lt;li&gt;Option + J / K&lt;ul&gt;
&lt;li&gt;焦点在同屏幕窗口切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ctrl + Option + J / K / H / L&lt;ul&gt;
&lt;li&gt;窗口移动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;屏幕间操作&lt;ul&gt;
&lt;li&gt;Option + H / L&lt;ul&gt;
&lt;li&gt;焦点左右屏幕切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Space 操作&lt;ul&gt;
&lt;li&gt;Option + I / O&lt;ul&gt;
&lt;li&gt;Space 左右切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option + Ctrl + I / O&lt;ul&gt;
&lt;li&gt;将当前窗口移动到相邻 Space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option + Enter&lt;ul&gt;
&lt;li&gt;将当前窗口移动到 Work Space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option + Delete&lt;ul&gt;
&lt;li&gt;将当前窗口移动到 Park Space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Work / Park Space 就是用来帮助我集中精力的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的配置文件在 &lt;a href="https://github.com/alswl/.oOo./blob/master/.phoenix.js"&gt;https://github.com/alswl/.oOo./blob/master/.phoenix.js&lt;/a&gt;
我的配置文件可以开箱即用，但这是我自己的工作模式，想要获得自己最舒适的效果，需要自己进行一些研究和定制。&lt;/p&gt;
&lt;h2 id="qi-ta-yi-xie-ti-dai-fang-an"&gt;其他一些替代方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mac&lt;ul&gt;
&lt;li&gt;SizeUp  # 简单的桌面平铺工具，不支持一键切换&lt;/li&gt;
&lt;li&gt;Spectacle  # 类 SizeUp&lt;/li&gt;
&lt;li&gt;Divvy  # 类 SizeUp，收费&lt;/li&gt;
&lt;li&gt;Slate  # 支持配置，支持一键切换（推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;Awesome&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hahack.com/tools/awesome/"&gt;平铺式窗口管理器-Awesome | HaHack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alswl/awesome"&gt;我的 Awesome 配置文件（停止位置）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xmonad&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fuhsjr00/bug.n"&gt;fuhsjr00/bug.n: Tiling Window Manager for Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;我曾经写过一篇 &lt;a href="http://blog.alswl.com/2013/12/mac/"&gt;Linux 程序员的 Mac 安装记录&lt;/a&gt;，
告诉大家我在 Mac 上面常用的工具、包管理器。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/04/windows-management-for-hacker/"&gt;https://blog.alswl.com/2016/04/windows-management-for-hacker/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Mac"></category></entry><entry><title>技术之外</title><link href="https://blog.alswl.com/2016/02/team-geek/" rel="alternate"></link><published>2016-02-28T18:16:01+08:00</published><updated>2016-02-28T18:16:01+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-02-28:2016/02/team-geek/</id><summary type="html">&lt;p&gt;这是一天一本书的第二次执行，这次选了一本比较薄的书，上周的书看了一天，脑仁疼。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;在我组织团队新兵训练营（入职之后一段时间内容集中的培训）时候，
经常和新同事聊到一个词：软实力。
我将其描述为专业技能之外的能力。每个人都这种能力的解读可能会不一样，
我将其拆解为：「对工作的热情；观察力和反思能力；做计划和决策是否周全」。&lt;/p&gt;
&lt;p&gt;这种拆解是不全面的，「多年」以后，我意识到，硬实力考衡的是专业的能力，
而软实力则是考衡人的因素。这种晚来的意识让我在一段时间里面，
将自己的工作陷入困境，并且得不到解药。&lt;/p&gt;
&lt;p&gt;Google 的两位工程师 Brian W. Fitzpatrick 和 Ben Collins-Sussman
写了一本书&lt;a href="http://book.douban.com/subject/21372237/"&gt;极客与团队&lt;/a&gt;，通过他们的视角，
告诉大家想要在团队中获得成功的另一面。不要被书名误解，我觉得「开发者和团队」是更好的名字，
虽然没那么酷。&lt;/p&gt;
&lt;p&gt;&lt;img alt="s26354473.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201602/s26354473.jpg"/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;要在团队中获得成功，你必须以&lt;strong&gt;谦虚&lt;/strong&gt;、&lt;strong&gt;尊重&lt;/strong&gt;和&lt;strong&gt;信任&lt;/strong&gt;为核心原则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要做的第一件事情，应该就是沟通了。让自己成为一个玻璃玲珑人，
其他人可以看到你的方向、目标和里程碑，同时可以看到你的进展和问题点。
这样不但可以获得工作中的肯定，当个人的目标设定和团队出现偏差，
又或是开发过程中在一个点停顿了太久，可以有其他人参与进来或直接伸出援手。&lt;/p&gt;
&lt;p&gt;这种透明度对上对下都应该如此。团队的领导，
应当在开发周期内的早期就明确告知团队愿景、目标和设定的里程碑。
产生共鸣的愿景可以让人对目标有渴望，对自己工作有认同。
各位还记得中国中小学开学第一周里，大多都有一个开学典礼讲话。讲的好的领导，
会阐述自己的教学理念，去年取得的成绩，今年的教学着重点。
讲的差的领导就是泛泛而谈，每年都是一套话术，完全看不到长进。&lt;/p&gt;
&lt;p&gt;缺失沟通，还会将个人陷于单打独斗的境地，一个篮球队需要 5 个人大，
一个人牛逼没屁用。&lt;/p&gt;
&lt;p&gt;提高工程质量的一个有效手段就是 CI（持续集成），将开发过程中一点点的小进展都以一种机械的方式呈现出来，
并进行测试。另一个有效手段是 Code Review，不但推荐要 CR，更是要尽早、快速的 CR。
避免屎积压多了拉，太臭。&lt;/p&gt;
&lt;p&gt;我突然想到一条实践：即便是做一个人的项目，在精简程度上也保持最小的一个阈值，
想象明天就要长假，工作要交给别人维护，如何在交付物里面有足够的信息让其他人知晓细节。
而不是丢给后继维护者一句冰冷的话：「看代码」。&lt;/p&gt;
&lt;p&gt;沟通必须是有效的，我想任何人都不想听一个嘴碎的人在那边逼逼一下午。
有很多结构化、一部的沟通可以显著提高沟通效率：
项目看板、设计文档、Code Review、代码注释、数据字典等。&lt;/p&gt;
&lt;p&gt;第二个重要的观点是，接受失败，承认自己不是无能的。你可能很聪明，但所做的事情不一定完全都是正确的，
连上帝都会犯错，何况是普通人。犯错不可怕，但是犯错还认识不到可怕。犯错并且认识到了，
但是拒绝承认错误的人，不是可怕，而是应该要被淘汰，这类人会极其难以合作。
如何你周围都是这样的人，或者你上司是这样的人，也许你可以考虑换一个地方，在拉钩搜索「堆糖」试试吧。&lt;/p&gt;
&lt;p&gt;关于接受失败的另外一个隐含后续发展就是「成长」。意识到这个世界是动态发展的，
「要以发展的眼光看待事物」是一个非常非常有用的认知。
能自己意识到失败，并且会主动复盘，重新认知自己的人，往往会成长的极为迅速。
关于成长的话题可以讨论很深，以后可以单独拎出来讨论。&lt;/p&gt;
&lt;p&gt;书中提到一个失败后回顾的清单：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;简要&lt;/li&gt;
&lt;li&gt;时间的时间线，从发现到调查，再到最终见过&lt;/li&gt;
&lt;li&gt;事件发生的主因&lt;/li&gt;
&lt;li&gt;影响和损失评估&lt;/li&gt;
&lt;li&gt;立即修正问题的步骤&lt;/li&gt;
&lt;li&gt;防止事件再次发生的步骤&lt;/li&gt;
&lt;li&gt;得到的教训&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;我就哈哈哈了，这不就是我大堆糖的故障报告模板么？&lt;/p&gt;
&lt;p&gt;第三点，如何成长？简单来说，去冒险，去承担自己能力之外的任务，
去挑战没有经历过的任务。有一条&lt;a href="https://zh.wikipedia.org/wiki/%E5%BD%BC%E5%BE%97%E5%8E%9F%E7%90%86"&gt;彼得定律&lt;/a&gt;：「在组织或企业的等级制度中，
人会因其某种特质或特殊技能，令他在被擢升到不能胜任的职位，相反变成组织的障碍物（冗员）及负资产。」。
前半段含义是，大部分情况下面，并不是具有了相应能力才去承担，而是试着去承担任务。
无论成功与否，对当前去挑战的人来说，都能够得到历练，从而能力得到提升。&lt;/p&gt;
&lt;p&gt;第四点是：成为 Leader，而不是 Manager。
一个团队是一艘危机四伏的海面上一只船，如果没有一个船长，那么就前途叵测。
在职业生涯的某些阶段，你可能自然成为船长，也许是一个项目的船长，也许是一个小 Team 的船长。
那么切记，船长是 Leader，而不是 Manager，是能力综合，可守可攻，顺风时候会把舵，
缺人时候可以顶任何岗位的船长。而不是手持大鞭的 Manager。
我觉得新闻联播里面描述的人民公仆，就是一个很好的 Leader。&lt;/p&gt;
&lt;p&gt;一年多前之前和铁柱聊过，一个 Leader 是否需要要以能力服众。
我仍然保持当初的观点：「是的」。在目标管理、方向把握上面，
强大的技术背景可以有魄力的开展工作，挖掘新技术，推动变化。
在遇到困难时候，可以决策、解决问题。
这是由这个行业特质决定的，互联网是依赖创造力的脑力劳动，而不是根据人数线性增加产出的体力劳动。&lt;/p&gt;
&lt;p&gt;但毕竟不是每个人都一定拥有 Leader 特质，难道就要一辈子做技术得不到上升？
Google 的一种做法，可以很好解决这个问题。分离 TL（techlead）和 TLM（techleadmanager），
前者更着重技术，后者不但关心技术，还关心手下工程师的成长。
用国内互联网的职责分工描述，大概就是有技术专家和团队负责人的区别。&lt;/p&gt;
&lt;p&gt;关于这条，书中的几点最佳实践非常棒：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;放下自负&lt;/li&gt;
&lt;li&gt;做一个禅师（保持冷静和理性）&lt;/li&gt;
&lt;li&gt;成为催化剂&lt;/li&gt;
&lt;li&gt;当一个导师&lt;/li&gt;
&lt;li&gt;设置明确的目标&lt;/li&gt;
&lt;li&gt;坦诚（三明治赞美法）&lt;/li&gt;
&lt;li&gt;记录快乐程度&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后聊一下对书本身的评价。黄易山在 Quora 写过一段非常有名的
&lt;a href="https://www.quora.com/What-makes-engineering-management-hard"&gt;为什么工程师管理这么难？&lt;/a&gt;。
这本书讨论的内容要比黄易山那篇回答范围更大，讲述的也更详细（废话，这是书）。
作者是典型的工程师，书目结构易读，第五章从反模式来思考问题非常赞。&lt;/p&gt;
&lt;p&gt;我读过几本技术管理相关的书籍，印象深刻的有两本，一本是温伯格的&lt;a href="http://book.douban.com/subject/1132623/"&gt;成为技术领导者&lt;/a&gt;，另外一本是此书。温伯格的行文比较跳跃、比较抽象，不容易读。
而这本书不但通俗异动，也添加了非常具有可操作性的最佳实践。
从创造力驱动的角度出发，技术开发者都是管理者。因为他们需要设计方案，创造价值，而不是重复劳动，
所以我推荐每个开发者阅读。&lt;/p&gt;
&lt;p&gt;好了，学习够了充分的理论，下面就是做起来了，「知行合一」。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;开给自己的处方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上面提到的最佳实践&lt;/li&gt;
&lt;li&gt;谦逊：谦逊一些，低调一些，向他人学习&lt;/li&gt;
&lt;li&gt;坚毅：认准目标，稳步前行，不放弃&lt;/li&gt;
&lt;li&gt;信心：信念也许可以重建，但是对自己始终保有信心，也许会错，但是要相信自己的判断&lt;/li&gt;
&lt;li&gt;开会技巧：超过 5 人的会用单向宣讲更有效&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/02/team-geek/"&gt;https://blog.alswl.com/2016/02/team-geek/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="读书笔记"></category></entry><entry><title>一例 Timeout 故障</title><link href="https://blog.alswl.com/2016/02/a-timeout-fault/" rel="alternate"></link><published>2016-02-02T23:34:44+08:00</published><updated>2016-02-02T23:34:44+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-02-02:2016/02/a-timeout-fault/</id><summary type="html">&lt;p&gt;&lt;img alt="i_love_timeouts_digital_design_mugs.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201602/i_love_timeouts_digital_design_mugs.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;早晨刚到公司， HAProxy 报警，Trtornis（第三方云存储网关，用来统一管理阿里云和七牛云的对象存储） 全飘红。&lt;/p&gt;

&lt;p&gt;检查日志，并没有 ERROR 信息，但是大量 WARN 报错。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;WARN&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;730&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dw&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;STARTED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;rejected&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractConne&lt;/span&gt;
&lt;span class="n"&gt;ction&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="n"&gt;c021c6&lt;/span&gt;
&lt;span class="n"&gt;WARN&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;731&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Could&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SocketChannel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;connected&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="mf"&gt;10.&lt;/span&gt;
&lt;span class="mf"&gt;1.1.78&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8350&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="mf"&gt;10.1.1.74&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;63290&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RejectedExecutionException&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="n"&gt;c021c6&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;362&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;FillingState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onEnter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;379&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;273&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ReadCallback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;succeeded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractConnection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;563&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FillInterest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FillInterest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectChannelEndPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onSelected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SelectChannelEndPoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;109&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ManagedSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;636&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ManagedSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;607&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ManagedSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SelectorManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;545&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NonBlockingThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NonBlockingThread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runJob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;635&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jetty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueuedThreadPool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;555&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tritonis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;shaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.0.1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SNAPSHOT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;745&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;na&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1.8.0&lt;/span&gt;&lt;span class="n"&gt;_51&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是七牛 API 调用出现问题，通过应用 Metrics API 检查 Threads：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http http://A-DOMAIN:8351/threads | sort | uniq -c | sort -gr G qiniu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;正常的实例：&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2015-12-9_1.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201602/image2015-12-9_1.png"/&gt;&lt;/p&gt;
&lt;p&gt;异常的实例：&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2015-12-9_2.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201602/image2015-12-9_2.png"/&gt;&lt;/p&gt;
&lt;p&gt;确认是七牛服务慢导致现成爆掉，但是 46 这个值来自于哪里？&lt;/p&gt;
&lt;p&gt;检查了 App 的配置文件，的确配置了 &lt;code&gt;maxThreads&lt;/code&gt; 为 50:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;gzip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;requestLog&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;appenders&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;maxThreads&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
  &lt;span class="n"&gt;applicationConnectors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
      &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8350&lt;/span&gt;
      &lt;span class="n"&gt;acceptorThreads&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="n"&gt;selectorThreads&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;adminConnectors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
      &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8351&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般对应服务不稳定，有个简单策略，超时，那么七牛服务超时是多少？找了一下相关代码，下巴都没合上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# com.qiniu.http.Client&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setConnectTimeout&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CONNECT_TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECONDS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setReadTimeout&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RESPONSE_TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECONDS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;# com.qiniu.common.Config&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;CONNECT_TIMEOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;RESPONSE_TIMEOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;超时时间 8h，吓得我赶紧关掉了显示器。
赶紧将这个 Connection 改成了 2 分钟，Connect 改成了 5s。 &lt;/p&gt;
&lt;p&gt;咨询了七牛的工程师故障当天的状况：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sorry 忘了回复，问题已经定位，早上因为有个别用户list请求数量过大，导致了整个list接口出现大量满请求，影响返回是list接口的调用 和 portal上内容管理界面列取文件key的速度，目前已经恢复&lt;/p&gt;
&lt;p&gt;大量慢请求，这个已经内部有告警和恢复机制，11点25恢复的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;国内一线的云服务供应商也会出这样不可用故障，即便是有服务放在云上，还是要自己留一个心眼，多关注可用性啊。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/02/a-timeout-fault/"&gt;https://blog.alswl.com/2016/02/a-timeout-fault/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Qiniu"></category><category term="TCP"></category></entry><entry><title>一次艰难的 Wiki 升级</title><link href="https://blog.alswl.com/2016/01/confluence-upgrade/" rel="alternate"></link><published>2016-01-12T22:53:55+08:00</published><updated>2016-01-12T22:53:55+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2016-01-12:2016/01/confluence-upgrade/</id><summary type="html">&lt;p&gt;公司使用 &lt;a href="https://www.atlassian.com/software/confluence"&gt;Confluence&lt;/a&gt;
管理自己的知识库，
现在使用的版本还是 3.0.1，而最新的 Confluence 版本已经是 5.4+。
新版本加入的一些现代化 Web 系统的新特性很吸引人（拖拽上传，可见即所得编辑），
在群众的强烈呼声下，我着手开始升级。&lt;/p&gt;
&lt;p&gt;&lt;img alt="201601/confluence_river.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201601/confluence_river.jpg"/&gt;&lt;/p&gt;

&lt;p&gt;官方的升级路线很扯，3.0.1 的升级路线是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.0.1 -&amp;gt; 3.5.17&lt;/li&gt;
&lt;li&gt;5.0.3 -&amp;gt; 5.4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中间两次大版本升级，第一次原因不明，第二次是更新了 markup 渲染引擎，
改为 HTML 格式类型的渲染模式。&lt;/p&gt;
&lt;p&gt;由于一些原因，我们系统还跑在 embedded 模式下（其实就是 HyperSQL），这种大版本升级，
需要先从内置库升级到外部数据库，比如 MySQL。&lt;/p&gt;
&lt;p&gt;苦逼旅程就开始了。&lt;/p&gt;
&lt;h2 id="from-embedded-to-mysql"&gt;From embedded to MySQL&lt;/h2&gt;
&lt;p&gt;更新内置库到外部库的操作流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导出当前的数据备份，包括附件，我导出后 1G+&lt;/li&gt;
&lt;li&gt;使用当前同版本（3.0.1）安装一个全新的 wiki，注意下载 JDBC-connector&lt;/li&gt;
&lt;li&gt;安装之后，配置好 MySQL，开始导入之前准备好的备份&lt;/li&gt;
&lt;li&gt;悲剧上演&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遇到了错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Import failed. Hibernate operation: could not insert: [com.atlassian.confluence.core.BodyContent#12028015]; SQL []; Duplicate entry '12028015' for key 'PRIMARY'; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '12028015' for key 'PRIMARY'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方文档 &lt;a href="https://confluence.atlassian.com/doc/troubleshooting-xml-backups-that-fail-on-restore-199034.html"&gt;https://confluence.atlassian.com/doc/troubleshooting-xml-backups-that-fail-on-restore-199034.html&lt;/a&gt;
让修改重复键数据，好吧，我改，搜索一把重复主键，将备份里面的 &lt;code&gt;entities.xml&lt;/code&gt; 弄出来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;格式化&lt;/span&gt;
&lt;span class="nx"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{s=s $0}END{gsub(/&amp;gt;&amp;lt;/,"&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;",s);s=gensub(/&amp;gt;([^ &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;]*)&amp;lt;/,"&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n\\&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;","g",s);print s}'&lt;/span&gt; &lt;span class="nx"&gt;entities.xml&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;entities.xml.format&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;找重复主键&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="nx"&gt;entities.xml.format&lt;/span&gt; &lt;span class="nx"&gt;G&lt;/span&gt; &lt;span class="s1"&gt;'content" class="Page'&lt;/span&gt; &lt;span class="na"&gt;-A&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;G&lt;/span&gt; &lt;span class="na"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'[0-9]+'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;uniq&lt;/span&gt; &lt;span class="na"&gt;-c&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="na"&gt;-gr&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="nx"&gt;entities.xml.format&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'name="id"'&lt;/span&gt; &lt;span class="na"&gt;-A&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="na"&gt;-B&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;grep&lt;/span&gt; &lt;span class="na"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'[0-9]+'&lt;/span&gt; &lt;span class="na"&gt;-B&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;操作过程中，发现有数据就一条数据（grep entities.xml），还是插入重复（13238835）。
官方文档解释是，内置数据库的锁有时候会不灵，插入重复键。
于是决定再试试去掉主键约束方案，大不了那个数据我就不要了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ALTER&lt;/span&gt; &lt;span class="n"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;BODYCONTENT&lt;/span&gt; &lt;span class="n"&gt;DROP&lt;/span&gt; &lt;span class="n"&gt;PRIMARY&lt;/span&gt; &lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果还有其他 PK 约束，我于是一条一条解开，然后&amp;hellip;&amp;hellip;还是不行，真是作了一手的好死。&lt;/p&gt;
&lt;p&gt;结论是，这数据错误了太多，已经无法手工修复。&lt;/p&gt;
&lt;h2 id="heng-cha-yi-dao-de-emoji"&gt;横插一刀的 Emoji 😊😢💗&lt;/h2&gt;
&lt;p&gt;导入时候报了这么一个错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caused by: java.sql.SQLException: Incorrect string value: '\xF0\x9F\x8C\x8D\xE5\x9B...' for column 'BODY' at row 1 org.xml.sax.SAXException: Error while parsing 2015-10-19 23:14:13,108 ERROR [Importing data task] [confluence.importexport.impl.ReverseDatabinder] fromXML Error processing backup: -- referer: http://10.1.2.155:8087/setup/setup-restore-start.action | url: /setup/setup-restore-local.action | userName: anonymous | action: setup-restore-local org.xml.sax.SAXException: Error while parsing net.sf.hibernate.exception.GenericJDBCException: could not insert: [com.atlassian.confluence.core.BodyContent#12028161]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是 Emoji 编码的问题，理论上 MySQL 换到 5.6+，更新 encoding 就可以了。&lt;/p&gt;
&lt;p&gt;但是&amp;hellip;&amp;hellip;Confluence 的建表 SQL 爆出了 255 varchar 超过 1000 限制的错误
，我尝试使用&amp;nbsp;&lt;a href="https://github.com/rails/rails/issues/9855"&gt;innodb_large_prefix&lt;/a&gt;
似乎可以解决（因为重复键的问题，导致导入已经行不通）。&lt;/p&gt;
&lt;p&gt;另外&amp;nbsp;innodb_large_prefix&amp;nbsp;是 5.6.3 才有的，只能升级 MySQL，
并且需要创建表时候使用&amp;nbsp;DYNAMIC&amp;nbsp;参数。&lt;/p&gt;
&lt;p&gt;弄个 Emoji 这么绕，这导致我直接弃用了 MySQL。&lt;/p&gt;
&lt;p&gt;如果是正常迁移，不遇到重复键，Emoji 的问题，可以参考官方的文档，完成平滑迁移：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://confluence.atlassian.com/doc/migrating-to-another-database-148867.html&lt;/li&gt;
&lt;li&gt;https://confluence.atlassian.com/doc/database-setup-for-mysql-128747.html&lt;/li&gt;
&lt;li&gt;https://confluence.atlassian.com/doc/upgrading-confluence-4578.html&lt;/li&gt;
&lt;li&gt;https://confluence.atlassian.com/doc/upgrading-confluence-manually-255363437.html&lt;/li&gt;
&lt;li&gt;https://confluence.atlassian.com/conf56/confluence-user-s-guide/creating-content/using-the-editor/using-symbols-emoticons-and-special-characters&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ma-dan-zi-ji-gan"&gt;妈蛋，自己干&lt;/h2&gt;
&lt;p&gt;上面这么点东西，陆陆续续花了我两周的时间（晚上）。已经确认走不通平滑迁移，那就别怪我手段糙了。&lt;/p&gt;
&lt;p&gt;使用 API 导出后直接导入，这种做法最大问题是不平滑，会丢掉 Wiki 修改的历史记录，
在和各个业务方沟通之后，最后达成了一致：可以暴力升级。&lt;/p&gt;
&lt;p&gt;升级流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备最新 Confluence 新站点&lt;/li&gt;
&lt;li&gt;关停站点&lt;/li&gt;
&lt;li&gt;导出数据，包括 Page、评论、附件&lt;/li&gt;
&lt;li&gt;导入 Page，评论，附件&lt;/li&gt;
&lt;li&gt;启动旧站点，开启只读模式&lt;/li&gt;
&lt;li&gt;启用新站点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方有一个 &lt;a href="https://migrations.atlassian.net/wiki"&gt;Universal Wiki Converter&lt;/a&gt;，
我在 Bitbucket 上面找到了源码，但是已经不可工作了。
虽然宣称「The UWC will however save you 1-2+ weeks of scripting development time, compared with starting from scratch, for many of the most common conversion cases.」
但并没有卵用。&lt;/p&gt;
&lt;p&gt;不行就自己随便搞搞好了，看了一下开发需要的 &lt;a href="https://confluence.atlassian.com/display/CONF30/Remote+API+Specification+2.4#RemoteAPISpecification2.4-Page"&gt;Conflunce API&lt;/a&gt;，
和尤其贴心的新版本 &lt;a href="https://developer.atlassian.com/confdev/confluence-rest-api?continue=https%3A%2F%2Fdeveloper.atlassian.com%2Fconfdev%2Fconfluence-rest-api&amp;amp;application=dac"&gt;RESTful API&lt;/a&gt;，就开始搞了。&lt;/p&gt;
&lt;p&gt;写迁移代码，在这里 &lt;a href="https://github.com/duitang/atlassian-confluence-xxoo"&gt;atlassian-confluence-xxoo&lt;/a&gt;，已经开源了，只使用过一次，成功的从 3.0.1 迁移到 5.4.4，
理论上，支持任意版本的 3.x/4.x Confluence 迁移到最新。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;python app.py -h&lt;/code&gt; 查看帮助，不行就看看代码。&lt;/p&gt;
&lt;p&gt;希望有迁移需求的同学，搜索到这里能够获得一些帮助。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2016/01/confluence-upgrade/"&gt;https://blog.alswl.com/2016/01/confluence-upgrade/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="confluence"></category></entry><entry><title>SS with Haproxy</title><link href="https://blog.alswl.com/2015/11/ss-with-haproxy/" rel="alternate"></link><published>2015-11-27T20:23:24+08:00</published><updated>2015-11-27T20:23:24+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2015-11-27:2015/11/ss-with-haproxy/</id><summary type="html">&lt;p&gt;&lt;img alt="shadowsocks.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201512/shadowsocks.png"/&gt;&lt;/p&gt;
&lt;p&gt;以前用自己的 SS，Linode 美国，后来 Linode 日本，但是始终拼不过上海电信的国际带宽。
经常不稳定，丢一半的包。&lt;/p&gt;
&lt;p&gt;于是买了 &lt;a href="https://portal.shadowsocks.com.hk/aff.php?aff=4215"&gt;SS&lt;/a&gt; 服务，
9 台服务器，自己挑觉得速度快的服务器。&lt;/p&gt;
&lt;p&gt;但一直固定某台服务器也会偶尔出问题，导致邮件出不来，网页打不开。
需要手动切换一下服务器。
于是用 HA 做了一个本地代理，调整了一些参数，让 SS 总是有快速的服务器供选择。&lt;/p&gt;
&lt;p&gt;结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;+-----------------+&lt;/span&gt;                                                  &lt;span class="o"&gt;+----------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;                                                  &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="o"&gt;|&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;                                           &lt;span class="o"&gt;&amp;gt;&amp;gt;|&lt;/span&gt;   &lt;span class="n"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;v&lt;/span&gt;                                           &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-----------------+&lt;/span&gt;    &lt;span class="n"&gt;v&lt;/span&gt;                                           &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;+----------------+&lt;/span&gt;
                       &lt;span class="n"&gt;v&lt;/span&gt;                                           &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="o"&gt;+-----------------+&lt;/span&gt;    &lt;span class="n"&gt;v&lt;/span&gt;    &lt;span class="o"&gt;|----------------+&lt;/span&gt;      &lt;span class="o"&gt;+------------+&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;+----------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;v&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="o"&gt;|&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;|&lt;/span&gt;    &lt;span class="n"&gt;HAProxy&lt;/span&gt;     &lt;span class="o"&gt;|&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;|&lt;/span&gt; &lt;span class="n"&gt;SS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;  &lt;span class="o"&gt;|&amp;gt;&amp;gt;&amp;gt;|&lt;/span&gt;   &lt;span class="n"&gt;Browser&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="o"&gt;^&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-----------------+&lt;/span&gt;    &lt;span class="o"&gt;^&lt;/span&gt;    &lt;span class="o"&gt;+----------------+&lt;/span&gt;      &lt;span class="o"&gt;+------------+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+----------------+&lt;/span&gt;
                       &lt;span class="o"&gt;^&lt;/span&gt;                                           &lt;span class="n"&gt;v&lt;/span&gt;   
&lt;span class="o"&gt;+-----------------+&lt;/span&gt;    &lt;span class="o"&gt;^&lt;/span&gt;                                           &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+----------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="o"&gt;^&lt;/span&gt;                                           &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="o"&gt;|&amp;gt;&amp;gt;&amp;gt;&amp;gt;^&lt;/span&gt;                                           &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;|&lt;/span&gt;   &lt;span class="n"&gt;Evernote&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;                                                  &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-----------------+&lt;/span&gt;                                                  &lt;span class="o"&gt;+----------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;global&lt;/span&gt;
    &lt;span class="n"&gt;ulimit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;  &lt;span class="mi"&gt;4096&lt;/span&gt;


&lt;span class="n"&gt;defaults&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt;    &lt;span class="n"&gt;tcp&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;


&lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;
    &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12222&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
    &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;
    &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;


&lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;
    &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1081&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;tcp&lt;/span&gt;
    &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;tcpka&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;
    &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="n"&gt;roundrobin&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;
    &lt;span class="n"&gt;maxconn&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;

    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;office&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;starbucks&lt;/span&gt;
    &lt;span class="n"&gt;retries&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;redispatch&lt;/span&gt;
    &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="n"&gt;host1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;maxconn&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;rise&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="n"&gt;fall&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;backup&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="n"&gt;host2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;maxconn&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;rise&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="n"&gt;fall&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="n"&gt;host2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;maxconn&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;rise&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="n"&gt;fall&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;挺稳定，很快速。&lt;/p&gt;
&lt;p&gt;update: 2015-12-15，添加 &lt;code&gt;backup&lt;/code&gt; 项，选一台最稳定的做 backup，避免所有连接都超时。
update: 2015-12-13，添加 &lt;code&gt;redispatch&lt;/code&gt;  / &lt;code&gt;retries&lt;/code&gt; 项，换机器重试，
大幅提高可用性，注意，可能在非幂等状态下面产生未知错误。&lt;/p&gt;
&lt;p&gt;&lt;img alt="haproxy.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201512/haproxy.png"/&gt;&lt;/p&gt;
&lt;p&gt;在跑的 node，有些延迟高，被干掉了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="youtube.png" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201512/youtube.png"/&gt;&lt;/p&gt;
&lt;p&gt;看 1080P 也挺顺畅。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2015/11/ss-with-haproxy/"&gt;https://blog.alswl.com/2015/11/ss-with-haproxy/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="SS"></category><category term="HAProxy"></category></entry><entry><title>几步拥有一个安全密码</title><link href="https://blog.alswl.com/2015/10/a-security-password/" rel="alternate"></link><published>2015-10-28T00:17:44+08:00</published><updated>2015-10-28T00:17:44+08:00</updated><author><name>alswl</name></author><id>tag:blog.alswl.com,2015-10-28:2015/10/a-security-password/</id><summary type="html">&lt;p&gt;&lt;img alt="password.jpg" src="https://ohsolnxaa.qnssl.com/upload_dropbox/201512/password.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;给团队非开发同学写的邮件，对其他人也有些意义，遂贴出来。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这个互联网越来越不安全 &lt;a href="https://www.baidu.com/s?wd=%E5%AF%86%E7%A0%81%E6%B3%84%E9%9C%B2%E4%BA%8B%E4%BB%B6&amp;amp;rsp=3&amp;amp;f=1&amp;amp;oq=%E5%AF%86%E7%A0%81%E6%B3%84%E9%9C%B2&amp;amp;ie=utf-8&amp;amp;usm=2&amp;amp;rsv_idx=1&amp;amp;rsv_pq=f9362ac90000f994&amp;amp;rsv_t=31d7A5Zyu36Hn4omAU5F9llRh3WBGl5tInDRywq%2FbPEwdPnyjCCcfGLdnNA&amp;amp;rsv_ers=xn0&amp;amp;rs_src=0"&gt;https://www.baidu.com/s?wd=%E5%AF%86%E7%A0%81%E6%B3%84%E9%9C%B2%E4%BA%8B%E4%BB%B6&lt;/a&gt;。密码数据库泄露，黑客暴库攻击，社会工程学攻击层出不穷。我给大家介绍几个小方法，轻松提高自己各类密码的安全等级。&lt;/p&gt;
&lt;p&gt;先给个地址，大家可以测试一下自己常用密码的复杂度：&lt;a href="https://howsecureismypassword.net/"&gt;https://howsecureismypassword.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;认为自己电脑水平还可以的，请直接翻到文章最后。&lt;/p&gt;
&lt;h2 id="ru-he-guan-li-mi-ma"&gt;如何管理密码&lt;/h2&gt;
&lt;p&gt;给普通用户的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密码设置复杂一些，不要使用生日、日期、姓名等有意义的信息&lt;/li&gt;
&lt;li&gt;使用一套合理的密码生成策略&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重点来了，密码生成策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择自己喜欢的诗词或者某句话，比如「床前明月光，疑是地上霜」，取其拼音的第一个字母 cqmygysdss&lt;/li&gt;
&lt;li&gt;将每个句子第一个单词大写，cqmygysdss -&amp;gt; CqmygYsdss&lt;/li&gt;
&lt;li&gt;加上对应网站的信息，比如 163：CqmygYsdss163，qq： CqmygYsdssqq&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大功告成，你的密码安全级别提升了。&lt;/p&gt;
&lt;p&gt;----------------------------- 高手的分界线 -----------------------&lt;/p&gt;
&lt;p&gt;给高水平选手推荐的方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心思想：密码分级，分离普通密码、重要密码（财务相关等）。&lt;/li&gt;
&lt;li&gt;普通密码使用大小写英文和数字混合&lt;/li&gt;
&lt;li&gt;重要密码和财务相关密码，独立生成密码，保存到 1Password / KeePass 等工具中，每个应用软件独立开来。&lt;/li&gt;
&lt;li&gt;推荐 KeePass，免费，参考 &lt;a href="http://www.iplaysoft.com/keepass.html"&gt;http://www.iplaysoft.com/keepass.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chang-jian-ruo-mi-ma-he-bao-li-po-jie-xu-yao-shi-jian"&gt;常见弱密码和暴力破解需要时间&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;123456 / 不需要&lt;/li&gt;
&lt;li&gt;duitang / 2s&lt;/li&gt;
&lt;li&gt;huhela1993 / 10天&lt;/li&gt;
&lt;li&gt;huhela_1993 / 48年&lt;/li&gt;
&lt;li&gt;CqmygYsdssqq / 3千年&lt;/li&gt;
&lt;li&gt;]W?852HCMHFUYzrz,F / 10000^5 年（Keepass 生成的密码）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="zui-hou"&gt;最后&lt;/h2&gt;
&lt;p&gt;针对任何在邮箱中向大家索取：&lt;/p&gt;
&lt;p&gt;密码、员工信息、通讯录、组织架构等的邮件，请大家注意确认对方的真实身份，不要轻易透露重要信息。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="panel"&gt;
&lt;div class="panel-body"&gt;
   &lt;small&gt;原文链接: &lt;a href="https://blog.alswl.com/2015/10/a-security-password/"&gt;https://blog.alswl.com/2015/10/a-security-password/&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;欢迎关注我的微信公众号：&lt;a href="http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzIyNTIwMTU3MQ==#wechat_webview_type=1&amp;wechat_redirect"&gt;窥豹&lt;/a&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;&lt;img src="https://ohsolnxaa.qnssl.com/upload_dropbox/201605/qrcode_for_gh_17e2f9c2caa4_258.jpg"/&gt;&lt;/small&gt;&lt;br&gt;
   &lt;small&gt;3a1ff193cee606bd1e2ea554a16353ee&lt;/small&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Security"></category></entry></feed>